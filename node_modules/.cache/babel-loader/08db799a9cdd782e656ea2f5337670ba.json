{"ast":null,"code":"/*!\n * paymentdetails.js - bip70 paymentdetails for bcoin\n * Copyright (c) 2016-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst ProtoReader = require('./utils/protoreader');\n\nconst ProtoWriter = require('./utils/protowriter');\n/**\n * BIP70 Payment Details\n */\n\n\nclass PaymentDetails {\n  /**\n   * Create payment details.\n   * @constructor\n   * @param {Object?} options\n   * @property {String|null} network\n   * @property {Object[]} outputs\n   * @property {Number} time\n   * @property {Number} expires\n   * @property {String|null} memo\n   * @property {String|null} paymentUrl\n   * @property {Buffer|null} merchantData\n   */\n  constructor(options) {\n    this.network = null;\n    this.outputs = [];\n    this.time = Math.floor(Date.now() / 1000);\n    this.expires = -1;\n    this.memo = null;\n    this.paymentUrl = null;\n    this.merchantData = null;\n    if (options) this.fromOptions(options);\n  }\n  /**\n   * Inject properties from options.\n   * @private\n   * @param {Object} options\n   * @returns {PaymentDetails}\n   */\n\n\n  fromOptions(options) {\n    if (options.network != null) {\n      assert(typeof options.network === 'string');\n      this.network = options.network;\n    }\n\n    if (options.outputs) {\n      assert(Array.isArray(options.outputs));\n\n      for (const output of options.outputs) {\n        assert(output && typeof output === 'object');\n        assert(Number.isSafeInteger(output.value) && output.value >= 0);\n        assert(Buffer.isBuffer(output.script));\n        this.outputs.push(output);\n      }\n    }\n\n    if (options.time != null) {\n      assert(Number.isSafeInteger(options.time));\n      this.time = options.time;\n    }\n\n    if (options.expires != null) {\n      assert(Number.isSafeInteger(options.expires));\n      this.expires = options.expires;\n    }\n\n    if (options.memo != null) {\n      assert(typeof options.memo === 'string');\n      this.memo = options.memo;\n    }\n\n    if (options.paymentUrl != null) {\n      assert(typeof options.paymentUrl === 'string');\n      this.paymentUrl = options.paymentUrl;\n    }\n\n    if (options.merchantData) this.setData(options.merchantData);\n    return this;\n  }\n  /**\n   * Instantiate payment details from options.\n   * @param {Object} options\n   * @returns {PaymentDetails}\n   */\n\n\n  static fromOptions(options) {\n    return new PaymentDetails().fromOptions(options);\n  }\n  /**\n   * Test whether the payment is expired.\n   * @returns {Boolean}\n   */\n\n\n  isExpired() {\n    if (this.expires === -1) return false;\n    return Math.floor(Date.now() / 1000) > this.expires;\n  }\n  /**\n   * Set payment details.\n   * @param {Object} data\n   * @param {String?} enc\n   */\n\n\n  setData(data, enc) {\n    if (data == null || Buffer.isBuffer(data)) {\n      this.merchantData = data;\n      return;\n    }\n\n    if (typeof data !== 'string') {\n      assert(!enc || enc === 'json');\n      this.merchantData = Buffer.from(JSON.stringify(data), 'utf8');\n      return;\n    }\n\n    this.merchantData = Buffer.from(data, enc);\n  }\n  /**\n   * Get payment details.\n   * @param {String?} enc\n   * @returns {String|Object|null}\n   */\n\n\n  getData(enc) {\n    let data = this.merchantData;\n    if (!data) return null;\n    if (!enc) return data;\n\n    if (enc === 'json') {\n      data = data.toString('utf8');\n\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        return null;\n      }\n\n      return data;\n    }\n\n    return data.toString(enc);\n  }\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   * @returns {PaymentDetails}\n   */\n\n\n  fromRaw(data) {\n    const br = new ProtoReader(data);\n    this.network = br.readFieldString(1, true);\n\n    while (br.nextTag() === 2) {\n      const op = new ProtoReader(br.readFieldBytes(2));\n      const output = {\n        value: op.readFieldU64(1, true),\n        script: op.readFieldBytes(2, true)\n      };\n      this.outputs.push(output);\n    }\n\n    this.time = br.readFieldU64(3);\n    this.expires = br.readFieldU64(4, true);\n    this.memo = br.readFieldString(5, true);\n    this.paymentUrl = br.readFieldString(6, true);\n    this.merchantData = br.readFieldBytes(7, true);\n    return this;\n  }\n  /**\n   * Instantiate payment details from serialized data.\n   * @param {Buffer} data\n   * @returns {PaymentDetails}\n   */\n\n\n  static fromRaw(data, enc) {\n    if (typeof data === 'string') data = Buffer.from(data, enc);\n    return new PaymentDetails().fromRaw(data);\n  }\n  /**\n   * Serialize the payment details (protobuf).\n   * @returns {Buffer}\n   */\n\n\n  toRaw() {\n    const bw = new ProtoWriter();\n    if (this.network != null) bw.writeFieldString(1, this.network);\n\n    for (const output of this.outputs) {\n      const op = new ProtoWriter();\n      op.writeFieldU64(1, output.value);\n      op.writeFieldBytes(2, output.script);\n      bw.writeFieldBytes(2, op.render());\n    }\n\n    bw.writeFieldU64(3, this.time);\n    if (this.expires !== -1) bw.writeFieldU64(4, this.expires);\n    if (this.memo != null) bw.writeFieldString(5, this.memo);\n    if (this.paymentUrl != null) bw.writeFieldString(6, this.paymentUrl);\n    if (this.merchantData) bw.writeFieldString(7, this.merchantData);\n    return bw.render();\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = PaymentDetails;","map":null,"metadata":{},"sourceType":"script"}