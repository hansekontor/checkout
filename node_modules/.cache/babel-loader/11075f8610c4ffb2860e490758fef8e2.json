{"ast":null,"code":"var _jsxFileName = \"/home/henrik/Documents/dev/checkoutmin/src/components/Common/ScanQRCode.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Modal } from 'antd';\nimport { ThemedQrcodeOutlined } from '@components/Common/CustomIcons';\nimport styled from 'styled-components';\nimport { BrowserQRCodeReader } from '@zxing/library';\nimport { currency, isValidCashPrefix, isValidTokenPrefix } from '@components/Common/Ticker.js';\nimport { Event } from '@utils/GoogleAnalytics';\nconst StyledScanQRCode = styled.span`\n    display: block;\n`;\nconst StyledModal = styled(Modal)`\n    width: 400px !important;\n    height: 400px !important;\n\n    .ant-modal-close {\n        top: 0 !important;\n        right: 0 !important;\n    }\n`;\nconst QRPreview = styled.video`\n    width: 100%;\n`;\n\nconst ScanQRCode = _ref => {\n  let {\n    loadWithCameraOpen,\n    onScan = () => null,\n    ...otherProps\n  } = _ref;\n  const [visible, setVisible] = useState(loadWithCameraOpen);\n  const [error, setError] = useState(false); // Use these states to debug video errors on mobile\n  // Note: iOS chrome/brave/firefox does not support accessing camera, will throw error\n  // iOS users can use safari\n  // todo only show scanner with safari\n  //const [mobileError, setMobileError] = useState(false);\n  //const [mobileErrorMsg, setMobileErrorMsg] = useState(false);\n\n  const [activeCodeReader, setActiveCodeReader] = useState(null);\n\n  const teardownCodeReader = codeReader => {\n    if (codeReader !== null) {\n      codeReader.reset();\n      codeReader.stop();\n      codeReader = null;\n      setActiveCodeReader(codeReader);\n    }\n  };\n\n  const parseContent = content => {\n    let type = 'unknown';\n    let values = {}; // If what scanner reads from QR code begins with 'bitcoincash:' or 'simpleledger:' or their successor prefixes\n\n    if (isValidCashPrefix(content) || isValidTokenPrefix(content)) {\n      type = 'address';\n      values = {\n        address: content\n      }; // Event(\"Category\", \"Action\", \"Label\")\n      // Track number of successful QR code scans\n      // BCH or slp?\n\n      let eventLabel = currency.ticker;\n      const isToken = content.split(currency.tokenPrefix).length > 1;\n\n      if (isToken) {\n        eventLabel = currency.tokenTicker;\n      }\n\n      Event('ScanQRCode.js', 'Address Scanned', eventLabel);\n    }\n\n    return {\n      type,\n      values\n    };\n  };\n\n  const scanForQrCode = async () => {\n    const codeReader = new BrowserQRCodeReader();\n    setActiveCodeReader(codeReader);\n\n    try {\n      // Need to execute this before you can decode input\n      // eslint-disable-next-line no-unused-vars\n      const videoInputDevices = await codeReader.getVideoInputDevices(); //console.log(`videoInputDevices`, videoInputDevices);\n      //setMobileError(JSON.stringify(videoInputDevices));\n      // choose your media device (webcam, frontal camera, back camera, etc.)\n      // TODO implement if necessary\n      //const selectedDeviceId = videoInputDevices[0].deviceId;\n      //const previewElem = document.querySelector(\"#test-area-qr-code-webcam\");\n\n      const content = await codeReader.decodeFromInputVideoDevice(undefined, 'test-area-qr-code-webcam');\n      const result = parseContent(content.text); // stop scanning and fill form if it's an address\n\n      if (result.type === 'address') {\n        // Hide the scanner\n        setVisible(false);\n        onScan(result.values.address);\n        return teardownCodeReader(codeReader);\n      }\n    } catch (err) {\n      console.log(`Error in QR scanner:`);\n      console.log(err);\n      console.log(JSON.stringify(err.message)); //setMobileErrorMsg(JSON.stringify(err.message));\n\n      setError(err);\n      teardownCodeReader(codeReader);\n    } // stop scanning after 20s no matter what\n\n  };\n\n  React.useEffect(() => {\n    if (!visible) {\n      setError(false); // Stop the camera if user closes modal\n\n      if (activeCodeReader !== null) {\n        teardownCodeReader(activeCodeReader);\n      }\n    } else {\n      scanForQrCode();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [visible]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledScanQRCode, Object.assign({}, otherProps, {\n    onClick: () => setVisible(!visible),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ThemedQrcodeOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(StyledModal, {\n    title: \"Scan QR code\",\n    visible: visible,\n    onCancel: () => setVisible(false),\n    footer: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, visible ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, error ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Alert, {\n    message: \"Error\",\n    description: \"Error in QR scanner. Please ensure your camera is not in use. Due to Apple restrictions on third-party browsers, you must use Safari browser for QR code scanning on an iPhone.\",\n    type: \"error\",\n    showIcon: true,\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 33\n    }\n  })) : /*#__PURE__*/React.createElement(QRPreview, {\n    id: \"test-area-qr-code-webcam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  })) : null));\n};\n\nScanQRCode.propTypes = {\n  loadWithCameraOpen: PropTypes.bool,\n  onScan: PropTypes.func\n};\nexport default ScanQRCode;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/components/Common/ScanQRCode.js"],"names":["React","useState","PropTypes","Alert","Modal","ThemedQrcodeOutlined","styled","BrowserQRCodeReader","currency","isValidCashPrefix","isValidTokenPrefix","Event","StyledScanQRCode","span","StyledModal","QRPreview","video","ScanQRCode","loadWithCameraOpen","onScan","otherProps","visible","setVisible","error","setError","activeCodeReader","setActiveCodeReader","teardownCodeReader","codeReader","reset","stop","parseContent","content","type","values","address","eventLabel","ticker","isToken","split","tokenPrefix","length","tokenTicker","scanForQrCode","videoInputDevices","getVideoInputDevices","decodeFromInputVideoDevice","undefined","result","text","err","console","log","JSON","stringify","message","useEffect","textAlign","propTypes","bool","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Modal } from 'antd';\nimport { ThemedQrcodeOutlined } from '@components/Common/CustomIcons';\nimport styled from 'styled-components';\nimport { BrowserQRCodeReader } from '@zxing/library';\nimport {\n    currency,\n    isValidCashPrefix,\n    isValidTokenPrefix,\n} from '@components/Common/Ticker.js';\nimport { Event } from '@utils/GoogleAnalytics';\n\nconst StyledScanQRCode = styled.span`\n    display: block;\n`;\n\nconst StyledModal = styled(Modal)`\n    width: 400px !important;\n    height: 400px !important;\n\n    .ant-modal-close {\n        top: 0 !important;\n        right: 0 !important;\n    }\n`;\n\nconst QRPreview = styled.video`\n    width: 100%;\n`;\n\nconst ScanQRCode = ({\n    loadWithCameraOpen,\n    onScan = () => null,\n    ...otherProps\n}) => {\n    const [visible, setVisible] = useState(loadWithCameraOpen);\n    const [error, setError] = useState(false);\n    // Use these states to debug video errors on mobile\n    // Note: iOS chrome/brave/firefox does not support accessing camera, will throw error\n    // iOS users can use safari\n    // todo only show scanner with safari\n    //const [mobileError, setMobileError] = useState(false);\n    //const [mobileErrorMsg, setMobileErrorMsg] = useState(false);\n    const [activeCodeReader, setActiveCodeReader] = useState(null);\n\n    const teardownCodeReader = codeReader => {\n        if (codeReader !== null) {\n            codeReader.reset();\n            codeReader.stop();\n            codeReader = null;\n            setActiveCodeReader(codeReader);\n        }\n    };\n\n    const parseContent = content => {\n        let type = 'unknown';\n        let values = {};\n\n        // If what scanner reads from QR code begins with 'bitcoincash:' or 'simpleledger:' or their successor prefixes\n        if (isValidCashPrefix(content) || isValidTokenPrefix(content)) {\n            type = 'address';\n            values = { address: content };\n            // Event(\"Category\", \"Action\", \"Label\")\n            // Track number of successful QR code scans\n            // BCH or slp?\n            let eventLabel = currency.ticker;\n            const isToken = content.split(currency.tokenPrefix).length > 1;\n            if (isToken) {\n                eventLabel = currency.tokenTicker;\n            }\n            Event('ScanQRCode.js', 'Address Scanned', eventLabel);\n        }\n        return { type, values };\n    };\n\n    const scanForQrCode = async () => {\n        const codeReader = new BrowserQRCodeReader();\n        setActiveCodeReader(codeReader);\n\n        try {\n            // Need to execute this before you can decode input\n            // eslint-disable-next-line no-unused-vars\n            const videoInputDevices = await codeReader.getVideoInputDevices();\n            //console.log(`videoInputDevices`, videoInputDevices);\n            //setMobileError(JSON.stringify(videoInputDevices));\n\n            // choose your media device (webcam, frontal camera, back camera, etc.)\n            // TODO implement if necessary\n            //const selectedDeviceId = videoInputDevices[0].deviceId;\n\n            //const previewElem = document.querySelector(\"#test-area-qr-code-webcam\");\n\n            const content = await codeReader.decodeFromInputVideoDevice(\n                undefined,\n                'test-area-qr-code-webcam',\n            );\n            const result = parseContent(content.text);\n\n            // stop scanning and fill form if it's an address\n            if (result.type === 'address') {\n                // Hide the scanner\n                setVisible(false);\n                onScan(result.values.address);\n                return teardownCodeReader(codeReader);\n            }\n        } catch (err) {\n            console.log(`Error in QR scanner:`);\n            console.log(err);\n            console.log(JSON.stringify(err.message));\n            //setMobileErrorMsg(JSON.stringify(err.message));\n            setError(err);\n            teardownCodeReader(codeReader);\n        }\n\n        // stop scanning after 20s no matter what\n    };\n\n    React.useEffect(() => {\n        if (!visible) {\n            setError(false);\n            // Stop the camera if user closes modal\n            if (activeCodeReader !== null) {\n                teardownCodeReader(activeCodeReader);\n            }\n        } else {\n            scanForQrCode();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [visible]);\n\n    return (\n        <>\n            <StyledScanQRCode\n                {...otherProps}\n                onClick={() => setVisible(!visible)}\n            >\n                <ThemedQrcodeOutlined />\n            </StyledScanQRCode>\n            <StyledModal\n                title=\"Scan QR code\"\n                visible={visible}\n                onCancel={() => setVisible(false)}\n                footer={null}\n            >\n                {visible ? (\n                    <div>\n                        {error ? (\n                            <>\n                                <Alert\n                                    message=\"Error\"\n                                    description=\"Error in QR scanner. Please ensure your camera is not in use. Due to Apple restrictions on third-party browsers, you must use Safari browser for QR code scanning on an iPhone.\"\n                                    type=\"error\"\n                                    showIcon\n                                    style={{ textAlign: 'left' }}\n                                />\n                                {/*\n                <p>{mobileError}</p>\n                <p>{mobileErrorMsg}</p>\n                */}\n                            </>\n                        ) : (\n                            <QRPreview id=\"test-area-qr-code-webcam\"></QRPreview>\n                        )}\n                    </div>\n                ) : null}\n            </StyledModal>\n        </>\n    );\n};\n\nScanQRCode.propTypes = {\n    loadWithCameraOpen: PropTypes.bool,\n    onScan: PropTypes.func,\n};\n\nexport default ScanQRCode;\n"]},"metadata":{},"sourceType":"module"}