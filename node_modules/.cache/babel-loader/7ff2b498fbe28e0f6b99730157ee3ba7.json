{"ast":null,"code":"/*!\n * sha512.js - SHA512 implementation for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-2\n *   https://tools.ietf.org/html/rfc4634\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/512.js\n */\n\n/* eslint camelcase: \"off\" */\n'use strict';\n\nconst assert = require('../internal/assert');\n\nconst HMAC = require('../internal/hmac');\n/*\n * Constants\n */\n\n\nconst FINALIZED = -1;\nconst DESC = Buffer.alloc(16, 0x00);\nconst PADDING = Buffer.alloc(128, 0x00);\nPADDING[0] = 0x80;\nconst K = new Uint32Array([0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817]);\n/**\n * SHA512\n */\n\nclass SHA512 {\n  constructor() {\n    this.state = new Uint32Array(16);\n    this.msg = new Uint32Array(160);\n    this.block = Buffer.allocUnsafe(128);\n    this.size = FINALIZED;\n  }\n\n  init() {\n    this.state[0] = 0x6a09e667;\n    this.state[1] = 0xf3bcc908;\n    this.state[2] = 0xbb67ae85;\n    this.state[3] = 0x84caa73b;\n    this.state[4] = 0x3c6ef372;\n    this.state[5] = 0xfe94f82b;\n    this.state[6] = 0xa54ff53a;\n    this.state[7] = 0x5f1d36f1;\n    this.state[8] = 0x510e527f;\n    this.state[9] = 0xade682d1;\n    this.state[10] = 0x9b05688c;\n    this.state[11] = 0x2b3e6c1f;\n    this.state[12] = 0x1f83d9ab;\n    this.state[13] = 0xfb41bd6b;\n    this.state[14] = 0x5be0cd19;\n    this.state[15] = 0x137e2179;\n    this.size = 0;\n    return this;\n  }\n\n  update(data) {\n    assert(Buffer.isBuffer(data));\n\n    this._update(data, data.length);\n\n    return this;\n  }\n\n  final() {\n    return this._final(Buffer.allocUnsafe(64));\n  }\n\n  _update(data, len) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n    let pos = this.size & 127;\n    let off = 0;\n    this.size += len;\n\n    if (pos > 0) {\n      let want = 128 - pos;\n      if (want > len) want = len;\n      data.copy(this.block, pos, off, off + want);\n      pos += want;\n      len -= want;\n      off += want;\n      if (pos < 128) return;\n\n      this._transform(this.block, 0);\n    }\n\n    while (len >= 128) {\n      this._transform(data, off);\n\n      off += 128;\n      len -= 128;\n    }\n\n    if (len > 0) data.copy(this.block, 0, off, off + len);\n  }\n  /**\n   * Finalize SHA512 context.\n   * @private\n   * @param {Buffer} out\n   * @returns {Buffer}\n   */\n\n\n  _final(out) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n    const pos = this.size & 127;\n    const len = this.size * 8;\n    writeU32(DESC, len * (1 / 0x100000000) >>> 0, 8);\n    writeU32(DESC, len >>> 0, 12);\n\n    this._update(PADDING, 1 + (239 - pos & 127));\n\n    this._update(DESC, 16);\n\n    for (let i = 0; i < 16; i++) {\n      writeU32(out, this.state[i], i * 4);\n      this.state[i] = 0;\n    }\n\n    for (let i = 0; i < 160; i++) this.msg[i] = 0;\n\n    for (let i = 0; i < 128; i++) this.block[i] = 0;\n\n    this.size = FINALIZED;\n    return out;\n  }\n\n  _prepare(chunk, pos) {\n    const W = this.msg;\n    let i = 0;\n\n    for (; i < 32; i++) W[i] = readU32(chunk, pos + i * 4);\n\n    for (; i < 160; i += 2) {\n      const c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n      const c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n      const c1_hi = W[i - 14];\n      const c1_lo = W[i - 13];\n      const c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n      const c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n      const c3_hi = W[i - 32];\n      const c3_lo = W[i - 31];\n      W[i + 0] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n      W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n  }\n\n  _transform(chunk, pos) {\n    const W = this.msg;\n\n    this._prepare(chunk, pos);\n\n    let ah = this.state[0];\n    let al = this.state[1];\n    let bh = this.state[2];\n    let bl = this.state[3];\n    let ch = this.state[4];\n    let cl = this.state[5];\n    let dh = this.state[6];\n    let dl = this.state[7];\n    let eh = this.state[8];\n    let el = this.state[9];\n    let fh = this.state[10];\n    let fl = this.state[11];\n    let gh = this.state[12];\n    let gl = this.state[13];\n    let hh = this.state[14];\n    let hl = this.state[15];\n\n    for (let i = 0; i < W.length; i += 2) {\n      let c0_hi = hh;\n      let c0_lo = hl;\n      let c1_hi = s1_512_hi(eh, el);\n      let c1_lo = s1_512_lo(eh, el);\n      const c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n      const c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n      const c3_hi = K[i + 0];\n      const c3_lo = K[i + 1];\n      const c4_hi = W[i + 0];\n      const c4_lo = W[i + 1];\n      const T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      const T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      c0_hi = s0_512_hi(ah, al);\n      c0_lo = s0_512_lo(ah, al);\n      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n      const T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n      const T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n      el = sum64_lo(dl, dl, T1_hi, T1_lo);\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n\n    sum64(this.state, 0, ah, al);\n    sum64(this.state, 2, bh, bl);\n    sum64(this.state, 4, ch, cl);\n    sum64(this.state, 6, dh, dl);\n    sum64(this.state, 8, eh, el);\n    sum64(this.state, 10, fh, fl);\n    sum64(this.state, 12, gh, gl);\n    sum64(this.state, 14, hh, hl);\n  }\n\n  static hash() {\n    return new SHA512();\n  }\n\n  static hmac() {\n    return new HMAC(SHA512, 128);\n  }\n\n  static digest(data) {\n    return SHA512.ctx.init().update(data).final();\n  }\n\n  static root(left, right) {\n    assert(Buffer.isBuffer(left) && left.length === 64);\n    assert(Buffer.isBuffer(right) && right.length === 64);\n    return SHA512.ctx.init().update(left).update(right).final();\n  }\n\n  static multi(x, y, z) {\n    const {\n      ctx\n    } = SHA512;\n    ctx.init();\n    ctx.update(x);\n    ctx.update(y);\n    if (z) ctx.update(z);\n    return ctx.final();\n  }\n\n  static mac(data, key) {\n    return SHA512.hmac().init(key).update(data).final();\n  }\n\n}\n/*\n * Static\n */\n\n\nSHA512.native = 0;\nSHA512.id = 'SHA512';\nSHA512.size = 64;\nSHA512.bits = 512;\nSHA512.blockSize = 128;\nSHA512.zero = Buffer.alloc(64, 0x00);\nSHA512.ctx = new SHA512();\n/*\n * Helpers\n */\n\nfunction sum64(buf, pos, ah, al) {\n  const bh = buf[pos + 0];\n  const bl = buf[pos + 1];\n  const lo = al + bl >>> 0;\n  const hi = (lo < al) + ah + bh;\n  buf[pos + 0] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nfunction sum64_hi(ah, al, bh, bl) {\n  const lo = al + bl >>> 0;\n  const hi = (lo < al) + ah + bh;\n  return hi >>> 0;\n}\n\nfunction sum64_lo(ah, al, bh, bl) {\n  const lo = al + bl;\n  return lo >>> 0;\n}\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  let carry = 0;\n  let lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al;\n  lo = lo + cl >>> 0;\n  carry += lo < cl;\n  lo = lo + dl >>> 0;\n  carry += lo < dl;\n  const hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  const lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  let carry = 0;\n  let lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al;\n  lo = lo + cl >>> 0;\n  carry += lo < cl;\n  lo = lo + dl >>> 0;\n  carry += lo < dl;\n  lo = lo + el >>> 0;\n  carry += lo < el;\n  const hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  const lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nfunction rotr64_hi(ah, al, num) {\n  const r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nfunction rotr64_lo(ah, al, num) {\n  const r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\n\nfunction shr64_lo(ah, al, num) {\n  const r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nfunction ch64_hi(xh, xl, yh, yl, zh, zl) {\n  const r = xh & yh ^ ~xh & zh;\n  return r >>> 0;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  const r = xl & yl ^ ~xl & zl;\n  return r >>> 0;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh, zl) {\n  const r = xh & yh ^ xh & zh ^ yh & zh;\n  return r >>> 0;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  const r = xl & yl ^ xl & zl ^ yl & zl;\n  return r >>> 0;\n}\n\nfunction s0_512_hi(xh, xl) {\n  const c0_hi = rotr64_hi(xh, xl, 28);\n  const c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  const c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  const r = c0_hi ^ c1_hi ^ c2_hi;\n  return r >>> 0;\n}\n\nfunction s0_512_lo(xh, xl) {\n  const c0_lo = rotr64_lo(xh, xl, 28);\n  const c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  const c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  const r = c0_lo ^ c1_lo ^ c2_lo;\n  return r >>> 0;\n}\n\nfunction s1_512_hi(xh, xl) {\n  const c0_hi = rotr64_hi(xh, xl, 14);\n  const c1_hi = rotr64_hi(xh, xl, 18);\n  const c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  const r = c0_hi ^ c1_hi ^ c2_hi;\n  return r >>> 0;\n}\n\nfunction s1_512_lo(xh, xl) {\n  const c0_lo = rotr64_lo(xh, xl, 14);\n  const c1_lo = rotr64_lo(xh, xl, 18);\n  const c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  const r = c0_lo ^ c1_lo ^ c2_lo;\n  return r >>> 0;\n}\n\nfunction g0_512_hi(xh, xl) {\n  const c0_hi = rotr64_hi(xh, xl, 1);\n  const c1_hi = rotr64_hi(xh, xl, 8);\n  const c2_hi = shr64_hi(xh, xl, 7);\n  const r = c0_hi ^ c1_hi ^ c2_hi;\n  return r >>> 0;\n}\n\nfunction g0_512_lo(xh, xl) {\n  const c0_lo = rotr64_lo(xh, xl, 1);\n  const c1_lo = rotr64_lo(xh, xl, 8);\n  const c2_lo = shr64_lo(xh, xl, 7);\n  const r = c0_lo ^ c1_lo ^ c2_lo;\n  return r >>> 0;\n}\n\nfunction g1_512_hi(xh, xl) {\n  const c0_hi = rotr64_hi(xh, xl, 19);\n  const c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  const c2_hi = shr64_hi(xh, xl, 6);\n  const r = c0_hi ^ c1_hi ^ c2_hi;\n  return r >>> 0;\n}\n\nfunction g1_512_lo(xh, xl) {\n  const c0_lo = rotr64_lo(xh, xl, 19);\n  const c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  const c2_lo = shr64_lo(xh, xl, 6);\n  const r = c0_lo ^ c1_lo ^ c2_lo;\n  return r >>> 0;\n}\n\nfunction readU32(data, off) {\n  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];\n}\n\nfunction writeU32(data, num, off) {\n  data[off++] = num >>> 24;\n  data[off++] = num >>> 16;\n  data[off++] = num >>> 8;\n  data[off++] = num;\n  return off;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = SHA512;","map":null,"metadata":{},"sourceType":"script"}