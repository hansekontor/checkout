{"ast":null,"code":"/*!\n * undocoins.js - undocoins object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst bio = require('bufio');\n\nconst CoinEntry = require('../coins/coinentry');\n/**\n * Undo Coins\n * Coins need to be resurrected from somewhere\n * during a reorg. The undo coins store all\n * spent coins in a single record per block\n * (in a compressed format).\n * @alias module:coins.UndoCoins\n * @property {UndoCoin[]} items\n */\n\n\nclass UndoCoins {\n  /**\n   * Create undo coins.\n   * @constructor\n   */\n  constructor() {\n    this.items = [];\n  }\n  /**\n   * Push coin entry onto undo coin array.\n   * @param {CoinEntry}\n   * @returns {Number}\n   */\n\n\n  push(coin) {\n    return this.items.push(coin);\n  }\n  /**\n   * Calculate undo coins size.\n   * @returns {Number}\n   */\n\n\n  getSize() {\n    let size = 0;\n    size += 4;\n\n    for (const coin of this.items) size += coin.getSize();\n\n    return size;\n  }\n  /**\n   * Serialize all undo coins.\n   * @returns {Buffer}\n   */\n\n\n  toRaw() {\n    const size = this.getSize();\n    const bw = bio.write(size);\n    bw.writeU32(this.items.length);\n\n    for (const coin of this.items) coin.toWriter(bw);\n\n    return bw.render();\n  }\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   * @returns {UndoCoins}\n   */\n\n\n  fromRaw(data) {\n    const br = bio.read(data);\n    const count = br.readU32();\n\n    for (let i = 0; i < count; i++) this.items.push(CoinEntry.fromReader(br));\n\n    return this;\n  }\n  /**\n   * Instantiate undo coins from serialized data.\n   * @param {Buffer} data\n   * @returns {UndoCoins}\n   */\n\n\n  static fromRaw(data) {\n    return new this().fromRaw(data);\n  }\n  /**\n   * Test whether the undo coins have any members.\n   * @returns {Boolean}\n   */\n\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n  /**\n   * Render the undo coins.\n   * @returns {Buffer}\n   */\n\n\n  commit() {\n    const raw = this.toRaw();\n    this.items.length = 0;\n    return raw;\n  }\n  /**\n   * Re-apply undo coins to a view, effectively unspending them.\n   * @param {CoinView} view\n   * @param {Outpoint} prevout\n   */\n\n\n  apply(view, prevout) {\n    const undo = this.items.pop();\n    assert(undo);\n    view.addEntry(prevout, undo);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = UndoCoins;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/coins/undocoins.js"],"names":["assert","require","bio","CoinEntry","UndoCoins","constructor","items","push","coin","getSize","size","toRaw","bw","write","writeU32","length","toWriter","render","fromRaw","data","br","read","count","readU32","i","fromReader","isEmpty","commit","raw","apply","view","prevout","undo","pop","addEntry","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,SAAN,CAAgB;AACd;AACF;AACA;AACA;AAEEC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEEC,EAAAA,IAAI,CAACC,IAAD,EAAO;AACT,WAAO,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEEC,EAAAA,OAAO,GAAG;AACR,QAAIC,IAAI,GAAG,CAAX;AAEAA,IAAAA,IAAI,IAAI,CAAR;;AAEA,SAAK,MAAMF,IAAX,IAAmB,KAAKF,KAAxB,EACEI,IAAI,IAAIF,IAAI,CAACC,OAAL,EAAR;;AAEF,WAAOC,IAAP;AACD;AAED;AACF;AACA;AACA;;;AAEEC,EAAAA,KAAK,GAAG;AACN,UAAMD,IAAI,GAAG,KAAKD,OAAL,EAAb;AACA,UAAMG,EAAE,GAAGV,GAAG,CAACW,KAAJ,CAAUH,IAAV,CAAX;AAEAE,IAAAA,EAAE,CAACE,QAAH,CAAY,KAAKR,KAAL,CAAWS,MAAvB;;AAEA,SAAK,MAAMP,IAAX,IAAmB,KAAKF,KAAxB,EACEE,IAAI,CAACQ,QAAL,CAAcJ,EAAd;;AAEF,WAAOA,EAAE,CAACK,MAAH,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAEEC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,UAAMC,EAAE,GAAGlB,GAAG,CAACmB,IAAJ,CAASF,IAAT,CAAX;AACA,UAAMG,KAAK,GAAGF,EAAE,CAACG,OAAH,EAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EACE,KAAKlB,KAAL,CAAWC,IAAX,CAAgBJ,SAAS,CAACsB,UAAV,CAAqBL,EAArB,CAAhB;;AAEF,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEgB,SAAPF,OAAO,CAACC,IAAD,EAAO;AACnB,WAAO,IAAI,IAAJ,GAAWD,OAAX,CAAmBC,IAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEEO,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKpB,KAAL,CAAWS,MAAX,KAAsB,CAA7B;AACD;AAED;AACF;AACA;AACA;;;AAEEY,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG,KAAKjB,KAAL,EAAZ;AACA,SAAKL,KAAL,CAAWS,MAAX,GAAoB,CAApB;AACA,WAAOa,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEEC,EAAAA,KAAK,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACnB,UAAMC,IAAI,GAAG,KAAK1B,KAAL,CAAW2B,GAAX,EAAb;AAEAjC,IAAAA,MAAM,CAACgC,IAAD,CAAN;AAEAF,IAAAA,IAAI,CAACI,QAAL,CAAcH,OAAd,EAAuBC,IAAvB;AACD;;AAhHa;AAmHhB;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBhC,SAAjB","sourcesContent":["/*!\n * undocoins.js - undocoins object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst bio = require('bufio');\nconst CoinEntry = require('../coins/coinentry');\n\n/**\n * Undo Coins\n * Coins need to be resurrected from somewhere\n * during a reorg. The undo coins store all\n * spent coins in a single record per block\n * (in a compressed format).\n * @alias module:coins.UndoCoins\n * @property {UndoCoin[]} items\n */\n\nclass UndoCoins {\n  /**\n   * Create undo coins.\n   * @constructor\n   */\n\n  constructor() {\n    this.items = [];\n  }\n\n  /**\n   * Push coin entry onto undo coin array.\n   * @param {CoinEntry}\n   * @returns {Number}\n   */\n\n  push(coin) {\n    return this.items.push(coin);\n  }\n\n  /**\n   * Calculate undo coins size.\n   * @returns {Number}\n   */\n\n  getSize() {\n    let size = 0;\n\n    size += 4;\n\n    for (const coin of this.items)\n      size += coin.getSize();\n\n    return size;\n  }\n\n  /**\n   * Serialize all undo coins.\n   * @returns {Buffer}\n   */\n\n  toRaw() {\n    const size = this.getSize();\n    const bw = bio.write(size);\n\n    bw.writeU32(this.items.length);\n\n    for (const coin of this.items)\n      coin.toWriter(bw);\n\n    return bw.render();\n  }\n\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   * @returns {UndoCoins}\n   */\n\n  fromRaw(data) {\n    const br = bio.read(data);\n    const count = br.readU32();\n\n    for (let i = 0; i < count; i++)\n      this.items.push(CoinEntry.fromReader(br));\n\n    return this;\n  }\n\n  /**\n   * Instantiate undo coins from serialized data.\n   * @param {Buffer} data\n   * @returns {UndoCoins}\n   */\n\n  static fromRaw(data) {\n    return new this().fromRaw(data);\n  }\n\n  /**\n   * Test whether the undo coins have any members.\n   * @returns {Boolean}\n   */\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  /**\n   * Render the undo coins.\n   * @returns {Buffer}\n   */\n\n  commit() {\n    const raw = this.toRaw();\n    this.items.length = 0;\n    return raw;\n  }\n\n  /**\n   * Re-apply undo coins to a view, effectively unspending them.\n   * @param {CoinView} view\n   * @param {Outpoint} prevout\n   */\n\n  apply(view, prevout) {\n    const undo = this.items.pop();\n\n    assert(undo);\n\n    view.addEntry(prevout, undo);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = UndoCoins;\n"]},"metadata":{},"sourceType":"module"}