{"ast":null,"code":"/*!\n * md5.js - MD5 implementation for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/MD5\n *   https://tools.ietf.org/html/rfc1321\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n\nconst HMAC = require('../internal/hmac');\n/*\n * Constants\n */\n\n\nconst FINALIZED = -1;\nconst DESC = Buffer.alloc(8, 0x00);\nconst PADDING = Buffer.alloc(64, 0x00);\nPADDING[0] = 0x80;\nconst K = new Uint32Array([0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665, 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391]);\nconst S = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n/**\n * MD5\n */\n\nclass MD5 {\n  constructor() {\n    this.state = new Uint32Array(4);\n    this.msg = new Uint32Array(16);\n    this.block = Buffer.allocUnsafe(64);\n    this.size = FINALIZED;\n  }\n\n  init() {\n    this.state[0] = 0x67452301;\n    this.state[1] = 0xefcdab89;\n    this.state[2] = 0x98badcfe;\n    this.state[3] = 0x10325476;\n    this.size = 0;\n    return this;\n  }\n\n  update(data) {\n    assert(Buffer.isBuffer(data));\n\n    this._update(data, data.length);\n\n    return this;\n  }\n\n  final() {\n    return this._final(Buffer.allocUnsafe(16));\n  }\n\n  _update(data, len) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n    let pos = this.size & 63;\n    let off = 0;\n    this.size += len;\n\n    if (pos > 0) {\n      let want = 64 - pos;\n      if (want > len) want = len;\n      data.copy(this.block, pos, off, off + want);\n      pos += want;\n      len -= want;\n      off += want;\n      if (pos < 64) return;\n\n      this._transform(this.block, 0);\n    }\n\n    while (len >= 64) {\n      this._transform(data, off);\n\n      off += 64;\n      len -= 64;\n    }\n\n    if (len > 0) data.copy(this.block, 0, off, off + len);\n  }\n\n  _final(out) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n    const pos = this.size & 63;\n    const len = this.size * 8;\n    writeU32(DESC, len >>> 0, 0);\n    writeU32(DESC, len * (1 / 0x100000000) >>> 0, 4);\n\n    this._update(PADDING, 1 + (119 - pos & 63));\n\n    this._update(DESC, 8);\n\n    for (let i = 0; i < 4; i++) {\n      writeU32(out, this.state[i], i * 4);\n      this.state[i] = 0;\n    }\n\n    for (let i = 0; i < 16; i++) this.msg[i] = 0;\n\n    for (let i = 0; i < 64; i++) this.block[i] = 0;\n\n    this.size = FINALIZED;\n    return out;\n  }\n\n  _transform(chunk, pos) {\n    const W = this.msg;\n    let a = this.state[0];\n    let b = this.state[1];\n    let c = this.state[2];\n    let d = this.state[3];\n    let i = 0;\n\n    for (; i < 16; i++) W[i] = readU32(chunk, pos + i * 4);\n\n    for (i = 0; i < 64; i++) {\n      let f, g;\n\n      if (i < 16) {\n        f = b & c | ~b & d;\n        g = i;\n      } else if (i < 32) {\n        f = d & b | ~d & c;\n        g = 5 * i + 1 & 15;\n      } else if (i < 48) {\n        f = b ^ c ^ d;\n        g = 3 * i + 5 & 15;\n      } else {\n        f = c ^ (b | ~d);\n        g = 7 * i & 15;\n      }\n\n      f >>>= 0;\n      f = f + a + K[i] + W[g];\n      f >>>= 0;\n      a = d;\n      d = c;\n      c = b;\n      b = b + rotl32(f, S[i]);\n      b >>>= 0;\n    }\n\n    this.state[0] += a;\n    this.state[1] += b;\n    this.state[2] += c;\n    this.state[3] += d;\n  }\n\n  static hash() {\n    return new MD5();\n  }\n\n  static hmac() {\n    return new HMAC(MD5, 64);\n  }\n\n  static digest(data) {\n    return MD5.ctx.init().update(data).final();\n  }\n\n  static root(left, right) {\n    assert(Buffer.isBuffer(left) && left.length === 16);\n    assert(Buffer.isBuffer(right) && right.length === 16);\n    return MD5.ctx.init().update(left).update(right).final();\n  }\n\n  static multi(x, y, z) {\n    const {\n      ctx\n    } = MD5;\n    ctx.init();\n    ctx.update(x);\n    ctx.update(y);\n    if (z) ctx.update(z);\n    return ctx.final();\n  }\n\n  static mac(data, key) {\n    return MD5.hmac().init(key).update(data).final();\n  }\n\n}\n/*\n * Static\n */\n\n\nMD5.native = 0;\nMD5.id = 'MD5';\nMD5.size = 16;\nMD5.bits = 128;\nMD5.blockSize = 64;\nMD5.zero = Buffer.alloc(16, 0x00);\nMD5.ctx = new MD5();\n/*\n * Helpers\n */\n\nfunction rotl32(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nfunction readU32(data, off) {\n  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;\n}\n\nfunction writeU32(dst, num, off) {\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  return off;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = MD5;","map":null,"metadata":{},"sourceType":"script"}