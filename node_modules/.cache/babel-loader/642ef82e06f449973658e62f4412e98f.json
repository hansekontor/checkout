{"ast":null,"code":"/*!\n * rsaies.js - rsaies for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n'use strict';\n\nconst assert = require('./internal/assert');\n\nconst rsa = require('./rsa');\n\nconst random = require('./random');\n\nconst box = require('./secretbox');\n/*\n * RSAIES\n */\n\n\nfunction encrypt(hash, msg, pub) {\n  let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  assert(hash && typeof hash.id === 'string');\n  assert(Buffer.isBuffer(msg));\n  const key = random.randomBytes(32);\n  let ct = rsa.encryptOAEP(hash, key, pub, label);\n  if (size != null) ct = rsa.veil(ct, size, pub);\n  const nonce = random.randomBytes(24);\n  const sealed = box.seal(msg, key, nonce);\n  return Buffer.concat([ct, nonce, sealed]);\n}\n\nfunction decrypt(hash, msg, priv) {\n  let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  assert(hash && typeof hash.id === 'string');\n  assert(Buffer.isBuffer(msg));\n  assert(Buffer.isBuffer(priv));\n  if (size == null) size = rsa.privateKeyBits(priv);\n  assert(size >>> 0 === size);\n  const bytes = size + 7 >>> 3;\n  if (msg.length < bytes + 24) throw new Error('Invalid ciphertext.');\n  const pub = rsa.publicKeyCreate(priv);\n  const ct = rsa.unveil(msg.slice(0, bytes), size, pub);\n  const key = rsa.decryptOAEP(hash, ct, priv, label);\n  const nonce = msg.slice(bytes, bytes + 24);\n  const sealed = msg.slice(bytes + 24);\n  return box.open(sealed, key, nonce);\n}\n/*\n * Expose\n */\n\n\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}