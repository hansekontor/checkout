{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n\nvar DetectorResult_1 = require(\"../../common/DetectorResult\");\n\nvar GridSamplerInstance_1 = require(\"../../common/GridSamplerInstance\");\n\nvar PerspectiveTransform_1 = require(\"../../common/PerspectiveTransform\");\n\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\n\nvar Version_1 = require(\"../decoder/Version\");\n\nvar FinderPatternFinder_1 = require(\"./FinderPatternFinder\");\n\nvar AlignmentPatternFinder_1 = require(\"./AlignmentPatternFinder\");\n\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.Map;*/\n\n/**\r\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\r\n * is rotated or skewed, or partially obscured.</p>\r\n *\r\n * @author Sean Owen\r\n */\n\n\nvar Detector =\n/** @class */\nfunction () {\n  function Detector(image) {\n    this.image = image;\n  }\n\n  Detector.prototype.getImage = function () {\n    return this.image;\n  };\n\n  Detector.prototype.getResultPointCallback = function () {\n    return this.resultPointCallback;\n  };\n  /**\r\n   * <p>Detects a QR Code in an image.</p>\r\n   *\r\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\r\n   * @throws NotFoundException if QR Code cannot be found\r\n   * @throws FormatException if a QR Code cannot be decoded\r\n   */\n  // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n  //   return detect(null)\n  // }\n\n  /**\r\n   * <p>Detects a QR Code in an image.</p>\r\n   *\r\n   * @param hints optional hints to detector\r\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\r\n   * @throws NotFoundException if QR Code cannot be found\r\n   * @throws FormatException if a QR Code cannot be decoded\r\n   */\n\n\n  Detector.prototype.detect = function (hints) {\n    this.resultPointCallback = hints === null || hints === undefined ? null :\n    /*(ResultPointCallback) */\n    hints.get(9\n    /* NEED_RESULT_POINT_CALLBACK */\n    );\n    var finder = new FinderPatternFinder_1.default(this.image, this.resultPointCallback);\n    var info = finder.find(hints);\n    return this.processFinderPatternInfo(info);\n  };\n\n  Detector.prototype.processFinderPatternInfo = function (info) {\n    var topLeft = info.getTopLeft();\n    var topRight = info.getTopRight();\n    var bottomLeft = info.getBottomLeft();\n    var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n\n    if (moduleSize < 1.0) {\n      throw new NotFoundException_1.default('No pattern found in proccess finder.');\n    }\n\n    var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n    var provisionalVersion = Version_1.default.getProvisionalVersionForDimension(dimension);\n    var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n    var alignmentPattern = null; // Anything above version 1 has an alignment pattern\n\n    if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n      // Guess where a \"bottom right\" finder pattern would have been\n      var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY(); // Estimate that alignment pattern is closer by 3 modules\n      // from \"bottom right\" to known top left location\n\n      var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n      var estAlignmentX =\n      /*(int) */\n      Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n      var estAlignmentY =\n      /*(int) */\n      Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY())); // Kind of arbitrary -- expand search radius before giving up\n\n      for (var i = 4; i <= 16; i <<= 1) {\n        try {\n          alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n          break;\n        } catch (re\n        /*NotFoundException*/\n        ) {\n          if (!(re instanceof NotFoundException_1.default)) {\n            throw re;\n          } // try next round\n\n        }\n      } // If we didn't find alignment pattern... well try anyway without it\n\n    }\n\n    var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n    var bits = Detector.sampleGrid(this.image, transform, dimension);\n    var points;\n\n    if (alignmentPattern === null) {\n      points = [bottomLeft, topLeft, topRight];\n    } else {\n      points = [bottomLeft, topLeft, topRight, alignmentPattern];\n    }\n\n    return new DetectorResult_1.default(bits, points);\n  };\n\n  Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension\n  /*int*/\n  ) {\n    var dimMinusThree = dimension - 3.5;\n    var bottomRightX;\n    /*float*/\n\n    var bottomRightY;\n    /*float*/\n\n    var sourceBottomRightX;\n    /*float*/\n\n    var sourceBottomRightY;\n    /*float*/\n\n    if (alignmentPattern !== null) {\n      bottomRightX = alignmentPattern.getX();\n      bottomRightY = alignmentPattern.getY();\n      sourceBottomRightX = dimMinusThree - 3.0;\n      sourceBottomRightY = sourceBottomRightX;\n    } else {\n      // Don't have an alignment pattern, just make up the bottom-right point\n      bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      sourceBottomRightX = dimMinusThree;\n      sourceBottomRightY = dimMinusThree;\n    }\n\n    return PerspectiveTransform_1.default.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n  };\n\n  Detector.sampleGrid = function (image, transform, dimension\n  /*int*/\n  ) {\n    var sampler = GridSamplerInstance_1.default.getInstance();\n    return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n  };\n  /**\r\n   * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\r\n   * of the finder patterns and estimated module size.</p>\r\n   */\n\n\n  Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize\n  /*float*/\n  ) {\n    var tltrCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, topRight) / moduleSize);\n    var tlblCentersDimension = MathUtils_1.default.round(ResultPoint_1.default.distance(topLeft, bottomLeft) / moduleSize);\n    var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n\n    switch (dimension & 0x03) {\n      // mod 4\n      case 0:\n        dimension++;\n        break;\n      // 1? do nothing\n\n      case 2:\n        dimension--;\n        break;\n\n      case 3:\n        throw new NotFoundException_1.default('Dimensions could be not found.');\n    }\n\n    return dimension;\n  };\n  /**\r\n   * <p>Computes an average estimated module size based on estimated derived from the positions\r\n   * of the three finder patterns.</p>\r\n   *\r\n   * @param topLeft detected top-left finder pattern center\r\n   * @param topRight detected top-right finder pattern center\r\n   * @param bottomLeft detected bottom-left finder pattern center\r\n   * @return estimated module size\r\n   */\n\n\n  Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n    // Take the average\n    return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n  };\n  /**\r\n   * <p>Estimates module size based on two finder patterns -- it uses\r\n   * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\r\n   * width of each, measuring along the axis between their centers.</p>\r\n   */\n\n\n  Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n    var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(\n    /*(int) */\n    Math.floor(pattern.getX()),\n    /*(int) */\n    Math.floor(pattern.getY()),\n    /*(int) */\n    Math.floor(otherPattern.getX()),\n    /*(int) */\n    Math.floor(otherPattern.getY()));\n    var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(\n    /*(int) */\n    Math.floor(otherPattern.getX()),\n    /*(int) */\n    Math.floor(otherPattern.getY()),\n    /*(int) */\n    Math.floor(pattern.getX()),\n    /*(int) */\n    Math.floor(pattern.getY()));\n\n    if (isNaN(moduleSizeEst1)) {\n      return moduleSizeEst2 / 7.0;\n    }\n\n    if (isNaN(moduleSizeEst2)) {\n      return moduleSizeEst1 / 7.0;\n    } // Average them, and divide by 7 since we've counted the width of 3 black modules,\n    // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n\n\n    return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n  };\n  /**\r\n   * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\r\n   * a finder pattern by looking for a black-white-black run from the center in the direction\r\n   * of another point (another finder pattern center), and in the opposite direction too.\r\n   */\n\n\n  Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX\n  /*int*/\n  , fromY\n  /*int*/\n  , toX\n  /*int*/\n  , toY\n  /*int*/\n  ) {\n    var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY); // Now count other way -- don't run off image though of course\n\n    var scale = 1.0;\n    var otherToX = fromX - (toX - fromX);\n\n    if (otherToX < 0) {\n      scale = fromX / (\n      /*(float) */\n      fromX - otherToX);\n      otherToX = 0;\n    } else if (otherToX >= this.image.getWidth()) {\n      scale = (this.image.getWidth() - 1 - fromX) / (\n      /*(float) */\n      otherToX - fromX);\n      otherToX = this.image.getWidth() - 1;\n    }\n\n    var otherToY =\n    /*(int) */\n    Math.floor(fromY - (toY - fromY) * scale);\n    scale = 1.0;\n\n    if (otherToY < 0) {\n      scale = fromY / (\n      /*(float) */\n      fromY - otherToY);\n      otherToY = 0;\n    } else if (otherToY >= this.image.getHeight()) {\n      scale = (this.image.getHeight() - 1 - fromY) / (\n      /*(float) */\n      otherToY - fromY);\n      otherToY = this.image.getHeight() - 1;\n    }\n\n    otherToX =\n    /*(int) */\n    Math.floor(fromX + (otherToX - fromX) * scale);\n    result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY); // Middle pixel is double-counted this way; subtract 1\n\n    return result - 1.0;\n  };\n  /**\r\n   * <p>This method traces a line from a point in the image, in the direction towards another point.\r\n   * It begins in a black region, and keeps going until it finds white, then black, then white again.\r\n   * It reports the distance from the start to this point.</p>\r\n   *\r\n   * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\r\n   * may be skewed or rotated.</p>\r\n   */\n\n\n  Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX\n  /*int*/\n  , fromY\n  /*int*/\n  , toX\n  /*int*/\n  , toY\n  /*int*/\n  ) {\n    // Mild variant of Bresenham's algorithm\n    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n\n    if (steep) {\n      var temp = fromX;\n      fromX = fromY;\n      fromY = temp;\n      temp = toX;\n      toX = toY;\n      toY = temp;\n    }\n\n    var dx = Math.abs(toX - fromX);\n    var dy = Math.abs(toY - fromY);\n    var error = -dx / 2;\n    var xstep = fromX < toX ? 1 : -1;\n    var ystep = fromY < toY ? 1 : -1; // In black pixels, looking for white, first or second time.\n\n    var state = 0; // Loop up until x == toX, but not beyond\n\n    var xLimit = toX + xstep;\n\n    for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n      var realX = steep ? y : x;\n      var realY = steep ? x : y; // Does current pixel mean we have moved white to black or vice versa?\n      // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n      // color, advance to next state or end if we are in state 2 already\n\n      if (state === 1 === this.image.get(realX, realY)) {\n        if (state === 2) {\n          return MathUtils_1.default.distance(x, y, fromX, fromY);\n        }\n\n        state++;\n      }\n\n      error += dy;\n\n      if (error > 0) {\n        if (y === toY) {\n          break;\n        }\n\n        y += ystep;\n        error -= dx;\n      }\n    } // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n    // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n    // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n\n\n    if (state === 2) {\n      return MathUtils_1.default.distance(toX + xstep, toY, fromX, fromY);\n    } // else we didn't find even black-white-black; no estimate is really possible\n\n\n    return NaN;\n  };\n  /**\r\n   * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\r\n   * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\r\n   *\r\n   * @param overallEstModuleSize estimated module size so far\r\n   * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\r\n   * @param estAlignmentY y coordinate of above\r\n   * @param allowanceFactor number of pixels in all directions to search from the center\r\n   * @return {@link AlignmentPattern} if found, or null otherwise\r\n   * @throws NotFoundException if an unexpected error occurs during detection\r\n   */\n\n\n  Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize\n  /*float*/\n  , estAlignmentX\n  /*int*/\n  , estAlignmentY\n  /*int*/\n  , allowanceFactor\n  /*float*/\n  ) {\n    // Look for an alignment pattern (3 modules in size) around where it\n    // should be\n    var allowance =\n    /*(int) */\n    Math.floor(allowanceFactor * overallEstModuleSize);\n    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n    var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n\n    if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n      throw new NotFoundException_1.default('Alignment top exceeds estimated module size.');\n    }\n\n    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n    var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n\n    if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n      throw new NotFoundException_1.default('Alignment bottom exceeds estimated module size.');\n    }\n\n    var alignmentFinder = new AlignmentPatternFinder_1.default(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n    return alignmentFinder.find();\n  };\n\n  return Detector;\n}();\n\nexports.default = Detector;","map":null,"metadata":{},"sourceType":"script"}