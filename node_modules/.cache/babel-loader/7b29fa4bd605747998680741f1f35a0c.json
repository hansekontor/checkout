{"ast":null,"code":"/*!\n * openssl.js - openssl-specific encoding for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://www.openssl.org/docs/man1.1.0/apps/dsa.html\n *   https://superuser.com/questions/478966/dsa-private-key-format\n *   https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/PublicKey/DSA.py\n *   https://github.com/openssl/openssl/blob/master/crypto/dsa/dsa_asn1.c\n */\n'use strict';\n\nconst asn1 = require('./asn1');\n\nconst pem = require('./pem');\n/**\n * DSAParams\n */\n// DSSParams_OpenSSL ::= SEQUENCE {\n//   p INTEGER,\n//   q INTEGER,\n//   g INTEGER\n// }\n\n\nclass DSAParams extends asn1.Sequence {\n  constructor(p, q, g) {\n    super();\n    this.p = new asn1.Unsigned(p);\n    this.q = new asn1.Unsigned(q);\n    this.g = new asn1.Unsigned(g);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.p.getSize();\n    size += this.q.getSize();\n    size += this.g.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.p.write(bw);\n    this.q.write(bw);\n    this.g.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.p.read(br);\n    this.q.read(br);\n    this.g.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.p.clean() && this.q.clean() && this.g.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA PARAMETERS');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA PARAMETERS');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      p: this.p,\n      q: this.q,\n      g: this.g\n    };\n  }\n\n}\n/**\n * DSAPublicKey\n */\n// DSSPublicKey_OpenSSL ::= SEQUENCE {\n//   y INTEGER,\n//   p INTEGER,\n//   q INTEGER,\n//   g INTEGER\n// }\n\n\nclass DSAPublicKey extends asn1.Sequence {\n  constructor(y, p, q, g) {\n    super();\n    this.y = new asn1.Unsigned(y);\n    this.p = new asn1.Unsigned(p);\n    this.q = new asn1.Unsigned(q);\n    this.g = new asn1.Unsigned(g);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.y.getSize();\n    size += this.p.getSize();\n    size += this.q.getSize();\n    size += this.g.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.y.write(bw);\n    this.p.write(bw);\n    this.q.write(bw);\n    this.g.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.y.read(br);\n    this.p.read(br);\n    this.q.read(br);\n    this.g.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.y.clean() && this.p.clean() && this.q.clean() && this.g.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA PUBLIC KEY');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA PUBLIC KEY');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      y: this.y,\n      p: this.p,\n      q: this.q,\n      g: this.g\n    };\n  }\n\n}\n/**\n * DSAPrivateKey\n */\n// DSSPrivatKey_OpenSSL ::= SEQUENCE {\n//   version INTEGER,\n//   p INTEGER,\n//   q INTEGER,\n//   g INTEGER,\n//   y INTEGER,\n//   x INTEGER\n// }\n\n\nclass DSAPrivateKey extends asn1.Sequence {\n  constructor(version, p, q, g, y, x) {\n    super();\n    this.version = new asn1.Unsigned(version);\n    this.p = new asn1.Unsigned(p);\n    this.q = new asn1.Unsigned(q);\n    this.g = new asn1.Unsigned(g);\n    this.y = new asn1.Unsigned(y);\n    this.x = new asn1.Unsigned(x);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.version.getSize();\n    size += this.p.getSize();\n    size += this.q.getSize();\n    size += this.g.getSize();\n    size += this.y.getSize();\n    size += this.x.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.version.write(bw);\n    this.p.write(bw);\n    this.q.write(bw);\n    this.g.write(bw);\n    this.y.write(bw);\n    this.x.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.version.read(br);\n    this.p.read(br);\n    this.q.read(br);\n    this.g.read(br);\n    this.y.read(br);\n    this.x.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.p.clean() && this.q.clean() && this.g.clean() && this.y.clean() && this.x.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA PRIVATE KEY');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA PRIVATE KEY');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      version: this.version,\n      p: this.p,\n      q: this.q,\n      g: this.g,\n      y: this.y,\n      x: this.x\n    };\n  }\n\n}\n/*\n * Expose\n */\n\n\nexports.DSAParams = DSAParams;\nexports.DSAPublicKey = DSAPublicKey;\nexports.DSAPrivateKey = DSAPrivateKey;","map":null,"metadata":{},"sourceType":"script"}