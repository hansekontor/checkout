{"ast":null,"code":"var _jsxFileName = \"/home/henrik/Documents/dev/checkoutmin/src/components/Send/Checkout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { WalletContext } from '@utils/context';\nimport { Form, Modal, Spin } from 'antd';\nimport { CashLoadingIcon } from '@components/Common/CustomIcons';\nimport PrimaryButton from '@components/Common/PrimaryButton';\nimport useBCH from '@hooks/useBCH';\nimport { sendXecNotification, sendTokenNotification, selfMintTokenNotification, errorNotification } from '@components/Common/Notifications';\nimport { currency } from '@components/Common/Ticker.js';\nimport { Event } from '@utils/GoogleAnalytics';\nimport { fiatToCrypto } from '@utils/validation';\nimport { getWalletState, fromSmallestDenomination } from '@utils/cashMethods';\nimport ApiError from '@components/Common/ApiError';\nimport PropsError from '@components/Common/PropsError';\nimport { formatFiatBalance } from '@utils/validation';\nimport cashaddr from 'ecashaddrjs';\nimport { getPaymentRequest } from '../../utils/bip70';\nimport Script from '@utils/bcash/script/script';\nimport SLP from '@utils/bcash/script/slp.js';\nimport { U64 } from 'n64';\nimport CheckOutIcon from \"@assets/checkout_icon.svg\";\nimport { CheckoutHeader, CheckoutStyles, PaymentDetails, PurchaseAuthCode, Heading, ListItem, CheckoutIcon, HorizontalSpacer, AgreeOverlay, AgreeModal } from \"../../assets/styles/checkout.styles\";\n\nfunction getBip70Url() {\n  const url = \"https://bip70.cert.cash\";\n  return url;\n}\n\nconst Checkout = _ref => {\n  var _formData$token2, _formData$token3, _prInfoFromUrl$paymen, _prInfoFromUrl$paymen2;\n\n  let {\n    paymentUrl,\n    paymentRequest,\n    passLoadingStatus,\n    onSuccess,\n    onCancel\n  } = _ref;\n  // use balance parameters from wallet.state object and not legacy balances parameter from walletState, if user has migrated wallet\n  // this handles edge case of user with old wallet who has not opened latest Cashtab version yet\n  // If the wallet object from ContextValue has a `state key`, then check which keys are in the wallet object\n  // Else set it as blank\n  const isPaymentUrl = paymentUrl.length === 31 && paymentUrl.startsWith(\"https://pay.badger.cash/i/\");\n  const isPaymentRequest = 'customer_id' in paymentRequest // url trumps new request\n  && 'amount' in paymentRequest && !isPaymentUrl;\n  const propsError = !isPaymentUrl && !isPaymentRequest;\n\n  if (propsError) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PropsError, {\n      msg: \"Invalid payment request properties\",\n      onCancel: onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  console.log(\"isPaymentUrl\", isPaymentUrl, \"isPaymentRequest\", isPaymentRequest, \"isPropsError\", propsError);\n  const ContextValue = React.useContext(WalletContext);\n  const location = useLocation();\n  const {\n    wallet,\n    forceWalletUpdate,\n    fiatPrice,\n    apiError,\n    cashtabSettings\n  } = ContextValue;\n  const walletState = getWalletState(wallet);\n  const {\n    tokens,\n    balances\n  } = walletState; // Modal settings\n\n  const purchaseTokenIds = ['7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5', '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1'];\n  const blankFormData = {\n    dirty: true,\n    value: '',\n    address: ''\n  };\n  const [formData, setFormData] = useState(blankFormData);\n  let tokenFormattedBalance;\n\n  if (formData.token) {\n    const token = tokens.find(token => token.tokenId === formData.token.tokenId);\n\n    if (token) {\n      const tokenBalance = token.balance.toString();\n      tokenFormattedBalance = (tokenBalance / 10 ** token.info.decimals).toString();\n    } else {\n      tokenFormattedBalance = '0';\n    }\n  }\n\n  const [sendBchAddressError, setSendBchAddressError] = useState(false);\n  const [sendBchAmountError, setSendBchAmountError] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(currency.ticker); // Support cashtab button from web pages\n\n  const [prInfoFromUrl, setPrInfoFromUrl] = useState(false); // Show a confirmation modal on transactions created by populating form from web page button\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const [hasAgreed, setHasAgreed] = useState(false);\n  const [tokensMinted, setTokensMinted] = useState(false);\n  const [tokensSent, setTokensSent] = useState(false);\n  const [purchaseTokenAmount, setPurchaseTokenAmount] = useState(0); // Postage Protocol Check (for BURN)\n\n  const [postageData, setPostageData] = useState(null);\n  const [usePostage, setUsePostage] = useState(false);\n  const prefixesArray = [...currency.prefixes, ...currency.tokenPrefixes];\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    // setIsModalVisible(false);\n    setIsSending(true);\n    send();\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const history = useHistory();\n  const {\n    getBcashRestUrl,\n    sendBip70,\n    sendSelfMint,\n    getPostage\n  } = useBCH(); // If the balance has changed, unlock the UI\n  // This is redundant, if backend has refreshed in 1.75s timeout below, UI will already be unlocked\n\n  useEffect(() => {\n    passLoadingStatus(false);\n    console.log(\"useEffect passLoadingStatus false\");\n  }, [balances.totalBalance]);\n  useEffect(() => {\n    // Check to see if purchase modal should be shown\n    if (formData.token) {\n      var _formData$token;\n\n      const difference = (Number(tokenFormattedBalance) - Number(formData.value)).toFixed(formData.token.decimals);\n\n      if (purchaseTokenIds.includes((_formData$token = formData.token) === null || _formData$token === void 0 ? void 0 : _formData$token.tokenId)) {\n        // Set amount to purchase\n        let purchaseAmount = difference < 0 ? Math.abs(difference) : 0;\n\n        if (purchaseAmount > 0) {\n          const rounded = Math.ceil(purchaseAmount * 100) / 100;\n          purchaseAmount = rounded < 1 ? 1 : rounded;\n        }\n\n        setPurchaseTokenAmount(purchaseAmount);\n        console.log(\"useEffect setPurchaseTokenAmount\", purchaseAmount);\n      }\n    }\n  }, [tokenFormattedBalance]);\n  useEffect(async () => {\n    // if (!wallet.Path1899)\n    // return history.push('/wallet');\n    passLoadingStatus(true);\n    const prInfo = {};\n\n    if (isPaymentRequest) {\n      const allowedParameters = [\"invoice\", \"order_key\", \"amount\", \"offer_name\", \"offer_description\", \"success_url\", \"cancel_url\", \"ipn_url\", \"customer_id\", \"cert_hash\", \"merchant_name\"];\n      const prQuery = Object.keys(paymentRequest).filter(key => allowedParameters.includes(key)).reduce((obj, key) => {\n        obj[key] = paymentRequest[key];\n        return obj;\n      }, {});\n      if (paymentRequest.customer_id) // api currently only takes certificates\n        prQuery.cert_hash = prQuery.customer_id;\n      prQuery.return_json = true;\n      console.log(\"prQuery\", prQuery);\n      const data = await fetch(\"https://relay2.cmpct.org/v2?\" + new URLSearchParams(prQuery)).then(res => res.json());\n      console.log(\"fetch data\", data);\n      prInfo.url = data.paymentUrl;\n      prInfo.type = data.currency;\n    } else {\n      prInfo.url = paymentUrl;\n      prInfo.type = \"etoken\"; // parametrize?\n    }\n\n    console.log(`prInfo from page params`, prInfo);\n\n    if (prInfo.url && prInfo.type) {\n      try {\n        prInfo.paymentDetails = (await getPaymentRequest(prInfo.url, prInfo.type)).paymentDetails;\n        prInfo.paymentDetails.merchantDataJson = JSON.parse(prInfo.paymentDetails.merchantData.toString());\n      } catch (err) {\n        errorNotification(err, 'Failed to fetch invoice. May be expired or invalid', `Fetching invoice: ${prInfo.url}`);\n        await sleep(3000); // Manually disable loading\n\n        passLoadingStatus(false); // window.history.replaceState(null, '', window.location.origin);\n        // return history.push(`/wallet`);\n      }\n    } else {\n      passLoadingStatus(false); // return history.push('/wallet');\n    }\n\n    setPrInfoFromUrl(prInfo);\n    prInfo.paymentDetails.type = prInfo.type;\n    await populateFormsFromPaymentDetails(prInfo.paymentDetails);\n    passLoadingStatus(false);\n  }, []);\n\n  async function populateFormsFromPaymentDetails(paymentDetails) {\n    if (!paymentDetails) return;\n    const txInfo = {}; // Define postage object in case of BURN\n\n    let postageObj; // Begin parsing BIP70 Payment Request\n\n    if (paymentDetails.type === 'ecash') {\n      const address = Script.fromRaw(Buffer.from(paymentDetails.outputs[0].script)).getAddress().toString();\n      const totalSats = paymentDetails.outputs.reduce((total, output) => {\n        return total + output.value;\n      }, 0);\n      txInfo.address = address;\n      txInfo.value = fromSmallestDenomination(totalSats);\n    } else if (paymentDetails.type === 'etoken') {\n      const slpScript = SLP.fromRaw(Buffer.from(paymentDetails.outputs[0].script)); // Be sure it is valid SLP transaction\n\n      if (slpScript.isValidSlp()) {\n        const tokenIdBuf = slpScript.getData(4); // Handle SEND and BURN\n\n        let tokenAddress;\n        let sendRecords;\n\n        if (slpScript.getType() === 'SEND') {\n          const cashAddress = Script.fromRaw(Buffer.from(paymentDetails.outputs[1].script)).getAddress().toString();\n          const decodedAddress = cashaddr.decode(cashAddress);\n          tokenAddress = cashaddr.encode('etoken', decodedAddress.type, decodedAddress.hash);\n          sendRecords = slpScript.getRecords(tokenIdBuf);\n        } else if (slpScript.getType() === 'BURN') {\n          tokenAddress = '**BURN**';\n          sendRecords = [{\n            value: slpScript.getData(5)\n          }]; // Get postage info\n\n          postageObj = await getPostage(tokenIdBuf.toString('hex'));\n        } else {\n          throw new Error(`Unsupported SLP transaction type: ${slpScript.getType()}`);\n        } // Compute total amount to send\n\n\n        const totalBase = sendRecords.reduce((total, record) => {\n          return total.add(U64.fromBE(Buffer.from(record.value)));\n        }, U64.fromInt(0));\n        console.log('totalBase', totalBase);\n        const tokenInfo = await fetch(`${getBcashRestUrl()}/token/${tokenIdBuf.toString('hex')}`).then(res => res.json());\n        txInfo.address = tokenAddress;\n        const tokenValue = totalBase.toInt() / 10 ** tokenInfo.decimals;\n        txInfo.value = `${tokenValue}`;\n        txInfo.token = tokenInfo;\n      }\n    }\n\n    setFormData(txInfo);\n\n    if (postageObj) {\n      setPostageData(postageObj);\n      setUsePostage(true);\n    }\n  }\n\n  function handleSendXecError(errorObj, ticker) {\n    // Set loading to false here as well, as balance may not change depending on where error occured in try loop\n    passLoadingStatus(false);\n    let message;\n\n    if (!errorObj.error && !errorObj.message) {\n      message = `Transaction failed: no response from ${getBcashRestUrl()}.`;\n    } else if (/Could not communicate with full node or other external service/.test(errorObj.error)) {\n      message = 'Could not communicate with API. Please try again.';\n    } else if (errorObj.error && errorObj.error.includes('too-long-mempool-chain, too many unconfirmed ancestors [limit: 50] (code 64)')) {\n      message = `The ${currency.ticker} you are trying to send has too many unconfirmed ancestors to send (limit 50). Sending will be possible after a block confirmation. Try again in about 10 minutes.`;\n    } else {\n      message = errorObj.message || errorObj.error || JSON.stringify(errorObj);\n    }\n\n    errorNotification(errorObj, message, `Sending ${ticker}`);\n  }\n\n  async function send(rawChainTxs, authCodeB64) {\n    let attempt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    setFormData({ ...formData,\n      dirty: false\n    });\n    const {\n      paymentDetails,\n      type\n    } = prInfoFromUrl; // ensure prInfo exists\n\n    if (!paymentDetails) {\n      return;\n    } // Event(\"Category\", \"Action\", \"Label\")\n    // Track number of XEC BIP70 transactions\n\n\n    Event('SendBip70.js', 'SendBip70', type);\n    passLoadingStatus(\"Please wait while your transaction is broadcast\");\n\n    try {\n      // Send transaction\n      const link = await sendBip70(wallet, paymentDetails, currency.defaultFee, false, // testOnly\n      false, // isPreburn\n      rawChainTxs);\n      if (type == 'ecash') sendTokenNotification(link);else {\n        sendXecNotification(link);\n      } // Send to success page if included in merchantDetails\n\n      if (paymentDetails.merchantData) {\n        var _merchantDataJson$cal;\n\n        const merchantDataJson = JSON.parse(paymentDetails.merchantData.toString());\n\n        if ((_merchantDataJson$cal = merchantDataJson.callback) === null || _merchantDataJson$cal === void 0 ? void 0 : _merchantDataJson$cal.success_url) {\n          return window.location.assign(merchantDataJson.callback.success_url);\n        }\n      }\n\n      setTokensSent(true);\n      onSuccess(link); // If doing a chain, force full wallet update\n      // UTXOs may not change (ie. in a mint chain)\n\n      if (rawChainTxs) await forceWalletUpdate(true);else await sleep(3000); // Manually disable loading\n\n      passLoadingStatus(false); // Return to main wallet screen\n      // window.history.replaceState(null, '', window.location.origin);\n      // return history.push(`/wallet`);\n    } catch (e) {\n      console.error(e); // Retry send if response is 402 or 404 (mitigates stamp/baton race conditions)\n\n      if ((e.cause.code === 402 || e.cause.code === 404) && attempt < 3) {\n        const nextAttempt = attempt + 1;\n        passLoadingStatus(`Payment unsuccessful. Retrying... (${nextAttempt}/3)`);\n        await sleep(5000);\n        if (authCodeB64) return doSelfMint(authCodeB64, nextAttempt);else return send(null, null, nextAttempt);\n      } else {\n        const ticker = type == 'etoken' ? currency.tokenTicker : currency.ticker;\n        handleSendXecError(e, ticker);\n        onCancel(true);\n      }\n    } // Clear the address field\n\n\n    setFormData(blankFormData); // Manually disable loading\n\n    passLoadingStatus(false);\n  }\n\n  const doSelfMint = async function (authCodeB64) {\n    let attempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    setFormData({ ...formData,\n      dirty: false\n    }); // ensure prInfo exists\n\n    if (!authCodeB64) {\n      return;\n    } // TODO: Handle many different tokens\n\n\n    const tokenId = Buffer.from(formData.token.tokenId, 'hex'); // Event(\"Category\", \"Action\", \"Label\")\n    // Track number of XEC BIP70 transactions\n\n    Event('SelfMint.js', 'SelfMint', authCodeB64);\n    passLoadingStatus(\"Please wait while your tokens are minted\"); //const doChainedMint = Number(tokenFormattedBalance) === 0;\n    // default to always doing a chained mint here, don't show SEND button\n\n    const doChainedMint = true;\n\n    try {\n      // Send transaction\n      const rawMintTx = await sendSelfMint(wallet, tokenId, authCodeB64, false, // testOnly\n      doChainedMint);\n      setTokensMinted(true);\n      if (doChainedMint) return send([rawMintTx], authCodeB64, attempt);\n      selfMintTokenNotification(); // Sleep for 10 seconds and then \n      // await sleep(10000);\n\n      forceWalletUpdate(); // Manually disable loading\n\n      return passLoadingStatus(true); // return window.location.reload();\n    } catch (e) {\n      handleSendXecError(e, authCodeB64);\n    }\n  };\n\n  const checkSufficientFunds = () => {\n    if (formData.token) {\n      return Number(tokenFormattedBalance) >= Number(formData.value);\n    } else if (formData) {\n      return Number(balances.totalBalance) > Number(formData.value);\n    }\n\n    return false;\n  }; // Display price in USD below input field for send amount, if it can be calculated\n\n\n  let fiatPriceString = '';\n\n  if (fiatPrice !== null && !isNaN(formData.value)) {\n    if (selectedCurrency === currency.ticker) {\n      // calculate conversion to fiatPrice\n      fiatPriceString = `${(fiatPrice * Number(formData.value)).toFixed(2)}`; // formats to fiat locale style\n\n      fiatPriceString = formatFiatBalance(Number(fiatPriceString)); // insert symbol and currency before/after the locale formatted fiat balance\n\n      fiatPriceString = `${cashtabSettings ? `${currency.fiatCurrencies[cashtabSettings.fiatCurrency].symbol} ` : '$ '} ${fiatPriceString} ${cashtabSettings && cashtabSettings.fiatCurrency ? cashtabSettings.fiatCurrency.toUpperCase() : 'USD'}`;\n    } else {\n      fiatPriceString = `${formData.value ? formatFiatBalance(Number(fiatToCrypto(formData.value, fiatPrice))) : formatFiatBalance(0)} ${currency.ticker}`;\n    }\n  }\n\n  const feeAmount = (.50 + purchaseTokenAmount * .06).toFixed(2); // Add 50 cent fixed fee to 6% percentage\n\n  const totalAmount = (Number(purchaseTokenAmount) + Number(feeAmount)).toFixed(2);\n  const isSandbox = ((_formData$token2 = formData.token) === null || _formData$token2 === void 0 ? void 0 : _formData$token2.tokenId) === '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1';\n\n  const PayPalSection = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PayPalScriptProvider, {\n      options: {\n        \"client-id\": isSandbox ? \"AeFEAYVCMcWrjMQySDAJ_9K4AHvcYFA_-q9PF-axkNNU_sldsbZDCYuU8aTsNYgzPu4qNGB0IqCN1cbQ\" : \"ATPjCoOQT8kYOAzUUwehyvrA7D4nyvkfyZgmSMiR5_YOe9G2UomchTEQJzdzj2QGiUXOxfYCpK17izz7\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PayPalButtons, {\n      style: {\n        layout: \"vertical\"\n      },\n      forceReRender: [purchaseTokenAmount],\n      createOrder: (data, actions) => {\n        console.log(\"purchaseAmount\", purchaseTokenAmount);\n        return actions.order.create({\n          purchase_units: [{\n            reference_id: `${wallet.Path1899.slpAddress}-${purchaseTokenAmount}`,\n            description: `Self-Mint Auth Code (${purchaseTokenAmount} BUX Tokens)`,\n            custom_id: location.href,\n            amount: {\n              currency_code: \"USD\",\n              value: totalAmount.toString(),\n              breakdown: {\n                item_total: {\n                  currency_code: \"USD\",\n                  value: totalAmount.toString()\n                }\n              }\n            },\n            items: [{\n              name: \"Auth Code\",\n              description: `Self-Mint Auth Code (${purchaseTokenAmount} BUX Tokens)`,\n              unit_amount: {\n                currency_code: \"USD\",\n                value: totalAmount.toString()\n              },\n              quantity: \"1\"\n            }]\n          }],\n          application_context: {\n            shipping_preference: 'NO_SHIPPING'\n          }\n        }).then(orderId => {\n          // Your code here after create the order\n          return orderId;\n        });\n      },\n      onApprove: (data, actions) => {\n        return actions.order.capture().then(function (details) {\n          // Your code here after capture the order\n          passLoadingStatus(true); // Call your server to save the transaction\n\n          fetch(`https://${isSandbox ? 'dev-api.' : ''}bux.digital/v1/success?paymentId=${details.id}`, {\n            method: 'get',\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => {\n            return response.json();\n          }).then(data => {\n            doSelfMint(data.authcode);\n          });\n        });\n      },\n      onError: err => {\n        console.log(err);\n        const {\n          type\n        } = prInfoFromUrl;\n        const ticker = type == 'etoken' ? currency.tokenTicker : currency.ticker;\n        handleSendXecError(err, ticker);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 21\n      }\n    })));\n  };\n\n  const priceApiError = fiatPrice === null && selectedCurrency !== 'XEC';\n  const displayBalance = tokenFormattedBalance || balances.totalBalance;\n  const displayTicker = ((_formData$token3 = formData.token) === null || _formData$token3 === void 0 ? void 0 : _formData$token3.ticker) || currency.ticker;\n  const {\n    invoice,\n    merchant_name,\n    offer_description,\n    offer_name\n  } = ((_prInfoFromUrl$paymen = prInfoFromUrl.paymentDetails) === null || _prInfoFromUrl$paymen === void 0 ? void 0 : (_prInfoFromUrl$paymen2 = _prInfoFromUrl$paymen.merchantDataJson) === null || _prInfoFromUrl$paymen2 === void 0 ? void 0 : _prInfoFromUrl$paymen2.ipn_body) || {};\n  const isStage1 = !checkSufficientFunds() || apiError || sendBchAmountError || sendBchAddressError || !prInfoFromUrl; // For making SEND button available\n\n  if (!isStage1) {\n    passLoadingStatus(false);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    title: \"Confirm Send\",\n    visible: isModalVisible,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 17\n    }\n  }, \"Are you sure you want to send \", formData.value, ' ', displayTicker, \" to settle this payment request?\")), /*#__PURE__*/React.createElement(CheckoutHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CheckoutIcon, {\n    src: CheckOutIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 21\n    }\n  }, \"CHECKOUT\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 21\n    }\n  }), offer_name && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 29\n    }\n  }, offer_name))), /*#__PURE__*/React.createElement(CheckoutStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(PaymentDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 6\n    }\n  }, \"Payment Request Details:\"), offer_description && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"offer-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 29\n    }\n  }, offer_description), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"merchant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 29\n    }\n  }, \"From \", merchant_name)) || prInfoFromUrl && prInfoFromUrl.paymentDetails && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"offer-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 29\n    }\n  }, prInfoFromUrl.paymentDetails.memo))), /*#__PURE__*/React.createElement(HorizontalSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 5\n    }\n  }), isStage1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PurchaseAuthCode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }\n  }, !checkSufficientFunds() && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 36\n    }\n  }, \"You have insufficient funds in this wallet\"), /*#__PURE__*/React.createElement(ListItem, {\n    className: \"min-m\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 9\n    }\n  }, \"Purchase an Auth Code for\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value black bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 9\n    }\n  }, purchaseTokenAmount, \" \", displayTicker)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 8\n    }\n  }, \"In order to settle this payment request\")), /*#__PURE__*/React.createElement(HorizontalSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 7\n    }\n  }, \"Transaction Details:\"), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 8\n    }\n  }, \"Subtotal:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 8\n    }\n  }, \"$\", purchaseTokenAmount)), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 8\n    }\n  }, \"Fee:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 8\n    }\n  }, \"$\", feeAmount)), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key gray bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 8\n    }\n  }, \"Total:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value gray bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 8\n    }\n  }, \"$\", totalAmount))) || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PurchaseAuthCode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    className: \"min-m\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 9\n    }\n  }, \"Ready To Send\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value black bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 9\n    }\n  }, formData.value, \" \", displayTicker)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 8\n    }\n  }, \"In order to settle this payment request\"))), /*#__PURE__*/React.createElement(HorizontalSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 5\n    }\n  }), merchant_name && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 29\n    }\n  }, \"Merchant:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 29\n    }\n  }, merchant_name))), invoice && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 29\n    }\n  }, \"Invoice:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"value gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 29\n    }\n  }, invoice))), (merchant_name || invoice) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HorizontalSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 17\n    }\n  }, isStage1 ? /*#__PURE__*/React.createElement(React.Fragment, null, hasAgreed && /*#__PURE__*/React.createElement(React.Fragment, null, !tokensMinted ? /*#__PURE__*/React.createElement(React.Fragment, null, prInfoFromUrl.url && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 45\n    }\n  }, \"Use existing Tokens?\", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: prInfoFromUrl.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 49\n    }\n  }, \" Open in Wallet\"))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 37\n    }\n  }, \"By making this purchase you agree to the\", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://bux.digital/tos.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 795,\n      columnNumber: 41\n    }\n  }, \" Terms Of Service\")), /*#__PURE__*/React.createElement(PayPalSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 37\n    }\n  })) : /*#__PURE__*/React.createElement(Spin, {\n    spinning: true,\n    indicator: CashLoadingIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 35\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, isSending || tokensSent ? /*#__PURE__*/React.createElement(Spin, {\n    spinning: true,\n    indicator: CashLoadingIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 52\n    }\n  }) :\n  /*#__PURE__*/\n\n  /* <PrimaryButton onClick={() => handleOk()}>Send</PrimaryButton>*/\n  React.createElement(React.Fragment, null)), apiError && /*#__PURE__*/React.createElement(ApiError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 30\n    }\n  }), propsError && /*#__PURE__*/React.createElement(PropsError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 32\n    }\n  })), !hasAgreed && isStage1 && /*#__PURE__*/React.createElement(AgreeOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AgreeModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 25\n    }\n  }, \"You are about to purchase a BUX Self-Mint Authorization Code\"), /*#__PURE__*/React.createElement(HorizontalSpacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"key black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 820,\n      columnNumber: 25\n    }\n  }, \"To proceed you must agree to the following:\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \" first\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 25\n    }\n  }, \"1. The seller of the digital good in this transaction is \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://bux.digital\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 104\n    }\n  }, \"Badger LLC\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 25\n    }\n  }, \"2. This purchase is for an authorization code ONLY. It is not a purchase of digital currency, credits on any third-party platform, or any other product or service\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 25\n    }\n  }, \"3. This unhosted wallet, upon receiving the authorization code (after your PayPal/Credit Card payment is made), will mint and send BUX tokens to settle the payment request\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 25\n    }\n  }, \"4. You have read and understand the BUX \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://bux.digital/tos.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 68\n    }\n  }, \" Terms Of Service\")), /*#__PURE__*/React.createElement(PrimaryButton, {\n    onClick: () => setHasAgreed(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 25\n    }\n  }, \"I Agree\"))));\n};\n/*\npassLoadingStatus must receive a default prop that is a function\nin order to pass the rendering unit test in SendBip70.test.js\n\nstatus => {console.log(status)} is an arbitrary stub function\n*/\n\n\nCheckout.defaultProps = {\n  paymentUrl: \"\",\n  paymentRequest: {},\n  passLoadingStatus: status => {\n    console.log(status);\n  },\n  onSuccess: link => {\n    console.log(\"onSuccess\", link);\n  },\n  onCancel: status => {\n    console.log(\"onCancel:\", status);\n  }\n};\nCheckout.propTypes = {\n  paymentUrl: PropTypes.string,\n  paymentRequest: PropTypes.object,\n  onSuccess: PropTypes.func,\n  onCancel: PropTypes.func,\n  passLoadingStatus: PropTypes.func\n};\nexport default Checkout;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/components/Send/Checkout.js"],"names":["React","useState","useEffect","useLocation","useHistory","PropTypes","PayPalScriptProvider","PayPalButtons","WalletContext","Form","Modal","Spin","CashLoadingIcon","PrimaryButton","useBCH","sendXecNotification","sendTokenNotification","selfMintTokenNotification","errorNotification","currency","Event","fiatToCrypto","getWalletState","fromSmallestDenomination","ApiError","PropsError","formatFiatBalance","cashaddr","getPaymentRequest","Script","SLP","U64","CheckoutHeader","CheckoutStyles","PaymentDetails","PurchaseAuthCode","Heading","ListItem","CheckoutIcon","HorizontalSpacer","AgreeOverlay","AgreeModal","getBip70Url","url","Checkout","paymentUrl","paymentRequest","passLoadingStatus","onSuccess","onCancel","isPaymentUrl","length","startsWith","isPaymentRequest","propsError","console","log","ContextValue","useContext","location","wallet","forceWalletUpdate","fiatPrice","apiError","cashtabSettings","walletState","tokens","balances","purchaseTokenIds","blankFormData","dirty","value","address","formData","setFormData","tokenFormattedBalance","token","find","tokenId","tokenBalance","balance","toString","info","decimals","sendBchAddressError","setSendBchAddressError","sendBchAmountError","setSendBchAmountError","selectedCurrency","setSelectedCurrency","ticker","prInfoFromUrl","setPrInfoFromUrl","isModalVisible","setIsModalVisible","isSending","setIsSending","hasAgreed","setHasAgreed","tokensMinted","setTokensMinted","tokensSent","setTokensSent","purchaseTokenAmount","setPurchaseTokenAmount","postageData","setPostageData","usePostage","setUsePostage","prefixesArray","prefixes","tokenPrefixes","showModal","handleOk","send","handleCancel","sleep","ms","Promise","resolve","setTimeout","history","getBcashRestUrl","sendBip70","sendSelfMint","getPostage","totalBalance","difference","Number","toFixed","includes","purchaseAmount","Math","abs","rounded","ceil","prInfo","allowedParameters","prQuery","Object","keys","filter","key","reduce","obj","customer_id","cert_hash","return_json","data","fetch","URLSearchParams","then","res","json","type","paymentDetails","merchantDataJson","JSON","parse","merchantData","err","populateFormsFromPaymentDetails","txInfo","postageObj","fromRaw","Buffer","from","outputs","script","getAddress","totalSats","total","output","slpScript","isValidSlp","tokenIdBuf","getData","tokenAddress","sendRecords","getType","cashAddress","decodedAddress","decode","encode","hash","getRecords","Error","totalBase","record","add","fromBE","fromInt","tokenInfo","tokenValue","toInt","handleSendXecError","errorObj","message","error","test","stringify","rawChainTxs","authCodeB64","attempt","link","defaultFee","callback","success_url","window","assign","e","cause","code","nextAttempt","doSelfMint","tokenTicker","doChainedMint","rawMintTx","checkSufficientFunds","fiatPriceString","isNaN","fiatCurrencies","fiatCurrency","symbol","toUpperCase","feeAmount","totalAmount","isSandbox","PayPalSection","layout","actions","order","create","purchase_units","reference_id","Path1899","slpAddress","description","custom_id","href","amount","currency_code","breakdown","item_total","items","name","unit_amount","quantity","application_context","shipping_preference","orderId","capture","details","id","method","headers","response","authcode","priceApiError","displayBalance","displayTicker","invoice","merchant_name","offer_description","offer_name","ipn_body","isStage1","CheckOutIcon","memo","defaultProps","status","propTypes","string","object","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n    useLocation,\n    useHistory\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { WalletContext } from '@utils/context';\nimport {\n    Form,\n    Modal,\n    Spin\n} from 'antd';\nimport { CashLoadingIcon } from '@components/Common/CustomIcons';\nimport PrimaryButton from '@components/Common/PrimaryButton';\nimport useBCH from '@hooks/useBCH';\nimport {\n    sendXecNotification,\n    sendTokenNotification,\n    selfMintTokenNotification,\n    errorNotification,\n} from '@components/Common/Notifications';\nimport {\n    currency\n} from '@components/Common/Ticker.js';\nimport { Event } from '@utils/GoogleAnalytics';\nimport { fiatToCrypto } from '@utils/validation';\nimport { \n    getWalletState,\n    fromSmallestDenomination\n} from '@utils/cashMethods';\nimport ApiError from '@components/Common/ApiError';\nimport PropsError from '@components/Common/PropsError';\nimport { formatFiatBalance } from '@utils/validation';\nimport cashaddr from 'ecashaddrjs';\nimport { getPaymentRequest } from '../../utils/bip70';\nimport Script from '@utils/bcash/script/script';\nimport SLP from '@utils/bcash/script/slp.js';\nimport { U64 } from 'n64';\nimport CheckOutIcon from \"@assets/checkout_icon.svg\";\nimport {\n\tCheckoutHeader,\n\tCheckoutStyles,\n\tPaymentDetails,\n\tPurchaseAuthCode,\n\tHeading,\n\tListItem,\n\tCheckoutIcon,\n\tHorizontalSpacer,\n    AgreeOverlay,\n    AgreeModal,\n} from \"../../assets/styles/checkout.styles\";\n\nfunction getBip70Url() {\n    const url = \"https://bip70.cert.cash\";\n    return url;\n}\n\nconst Checkout = ({ paymentUrl, \n                    paymentRequest, \n                    passLoadingStatus, \n                    onSuccess, \n                    onCancel\n                }) => {\n    // use balance parameters from wallet.state object and not legacy balances parameter from walletState, if user has migrated wallet\n    // this handles edge case of user with old wallet who has not opened latest Cashtab version yet\n\n    // If the wallet object from ContextValue has a `state key`, then check which keys are in the wallet object\n    // Else set it as blank\n\n    const isPaymentUrl = paymentUrl.length === 31 && paymentUrl.startsWith(\"https://pay.badger.cash/i/\");\n    const isPaymentRequest = 'customer_id' in paymentRequest // url trumps new request\n                    && 'amount' in paymentRequest && !isPaymentUrl;\n    const propsError = !isPaymentUrl && !isPaymentRequest;\n    if (propsError) {\n        return (\n            <>\n                <PropsError msg=\"Invalid payment request properties\" onCancel={onCancel} />\n            </>\n        );\n    }\n    console.log(\"isPaymentUrl\", isPaymentUrl, \"isPaymentRequest\", isPaymentRequest, \"isPropsError\", propsError);\n    const ContextValue = React.useContext(WalletContext);\n    const location = useLocation();\n    const { \n        wallet,\n        forceWalletUpdate,\n        fiatPrice, \n        apiError, \n        cashtabSettings \n    } = ContextValue;\n    const walletState = getWalletState(wallet);\n    const { \n        tokens,\n        balances\n    } = walletState;\n    // Modal settings\n    const purchaseTokenIds = [\n        '7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5',\n        '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1'\n    ];\n\n    const blankFormData = {\n        dirty: true,\n        value: '',\n        address: '',\n    };\n    const [formData, setFormData] = useState(blankFormData);\n    let tokenFormattedBalance;\n    if (formData.token) {\n        const token = tokens.find(token => \n            token.tokenId === formData.token.tokenId\n        );\n        if (token) {\n            const tokenBalance = token.balance.toString();\n            tokenFormattedBalance = (tokenBalance / (10 ** token.info.decimals))\n                .toString();\n        } else {\n            tokenFormattedBalance = '0';\n        }\n    }\n\n    const [sendBchAddressError, setSendBchAddressError] = useState(false);\n    const [sendBchAmountError, setSendBchAmountError] = useState(false);\n    const [selectedCurrency, setSelectedCurrency] = useState(currency.ticker);\n\n    // Support cashtab button from web pages\n    const [prInfoFromUrl, setPrInfoFromUrl] = useState(false);\n\n    // Show a confirmation modal on transactions created by populating form from web page button\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [isSending, setIsSending] = useState(false);\n\n    const [hasAgreed, setHasAgreed] = useState(false);\n\n    const [tokensMinted, setTokensMinted] = useState(false);\n    const [tokensSent, setTokensSent] = useState(false);\n    const [purchaseTokenAmount, setPurchaseTokenAmount] = useState(0);\n\n    // Postage Protocol Check (for BURN)\n    const [postageData, setPostageData] = useState(null);\n    const [usePostage, setUsePostage] = useState(false);\n\n    const prefixesArray = [\n        ...currency.prefixes,\n        ...currency.tokenPrefixes\n    ]\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleOk = () => {\n        // setIsModalVisible(false);\n        setIsSending(true);\n        send();\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const sleep = (ms) => {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const history = useHistory();\n\n    const { \n        getBcashRestUrl, \n        sendBip70,\n        sendSelfMint,\n        getPostage \n    } = useBCH();\n\n    // If the balance has changed, unlock the UI\n    // This is redundant, if backend has refreshed in 1.75s timeout below, UI will already be unlocked\n    useEffect(() => {\n        passLoadingStatus(false);\n        console.log(\"useEffect passLoadingStatus false\");\n    }, [balances.totalBalance]);\n\n    useEffect(() => {\n        // Check to see if purchase modal should be shown\n        if (formData.token) {\n            const difference = (Number(tokenFormattedBalance) - Number(formData.value))\n                .toFixed(formData.token.decimals);\n            if (purchaseTokenIds.includes(formData.token?.tokenId)) {\n                // Set amount to purchase\n                let purchaseAmount = difference < 0 ? Math.abs(difference) : 0\n                if (purchaseAmount > 0) {\n                    const rounded = Math.ceil(purchaseAmount * 100) / 100;\n                    purchaseAmount = rounded < 1 ? 1 : rounded;\n                }\n                setPurchaseTokenAmount(purchaseAmount);\n                console.log(\"useEffect setPurchaseTokenAmount\", purchaseAmount);\n            }\n        }\n    }, [tokenFormattedBalance]);\n\n    useEffect(async () => {\n        // if (!wallet.Path1899)\n            // return history.push('/wallet');\n        passLoadingStatus(true);\n\n        const prInfo = {};\n        if(isPaymentRequest) {            \n            const allowedParameters = [ \n                \"invoice\", \n                \"order_key\", \n                \"amount\", \n                \"offer_name\", \n                \"offer_description\", \n                \"success_url\",\n                \"cancel_url\", \n                \"ipn_url\",\n                \"customer_id\",\n                \"cert_hash\", \n                \"merchant_name\"\n            ];\n            const prQuery = Object.keys(paymentRequest)\n                .filter(key => allowedParameters.includes(key))\n                .reduce((obj, key) => {\n                obj[key] = paymentRequest[key];\n                return obj;\n            }, {});\n            if (paymentRequest.customer_id) // api currently only takes certificates\n                prQuery.cert_hash = prQuery.customer_id;\n            prQuery.return_json = true;    \n            console.log(\"prQuery\", prQuery);\n            const data = await fetch(\n                \"https://relay2.cmpct.org/v2?\" + new URLSearchParams(prQuery))\n                .then(res => res.json());\n            console.log(\"fetch data\", data);\n            prInfo.url = data.paymentUrl;\n            prInfo.type = data.currency;\n        } else {\n            prInfo.url = paymentUrl;\n            prInfo.type =\"etoken\"; // parametrize?\n        }\n\n        console.log(`prInfo from page params`, prInfo);\n        if (prInfo.url && prInfo.type) {\n            try {\n                prInfo.paymentDetails = (await getPaymentRequest(\n                    prInfo.url, \n                    prInfo.type\n                )).paymentDetails;\n                prInfo.paymentDetails.merchantDataJson = JSON.parse(prInfo.paymentDetails.merchantData.toString());\n            } catch (err) {\n                errorNotification(err, \n                    'Failed to fetch invoice. May be expired or invalid', \n                    `Fetching invoice: ${prInfo.url}`\n                );\n                await sleep(3000);\n                // Manually disable loading\n                passLoadingStatus(false);\n                // window.history.replaceState(null, '', window.location.origin);\n                // return history.push(`/wallet`);\n            }\n        } else {\n            passLoadingStatus(false);\n            // return history.push('/wallet');\n        }\n        setPrInfoFromUrl(prInfo);\n        prInfo.paymentDetails.type = prInfo.type;\n        await populateFormsFromPaymentDetails(prInfo.paymentDetails);\n\n        passLoadingStatus(false);\n    }, []);\n\n    async function populateFormsFromPaymentDetails(paymentDetails) {\n        if (!paymentDetails)\n            return;\n        const txInfo = {};\n        // Define postage object in case of BURN\n        let postageObj;\n        // Begin parsing BIP70 Payment Request\n        if (paymentDetails.type === 'ecash') {\n            const address = Script.fromRaw(\n                Buffer.from(paymentDetails.outputs[0].script)\n            ).getAddress().toString();\n            const totalSats = paymentDetails.outputs.reduce((total, output) => {\n                return total + output.value\n            }, 0);\n            txInfo.address = address;\n            txInfo.value = fromSmallestDenomination(totalSats);\n\n        } else if (paymentDetails.type === 'etoken') {\n            const slpScript = SLP.fromRaw(Buffer.from(\n                paymentDetails.outputs[0].script\n            ));\n            // Be sure it is valid SLP transaction\n            if (slpScript.isValidSlp()) {\n                const tokenIdBuf = slpScript.getData(4);\n                // Handle SEND and BURN\n                let tokenAddress;\n                let sendRecords;\n                if (slpScript.getType() === 'SEND') {\n                    const cashAddress = Script.fromRaw(\n                        Buffer.from(paymentDetails.outputs[1].script)\n                    ).getAddress().toString();\n                    const decodedAddress = cashaddr.decode(cashAddress);\n                    tokenAddress = cashaddr.encode(\n                        'etoken',\n                        decodedAddress.type,\n                        decodedAddress.hash\n                    )\n                    sendRecords = slpScript.getRecords(tokenIdBuf);\n                } else if (slpScript.getType() === 'BURN') {\n                    tokenAddress = '**BURN**'\n                    sendRecords = [{\n                        value: slpScript.getData(5)\n                    }]\n                    // Get postage info\n                    postageObj = await getPostage(\n                        tokenIdBuf.toString('hex')\n                    );\n                } else {\n                    throw new Error(\n                        `Unsupported SLP transaction type: ${slpScript.getType()}`\n                    );\n                }\n                // Compute total amount to send\n                const totalBase = sendRecords.reduce((total, record) => {\n                    return total.add(U64.fromBE(Buffer.from(record.value)));\n                }, U64.fromInt(0));\n                console.log('totalBase', totalBase);\n\n                const tokenInfo = await fetch(\n                    `${getBcashRestUrl()}/token/${tokenIdBuf.toString('hex')}`\n                ).then(res => res.json());\n\n                txInfo.address = tokenAddress;\n                const tokenValue = totalBase.toInt() / (10 ** tokenInfo.decimals);\n                txInfo.value = `${tokenValue}`;\n                txInfo.token = tokenInfo;\n            }\n        }\n        \n        setFormData(txInfo);\n        if (postageObj) {\n            setPostageData(postageObj);\n            setUsePostage(true);\n        }\n    }\n\n    function handleSendXecError(errorObj, ticker) {\n        // Set loading to false here as well, as balance may not change depending on where error occured in try loop\n        passLoadingStatus(false);\n        let message;\n\n        if (!errorObj.error && !errorObj.message) {\n            message = `Transaction failed: no response from ${getBcashRestUrl()}.`;\n        } else if (\n            /Could not communicate with full node or other external service/.test(\n                errorObj.error,\n            )\n        ) {\n            message = 'Could not communicate with API. Please try again.';\n        } else if (\n            errorObj.error &&\n            errorObj.error.includes(\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 50] (code 64)',\n            )\n        ) {\n            message = `The ${currency.ticker} you are trying to send has too many unconfirmed ancestors to send (limit 50). Sending will be possible after a block confirmation. Try again in about 10 minutes.`;\n        } else {\n            message =\n                errorObj.message || errorObj.error || JSON.stringify(errorObj);\n        }\n\n        errorNotification(errorObj, message, `Sending ${ticker}`);\n\n    }\n\n    async function send(rawChainTxs, authCodeB64, attempt = 1) {\n        setFormData({\n            ...formData,\n            dirty: false,\n        });\n\n        const { paymentDetails, type } = prInfoFromUrl;\n\n        // ensure prInfo exists\n        if (!paymentDetails) {\n            return;\n        }\n\n        // Event(\"Category\", \"Action\", \"Label\")\n        // Track number of XEC BIP70 transactions\n        Event('SendBip70.js', 'SendBip70', type);\n\n        passLoadingStatus(\"Please wait while your transaction is broadcast\");\n\n        try {\n            // Send transaction\n            const link = await sendBip70(\n                wallet,\n                paymentDetails,\n                currency.defaultFee,\n                false, // testOnly\n                false, // isPreburn\n                rawChainTxs\n            );\n            if (type == 'ecash')\n                sendTokenNotification(link);\n            else {\n                sendXecNotification(link);\n            }\n            \n            // Send to success page if included in merchantDetails\n            if (paymentDetails.merchantData) {\n                const merchantDataJson = JSON.parse(paymentDetails.merchantData.toString());\n                if (merchantDataJson.callback?.success_url) {\n                    return window.location.assign(merchantDataJson.callback.success_url);\n                }\n            }\n\n            setTokensSent(true)\n            onSuccess(link);\n            // If doing a chain, force full wallet update\n            // UTXOs may not change (ie. in a mint chain)\n            if (rawChainTxs)\n                await forceWalletUpdate(true);\n            else\n                await sleep(3000);\n            // Manually disable loading\n            passLoadingStatus(false);\n            // Return to main wallet screen\n            // window.history.replaceState(null, '', window.location.origin);\n            // return history.push(`/wallet`);\n        } catch (e) {\n            console.error(e)\n            // Retry send if response is 402 or 404 (mitigates stamp/baton race conditions)\n            if ((e.cause.code === 402 || e.cause.code === 404) && attempt < 3) {\n                const nextAttempt = attempt + 1;\n                passLoadingStatus(`Payment unsuccessful. Retrying... (${nextAttempt}/3)`);\n                await sleep(5000);\n                if (authCodeB64)\n                    return doSelfMint(authCodeB64, nextAttempt);\n                else\n                    return send(null, null, nextAttempt)\n            } else {\n                const ticker = type == 'etoken' ?\n                    currency.tokenTicker : currency.ticker;\n                handleSendXecError(e, ticker);\n                onCancel(true);\n            }\n        }\n        \n        // Clear the address field\n        setFormData(blankFormData);\n        // Manually disable loading\n        passLoadingStatus(false);\n    }\n\n    const doSelfMint = async (authCodeB64, attempt = 1) => {\n        setFormData({\n            ...formData,\n            dirty: false,\n        });\n\n        // ensure prInfo exists\n        if (!authCodeB64) {\n            return;\n        }\n\n        // TODO: Handle many different tokens\n        const tokenId = Buffer.from(\n            formData.token.tokenId,\n            'hex'\n        );\n\n        // Event(\"Category\", \"Action\", \"Label\")\n        // Track number of XEC BIP70 transactions\n        Event('SelfMint.js', 'SelfMint', authCodeB64);\n\n        passLoadingStatus(\"Please wait while your tokens are minted\");\n\n        //const doChainedMint = Number(tokenFormattedBalance) === 0;\n        // default to always doing a chained mint here, don't show SEND button\n        const doChainedMint = true;\n\n        try {\n            // Send transaction\n            const rawMintTx = await sendSelfMint(\n                wallet,\n                tokenId,\n                authCodeB64,\n                false, // testOnly\n                doChainedMint\n            );\n\n            setTokensMinted(true);\n\n            if (doChainedMint)\n                return send(\n                    [rawMintTx],\n                    authCodeB64,\n                    attempt\n                )\n\n            selfMintTokenNotification();\n            // Sleep for 10 seconds and then \n            // await sleep(10000);\n            forceWalletUpdate();\n            // Manually disable loading\n            return passLoadingStatus(true);\n            // return window.location.reload();\n        } catch (e) {\n            handleSendXecError(e, authCodeB64);\n        }\n    }\n\n    const checkSufficientFunds = () => {\n        if (formData.token) {\n            return Number(tokenFormattedBalance) >= Number(formData.value)\n        } else if (formData) {\n            return Number(balances.totalBalance) > Number(formData.value)\n        }\n        return false\n    }\n\n    // Display price in USD below input field for send amount, if it can be calculated\n    let fiatPriceString = '';\n    if (fiatPrice !== null && !isNaN(formData.value)) {\n        if (selectedCurrency === currency.ticker) {\n            // calculate conversion to fiatPrice\n            fiatPriceString = `${(fiatPrice * Number(formData.value)).toFixed(\n                2,\n            )}`;\n\n            // formats to fiat locale style\n            fiatPriceString = formatFiatBalance(Number(fiatPriceString));\n\n            // insert symbol and currency before/after the locale formatted fiat balance\n            fiatPriceString = `${\n                cashtabSettings\n                    ? `${\n                          currency.fiatCurrencies[cashtabSettings.fiatCurrency]\n                              .symbol\n                      } `\n                    : '$ '\n            } ${fiatPriceString} ${\n                cashtabSettings && cashtabSettings.fiatCurrency\n                    ? cashtabSettings.fiatCurrency.toUpperCase()\n                    : 'USD'\n            }`;\n        } else {\n            fiatPriceString = `${\n                formData.value\n                    ? formatFiatBalance(\n                          Number(fiatToCrypto(formData.value, fiatPrice)),\n                      )\n                    : formatFiatBalance(0)\n            } ${currency.ticker}`;\n        }\n    }\n\n    const feeAmount = (.50 + (purchaseTokenAmount * .06)).toFixed(2); // Add 50 cent fixed fee to 6% percentage\n    const totalAmount = (Number(purchaseTokenAmount) + Number(feeAmount)).toFixed(2);\n\n    const isSandbox = formData.token?.tokenId === '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1'\n\n    const PayPalSection = () => {\n        return (\n            <>\n                <PayPalScriptProvider options={{ \n                    \"client-id\": isSandbox ? \n                    \"AeFEAYVCMcWrjMQySDAJ_9K4AHvcYFA_-q9PF-axkNNU_sldsbZDCYuU8aTsNYgzPu4qNGB0IqCN1cbQ\" : \n                    \"ATPjCoOQT8kYOAzUUwehyvrA7D4nyvkfyZgmSMiR5_YOe9G2UomchTEQJzdzj2QGiUXOxfYCpK17izz7\" \n                }}>\n                    <PayPalButtons \n                        style={{ layout: \"vertical\" }}\n                        forceReRender={[purchaseTokenAmount]}\n                        createOrder={(data, actions) => {\n                            console.log(\"purchaseAmount\", purchaseTokenAmount);\n                            return actions.order\n                                .create({\n                                    purchase_units: [\n                                        {\n                                            reference_id: `${wallet.Path1899.slpAddress}-${purchaseTokenAmount}`,\n                                            description: `Self-Mint Auth Code (${purchaseTokenAmount} BUX Tokens)`,\n                            \n                                            custom_id: location.href,\n                                            amount: {\n                                                currency_code: \"USD\",\n                                                value: totalAmount.toString(),\n                                                breakdown: {\n                                                    item_total: {\n                                                        currency_code: \"USD\",\n                                                        value: totalAmount.toString()\n                                                    }\n                                                }\n                                            },\n                                            items: [\n                                                {\n                                                    name: \"Auth Code\",\n                                                    description: `Self-Mint Auth Code (${purchaseTokenAmount} BUX Tokens)`,\n                                                    unit_amount: {\n                                                        currency_code: \"USD\",\n                                                        value: totalAmount.toString()\n                                                    },\n                                                    quantity: \"1\"\n                                                }\n                                            ],\n                            \n                                        }\n                                    ],\n                                    application_context: {\n                                        shipping_preference: 'NO_SHIPPING'\n                                    }\n                                })\n                                .then((orderId) => {\n                                    // Your code here after create the order\n                                    return orderId;\n                                });\n                        }}\n                        onApprove={(data, actions) => {\n                            return actions.order.capture().then(function (details) {\n                                // Your code here after capture the order\n                                passLoadingStatus(true);\n                                // Call your server to save the transaction\n                                fetch(`https://${isSandbox ? 'dev-api.' : ''}bux.digital/v1/success?paymentId=${details.id}`, {\n                                    method: 'get',\n                                    headers: {\n                                        'content-type': 'application/json'\n                                    }\n                                })\n                                .then(response => {\n                                    return response.json();\n                                })\n                                .then(data => {\n                                    doSelfMint(data.authcode);\n                                });\n                            });\n                        }}\n                        onError={(err) => {\n                            console.log(err);\n                            const { type } = prInfoFromUrl;\n                            const ticker = type == 'etoken' ?\n                                currency.tokenTicker : currency.ticker;\n                            handleSendXecError(err, ticker);\n                        }}\n                    />\n                </PayPalScriptProvider>\n            </>\n        );\n    }\n\n    const priceApiError = fiatPrice === null && selectedCurrency !== 'XEC';\n\n    const displayBalance = tokenFormattedBalance || balances.totalBalance;\n    const displayTicker = formData.token?.ticker || currency.ticker;\n    const { invoice, merchant_name, offer_description, offer_name } = prInfoFromUrl.paymentDetails?.merchantDataJson?.ipn_body || {};\n    const isStage1 = !checkSufficientFunds() || apiError || sendBchAmountError || sendBchAddressError || !prInfoFromUrl;\n    // For making SEND button available\n    if (!isStage1) {\n        passLoadingStatus(false);\n    }\n\n    return (\n        <>\n            <Modal\n                title=\"Confirm Send\"\n                visible={isModalVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n            >\n                <p>\n                    Are you sure you want to send {formData.value}{' '}\n                    {displayTicker} to settle this payment request?\n                </p>\n            </Modal>\n\n                <CheckoutHeader>\n                    <CheckoutIcon src={CheckOutIcon} />\n                    <h4>CHECKOUT</h4>\n                    <hr />             \n                    {(offer_name && (\n                        <>\n                            <h1>{offer_name}</h1>\n                        </>\n                    ))}                            \n                </CheckoutHeader>\n\n\t\t\t<CheckoutStyles>\n\t\t\t\t<PaymentDetails>\n\t\t\t\t\t<h3 className=\"title\">Payment Request Details:</h3>\n                    {(offer_description && (\n                        <>\n                            <p className=\"offer-description\">{offer_description}</p>\n                            <span className=\"merchant\">From {merchant_name}</span>\n                        </>\n                    )) || (prInfoFromUrl && prInfoFromUrl.paymentDetails && (\n                        <>\n                            <p className=\"offer-description\">{prInfoFromUrl.paymentDetails.memo}</p>                        \n                        </>\n                    ))}\n\t\t\t\t</PaymentDetails>\n\n\t\t\t\t<HorizontalSpacer />\n\n\t\t\t\t{(isStage1 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PurchaseAuthCode>\n\t\t\t\t\t\t\t{!checkSufficientFunds() && <p className=\"text-muted\">You have insufficient funds in this wallet</p>}\n\t\t\t\t\t\t\t<ListItem className=\"min-m\">\n\t\t\t\t\t\t\t\t<span className=\"key black\">Purchase an Auth Code for</span>\n\t\t\t\t\t\t\t\t<span className=\"value black bold\">\n\t\t\t\t\t\t\t\t\t{purchaseTokenAmount} {displayTicker}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<p className=\"text-muted\">In order to settle this payment request</p>\n\t\t\t\t\t\t</PurchaseAuthCode>\n\n\t\t\t\t\t\t<HorizontalSpacer />\n\n\t\t\t\t\t\t<Heading>Transaction Details:</Heading>\n\n\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t<span className=\"key gray\">Subtotal:</span>\n\t\t\t\t\t\t\t<span className=\"value gray\">${purchaseTokenAmount}</span>\n\t\t\t\t\t\t</ListItem>\n\n\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t<span className=\"key gray\">Fee:</span>\n\t\t\t\t\t\t\t<span className=\"value gray\">${feeAmount}</span>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t<span className=\"key gray bold\">Total:</span>\n\t\t\t\t\t\t\t<span className=\"value gray bold\">${totalAmount}</span>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</>\n\t\t\t\t)) || (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PurchaseAuthCode>\n\t\t\t\t\t\t\t<ListItem className=\"min-m\">\n\t\t\t\t\t\t\t\t<span className=\"key black\">Ready To Send</span>\n\t\t\t\t\t\t\t\t<span className=\"value black bold\">\n\t\t\t\t\t\t\t\t\t{formData.value} {displayTicker}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<p className=\"text-muted\">In order to settle this payment request</p>\n\t\t\t\t\t\t</PurchaseAuthCode>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\n\t\t\t\t<HorizontalSpacer />\n                \n                {merchant_name && (\n                    <>\n                        <ListItem>\n                            <span className=\"key gray\">Merchant:</span>\n                            <span className=\"value gray\">{merchant_name}</span>\n                        </ListItem>                       \n                    </>\n                )}\n\n                {invoice && (\n                    <>\n                        <ListItem>\n                            <span className=\"key gray\">Invoice:</span>\n                            <span className=\"value gray\">{invoice}</span>\n                        </ListItem>                    \n                    </>\n                )}\n\n\t\t\t\t{(merchant_name || invoice) && (\n                    <>\n                        <HorizontalSpacer />                    \n                    </>\n                )}\n\n\t\t\t</CheckoutStyles>\n\n                <Form>            \n                {isStage1 ? (\n                    <>\n                        { hasAgreed && (\n                            <>\n                            {!tokensMinted ? \n                                <>                \n                                    {prInfoFromUrl.url && (\n                                        <>\n                                            <p className=\"text-muted\">\n                                                Use existing Tokens? \n                                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={prInfoFromUrl.url}> Open in Wallet</a>\n                                            </p>\n                                        </>\n                                    )}\n                                    <p className=\"text-muted\">\n                                        By making this purchase you agree to the\n                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bux.digital/tos.html\"> Terms Of Service</a>\n                                    </p>\n                                    <PayPalSection />\n                                </>\n                                : <Spin spinning={true} indicator={CashLoadingIcon}></Spin>\n                            }\n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        {isSending || tokensSent ? <Spin spinning={true} indicator={CashLoadingIcon}></Spin> :\n                        /* <PrimaryButton onClick={() => handleOk()}>Send</PrimaryButton>*/<></>}\n                    </>\n                )}\n\n                {apiError && <ApiError />}\n                {propsError && <PropsError/>}\n            </Form>\n\n            { !hasAgreed && isStage1 &&\n                <AgreeOverlay>\n                    <AgreeModal>\n                        <Heading>You are about to purchase a BUX Self-Mint Authorization Code</Heading>\n                        <HorizontalSpacer />\n                        <span className=\"key black\">To proceed you must agree to the following:</span>\n                        <p className=\" first\">1. The seller of the digital good in this transaction is <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bux.digital\">Badger LLC</a></p>\n                        <p>2. This purchase is for an authorization code ONLY. It is not a purchase of digital currency, credits on any third-party platform, or any other product or service</p>\n                        <p>3. This unhosted wallet, upon receiving the authorization code (after your PayPal/Credit Card payment is made), will mint and send BUX tokens to settle the payment request</p>\n                        <p>4. You have read and understand the BUX <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bux.digital/tos.html\"> Terms Of Service</a></p>\n                        <PrimaryButton onClick={() => setHasAgreed(true)}>I Agree</PrimaryButton>\n                    </AgreeModal>\n                </AgreeOverlay>\n            }\n        </>\n    );\n};\n\n/*\npassLoadingStatus must receive a default prop that is a function\nin order to pass the rendering unit test in SendBip70.test.js\n\nstatus => {console.log(status)} is an arbitrary stub function\n*/\n\nCheckout.defaultProps = {\n    paymentUrl: \"\",\n    paymentRequest: {},\n    passLoadingStatus: status => {\n        console.log(status);\n    },\n    onSuccess: link => {\n        console.log(\"onSuccess\", link);\n    },\n    onCancel: status => {\n        console.log(\"onCancel:\", status);\n    }\n};\n\nCheckout.propTypes = {\n    paymentUrl: PropTypes.string,\n    paymentRequest: PropTypes.object,\n    onSuccess: PropTypes.func,\n    onCancel: PropTypes.func,\n    passLoadingStatus: PropTypes.func\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}