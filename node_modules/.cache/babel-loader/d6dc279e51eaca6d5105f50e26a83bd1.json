{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { fillFieldNames } from \"rc-tree-select/es/utils/valueUtil\";\nvar VALUE_SPLIT = '__RC_CASCADER_SPLIT__';\nexport { fillFieldNames };\n/**\n * Convert entity back to path & options\n * @returns\n */\n\nexport function restoreCompatibleValue(entity, fieldNames) {\n  var path = [];\n  var options = [];\n  var current = entity;\n\n  while (current) {\n    path.unshift(current.data.node[fieldNames.value]);\n    options.unshift(current.data.node);\n    current = current.parent;\n  }\n\n  return {\n    path: path,\n    options: options\n  };\n}\nexport function isLeaf(option) {\n  var children = option.children,\n      node = option.node;\n  var leaf = node === null || node === void 0 ? void 0 : node.isLeaf;\n  return leaf !== undefined ? leaf : !(children === null || children === void 0 ? void 0 : children.length);\n}\n/**\n * We will connect path value to a string. e.g.\n * ['little', 'bamboo'] => 'little__bamboo'\n *\n * zombieJ: It's better to deprecate the same key in the nest tree. Maybe next major version.\n */\n\nexport function connectValue(value) {\n  return (value || []).join(VALUE_SPLIT);\n}\n/**\n * Reverse of `connectValue`\n */\n\nexport function splitValue(str) {\n  return str.split(VALUE_SPLIT);\n}\n/**\n * Fill options with fully value by path to avoid nest entity with same value.\n * Which means we need another round to get origin node back!\n * This is slow perf on large list. We should abandon same value in nest in future.\n */\n\nexport function convertOptions(options, _ref, internalValueField) {\n  var fieldValue = _ref.value,\n      fieldChildren = _ref.children;\n\n  function injectValue(list) {\n    var parentValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return (list || []).map(function (option) {\n      var _objectSpread2;\n\n      var newValue = option[fieldValue];\n\n      if (parentValue) {\n        newValue = connectValue([parentValue, option[fieldValue]]);\n      } else if (typeof newValue === 'number') {\n        // Since we will convert all the value to string, we need get this\n        newValue = String(newValue);\n      }\n\n      var cloneOption = _objectSpread(_objectSpread({}, option), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, internalValueField, newValue), _defineProperty(_objectSpread2, \"node\", option), _objectSpread2));\n\n      if (cloneOption[fieldChildren]) {\n        cloneOption[fieldChildren] = injectValue(cloneOption[fieldChildren], newValue);\n      }\n\n      return cloneOption;\n    });\n  }\n\n  return injectValue(options);\n}","map":null,"metadata":{},"sourceType":"module"}