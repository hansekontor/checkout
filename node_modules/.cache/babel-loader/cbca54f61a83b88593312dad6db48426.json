{"ast":null,"code":"/*!\n * pemcrypt.js - PEM encryption for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://tools.ietf.org/html/rfc1421\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n\nconst {\n  PEMBlock\n} = require('./pem');\n\nconst cipher = require('../cipher');\n\nconst random = require('../random');\n\nconst eb2k = require('../eb2k');\n/**\n * Encrypt a block.\n * @param {PEMBlock} block\n * @param {String} name\n * @param {String} passwd\n * @returns {PEMBlock}\n */\n\n\nfunction encrypt(block, name, passwd) {\n  assert(block instanceof PEMBlock);\n  assert(typeof name === 'string');\n  assert(typeof passwd === 'string');\n  if (block.isEncrypted()) throw new Error('PEM block is already encrypted.');\n  const {\n    keySize,\n    ivSize\n  } = cipher.get(name);\n  const iv = random.randomBytes(ivSize);\n  const [key] = eb2k.derive(passwd, iv, keySize, ivSize);\n  block.data = cipher.encrypt(name, key, iv, block.data);\n  block.setProcType(4, 'ENCRYPTED');\n  block.setDEKInfo(name, iv);\n  return block;\n}\n/**\n * Decrypt a block.\n * @param {PEMBlock} block\n * @param {String} passwd\n * @returns {PEMBlock}\n */\n\n\nfunction decrypt(block, passwd) {\n  assert(block instanceof PEMBlock);\n  assert(typeof passwd === 'string');\n  if (!block.isEncrypted()) throw new Error('PEM block is not encrypted.');\n  const info = block.getDEKInfo();\n  if (!info) throw new Error('DEK-Info not found.');\n  const {\n    keySize,\n    ivSize\n  } = cipher.get(info.name);\n  const [key] = eb2k.derive(passwd, info.iv, keySize, ivSize);\n  block.data = cipher.decrypt(info.name, key, info.iv, block.data);\n  block.unsetProcType();\n  block.unsetDEKInfo();\n  return block;\n}\n/*\n * Expose\n */\n\n\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}