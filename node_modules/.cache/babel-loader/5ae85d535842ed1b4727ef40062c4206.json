{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport localforage from 'localforage';\nimport { currency } from '@components/Common/Ticker';\nimport { convertBase64ToArrayBuffer, convertArrayBufferToBase64 } from '@utils/convertArrBuffBase64'; // return an Authentication Object\n// OR null if user device does not support Web Authentication\n\nconst useWebAuthentication = () => {\n  const [isWebAuthnSupported, setIsWebAuthnSupported] = useState(false); // Possible values of isAuthenticationRequired:\n  //   true - YES, authentication is required\n  //   false - NO, authentication is not required\n  //   undefined - has not been set, this is the first time the app runs\n\n  const [isAuthenticationRequired, setIsAuthenticationRequired] = useState(undefined);\n  const [credentialId, setCredentialId] = useState(null);\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [userId, setUserId] = useState(Date.now().toString(16));\n  const [loading, setLoading] = useState(true);\n\n  const loadAuthenticationConfigFromLocalStorage = async () => {\n    // try to load authentication configuration from local storage\n    try {\n      return await localforage.getItem('authenticationConfig');\n    } catch (err) {\n      console.error('Error is localforange.getItem(\"authenticatonConfig\") in loadAuthenticationConfigFromLocalStorage() in useWebAuthentication()'); // Should stop when attempting to read from localstorage failed\n      // countinuing would prompt user to register new credential\n      // that would risk overrididing existing credential\n\n      throw err;\n    }\n  };\n\n  const saveAuthenticationConfigToLocalStorage = () => {\n    try {\n      return localforage.setItem('authenticationConfig', {\n        isAuthenticationRequired,\n        userId,\n        credentialId\n      });\n    } catch (err) {\n      console.error('Error is localforange.setItem(\"authenticatonConfig\") in saveAuthenticationConfigToLocalStorage() in useWebAuthentication()');\n      throw err;\n    }\n  }; // Run Once\n\n\n  useEffect(async () => {\n    // check to see if user device supports User Verification\n    const available = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable(); // only attempt to save/load authentication configuration from local storage if web authetication is supported\n\n    if (available) {\n      const authenticationConfig = await loadAuthenticationConfigFromLocalStorage(); // if this is the first time the app is run, then save the default config value\n\n      if (authenticationConfig === null) {\n        saveAuthenticationConfigToLocalStorage();\n      } else {\n        setUserId(authenticationConfig.userId);\n        setCredentialId(authenticationConfig.credentialId);\n        setIsAuthenticationRequired(authenticationConfig.isAuthenticationRequired);\n      } // signout the user when the app is not visible (minimize the browser, switch tab, switch app window)\n\n\n      const handleDocVisibilityChange = () => {\n        if (document.visibilityState !== 'visible') setIsSignedIn(false);\n      };\n\n      document.addEventListener('visibilitychange', handleDocVisibilityChange);\n      setIsWebAuthnSupported(available);\n      setLoading(false);\n      return () => {\n        document.removeEventListener('visibilitychange', handleDocVisibilityChange);\n      };\n    }\n  }, []); // save the config whenever it is changed\n\n  useEffect(async () => {\n    if (isAuthenticationRequired === undefined) return;\n    await saveAuthenticationConfigToLocalStorage();\n  }, [isAuthenticationRequired, credentialId]); // options for PublicKeyCredentialCreation\n\n  const publicKeyCredentialCreationOptions = {\n    // hardcode for now\n    // consider generating random string and then verifying it against the reponse from authenticator\n    challenge: Uint8Array.from('cashtab-wallet-for-ecash', c => c.charCodeAt(0)),\n    rp: {\n      name: currency.name,\n      id: document.domain\n    },\n    user: {\n      id: Uint8Array.from(userId, c => c.charCodeAt(0)),\n      name: `Local User`,\n      displayName: 'Local User'\n    },\n    pubKeyCredParams: [{\n      alg: -7,\n      type: 'public-key'\n    }, {\n      alg: -35,\n      type: 'public-key'\n    }, {\n      alg: -36,\n      type: 'public-key'\n    }, {\n      alg: -257,\n      type: 'public-key'\n    }, {\n      alg: -258,\n      type: 'public-key'\n    }, {\n      alg: -259,\n      type: 'public-key'\n    }, {\n      alg: -37,\n      type: 'public-key'\n    }, {\n      alg: -38,\n      type: 'public-key'\n    }, {\n      alg: -39,\n      type: 'public-key'\n    }, {\n      alg: -8,\n      type: 'public-key'\n    }],\n    authenticatorSelection: {\n      userVerification: 'required',\n      authenticatorAttachment: 'platform',\n      requireResidentKey: false\n    },\n    timeout: 60000,\n    attestation: 'none',\n    excludeCredentials: [],\n    extensions: {}\n  }; // options for PublicKeyCredentialRequest\n\n  const publickKeyRequestOptions = {\n    // hardcode for now\n    // consider generating random string and then verifying it against the reponse from authenticator\n    challenge: Uint8Array.from('cashtab-wallet-for-ecash', c => c.charCodeAt(0)),\n    timeout: 60000,\n    // rpId: document.domain,\n    allowCredentials: [{\n      type: 'public-key',\n      // the credentialId is stored as base64\n      // need to convert it to ArrayBuffer\n      id: convertBase64ToArrayBuffer(credentialId),\n      transports: ['internal']\n    }],\n    userVerification: 'required',\n    extensions: {}\n  };\n  const authentication = {\n    isAuthenticationRequired,\n    credentialId,\n    isSignedIn,\n    loading,\n    turnOnAuthentication: () => {\n      // Need to make sure that the credetialId is set\n      // before turning on the authentication requirement\n      // otherwise, user will be locked out of the app\n      // in other words, user must sign up / register first\n      if (credentialId) {\n        setIsAuthenticationRequired(true);\n      }\n    },\n    turnOffAuthentication: () => {\n      setIsAuthenticationRequired(false);\n    },\n    signUp: async () => {\n      try {\n        const publicKeyCredential = await navigator.credentials.create({\n          publicKey: publicKeyCredentialCreationOptions\n        });\n\n        if (publicKeyCredential) {\n          // convert the rawId from ArrayBuffer to base64 String\n          const base64Id = convertArrayBufferToBase64(publicKeyCredential.rawId);\n          setIsSignedIn(true);\n          setCredentialId(base64Id);\n          setIsAuthenticationRequired(true);\n        } else {\n          throw new Error('Error: navigator.credentials.create() returns null, in signUp()');\n        }\n      } catch (err) {\n        throw err;\n      }\n    },\n    signIn: async () => {\n      try {\n        const assertion = await navigator.credentials.get({\n          publicKey: publickKeyRequestOptions\n        });\n\n        if (assertion) {\n          // convert rawId from ArrayBuffer to base64 String\n          const base64Id = convertArrayBufferToBase64(assertion.rawId);\n          if (base64Id === credentialId) setIsSignedIn(true);\n        } else {\n          throw new Error('Error: navigator.credentials.get() returns null, signIn()');\n        }\n      } catch (err) {\n        throw err;\n      }\n    },\n    signOut: () => {\n      setIsSignedIn(false);\n    }\n  }; // Web Authentication support on a user's device may become unavailable due to various reasons\n  // (hardware failure, OS problems, the behaviour of some authenticators after several failed authentication attempts, etc)\n  // If this is the case, and user has previous enabled the lock, the decision here is to lock up the wallet.\n  // Otherwise, malicious user needs to simply disbale the platform authenticator to gain access to the wallet\n\n  return !isWebAuthnSupported && !isAuthenticationRequired ? null : authentication;\n};\n\nexport default useWebAuthentication;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/hooks/useWebAuthentication.js"],"names":["useState","useEffect","localforage","currency","convertBase64ToArrayBuffer","convertArrayBufferToBase64","useWebAuthentication","isWebAuthnSupported","setIsWebAuthnSupported","isAuthenticationRequired","setIsAuthenticationRequired","undefined","credentialId","setCredentialId","isSignedIn","setIsSignedIn","userId","setUserId","Date","now","toString","loading","setLoading","loadAuthenticationConfigFromLocalStorage","getItem","err","console","error","saveAuthenticationConfigToLocalStorage","setItem","available","window","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","authenticationConfig","handleDocVisibilityChange","document","visibilityState","addEventListener","removeEventListener","publicKeyCredentialCreationOptions","challenge","Uint8Array","from","c","charCodeAt","rp","name","id","domain","user","displayName","pubKeyCredParams","alg","type","authenticatorSelection","userVerification","authenticatorAttachment","requireResidentKey","timeout","attestation","excludeCredentials","extensions","publickKeyRequestOptions","allowCredentials","transports","authentication","turnOnAuthentication","turnOffAuthentication","signUp","publicKeyCredential","navigator","credentials","create","publicKey","base64Id","rawId","Error","signIn","assertion","get","signOut"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport localforage from 'localforage';\nimport { currency } from '@components/Common/Ticker';\nimport {\n    convertBase64ToArrayBuffer,\n    convertArrayBufferToBase64,\n} from '@utils/convertArrBuffBase64';\n\n// return an Authentication Object\n// OR null if user device does not support Web Authentication\nconst useWebAuthentication = () => {\n    const [isWebAuthnSupported, setIsWebAuthnSupported] = useState(false);\n    // Possible values of isAuthenticationRequired:\n    //   true - YES, authentication is required\n    //   false - NO, authentication is not required\n    //   undefined - has not been set, this is the first time the app runs\n    const [isAuthenticationRequired, setIsAuthenticationRequired] =\n        useState(undefined);\n    const [credentialId, setCredentialId] = useState(null);\n    const [isSignedIn, setIsSignedIn] = useState(false);\n    const [userId, setUserId] = useState(Date.now().toString(16));\n    const [loading, setLoading] = useState(true);\n\n    const loadAuthenticationConfigFromLocalStorage = async () => {\n        // try to load authentication configuration from local storage\n        try {\n            return await localforage.getItem('authenticationConfig');\n        } catch (err) {\n            console.error(\n                'Error is localforange.getItem(\"authenticatonConfig\") in loadAuthenticationConfigFromLocalStorage() in useWebAuthentication()',\n            );\n            // Should stop when attempting to read from localstorage failed\n            // countinuing would prompt user to register new credential\n            // that would risk overrididing existing credential\n            throw err;\n        }\n    };\n\n    const saveAuthenticationConfigToLocalStorage = () => {\n        try {\n            return localforage.setItem('authenticationConfig', {\n                isAuthenticationRequired,\n                userId,\n                credentialId,\n            });\n        } catch (err) {\n            console.error(\n                'Error is localforange.setItem(\"authenticatonConfig\") in saveAuthenticationConfigToLocalStorage() in useWebAuthentication()',\n            );\n            throw err;\n        }\n    };\n\n    // Run Once\n    useEffect(async () => {\n        // check to see if user device supports User Verification\n        const available =\n            await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n        // only attempt to save/load authentication configuration from local storage if web authetication is supported\n        if (available) {\n            const authenticationConfig =\n                await loadAuthenticationConfigFromLocalStorage();\n            // if this is the first time the app is run, then save the default config value\n            if (authenticationConfig === null) {\n                saveAuthenticationConfigToLocalStorage();\n            } else {\n                setUserId(authenticationConfig.userId);\n                setCredentialId(authenticationConfig.credentialId);\n                setIsAuthenticationRequired(\n                    authenticationConfig.isAuthenticationRequired,\n                );\n            }\n            // signout the user when the app is not visible (minimize the browser, switch tab, switch app window)\n            const handleDocVisibilityChange = () => {\n                if (document.visibilityState !== 'visible')\n                    setIsSignedIn(false);\n            };\n            document.addEventListener(\n                'visibilitychange',\n                handleDocVisibilityChange,\n            );\n\n            setIsWebAuthnSupported(available);\n            setLoading(false);\n\n            return () => {\n                document.removeEventListener(\n                    'visibilitychange',\n                    handleDocVisibilityChange,\n                );\n            };\n        }\n    }, []);\n\n    // save the config whenever it is changed\n    useEffect(async () => {\n        if (isAuthenticationRequired === undefined) return;\n        await saveAuthenticationConfigToLocalStorage();\n    }, [isAuthenticationRequired, credentialId]);\n\n    // options for PublicKeyCredentialCreation\n    const publicKeyCredentialCreationOptions = {\n        // hardcode for now\n        // consider generating random string and then verifying it against the reponse from authenticator\n        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c =>\n            c.charCodeAt(0),\n        ),\n        rp: {\n            name: currency.name,\n            id: document.domain,\n        },\n        user: {\n            id: Uint8Array.from(userId, c => c.charCodeAt(0)),\n            name: `Local User`,\n            displayName: 'Local User',\n        },\n        pubKeyCredParams: [\n            { alg: -7, type: 'public-key' },\n            { alg: -35, type: 'public-key' },\n            { alg: -36, type: 'public-key' },\n            { alg: -257, type: 'public-key' },\n            { alg: -258, type: 'public-key' },\n            { alg: -259, type: 'public-key' },\n            { alg: -37, type: 'public-key' },\n            { alg: -38, type: 'public-key' },\n            { alg: -39, type: 'public-key' },\n            { alg: -8, type: 'public-key' },\n        ],\n        authenticatorSelection: {\n            userVerification: 'required',\n            authenticatorAttachment: 'platform',\n            requireResidentKey: false,\n        },\n        timeout: 60000,\n        attestation: 'none',\n        excludeCredentials: [],\n        extensions: {},\n    };\n\n    // options for PublicKeyCredentialRequest\n    const publickKeyRequestOptions = {\n        // hardcode for now\n        // consider generating random string and then verifying it against the reponse from authenticator\n        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c =>\n            c.charCodeAt(0),\n        ),\n        timeout: 60000,\n        // rpId: document.domain,\n        allowCredentials: [\n            {\n                type: 'public-key',\n                // the credentialId is stored as base64\n                // need to convert it to ArrayBuffer\n                id: convertBase64ToArrayBuffer(credentialId),\n                transports: ['internal'],\n            },\n        ],\n        userVerification: 'required',\n        extensions: {},\n    };\n\n    const authentication = {\n        isAuthenticationRequired,\n        credentialId,\n        isSignedIn,\n        loading,\n        turnOnAuthentication: () => {\n            // Need to make sure that the credetialId is set\n            // before turning on the authentication requirement\n            // otherwise, user will be locked out of the app\n            // in other words, user must sign up / register first\n            if (credentialId) {\n                setIsAuthenticationRequired(true);\n            }\n        },\n        turnOffAuthentication: () => {\n            setIsAuthenticationRequired(false);\n        },\n\n        signUp: async () => {\n            try {\n                const publicKeyCredential = await navigator.credentials.create({\n                    publicKey: publicKeyCredentialCreationOptions,\n                });\n                if (publicKeyCredential) {\n                    // convert the rawId from ArrayBuffer to base64 String\n                    const base64Id = convertArrayBufferToBase64(\n                        publicKeyCredential.rawId,\n                    );\n                    setIsSignedIn(true);\n                    setCredentialId(base64Id);\n                    setIsAuthenticationRequired(true);\n                } else {\n                    throw new Error(\n                        'Error: navigator.credentials.create() returns null, in signUp()',\n                    );\n                }\n            } catch (err) {\n                throw err;\n            }\n        },\n\n        signIn: async () => {\n            try {\n                const assertion = await navigator.credentials.get({\n                    publicKey: publickKeyRequestOptions,\n                });\n                if (assertion) {\n                    // convert rawId from ArrayBuffer to base64 String\n                    const base64Id = convertArrayBufferToBase64(\n                        assertion.rawId,\n                    );\n                    if (base64Id === credentialId) setIsSignedIn(true);\n                } else {\n                    throw new Error(\n                        'Error: navigator.credentials.get() returns null, signIn()',\n                    );\n                }\n            } catch (err) {\n                throw err;\n            }\n        },\n\n        signOut: () => {\n            setIsSignedIn(false);\n        },\n    };\n\n    // Web Authentication support on a user's device may become unavailable due to various reasons\n    // (hardware failure, OS problems, the behaviour of some authenticators after several failed authentication attempts, etc)\n    // If this is the case, and user has previous enabled the lock, the decision here is to lock up the wallet.\n    // Otherwise, malicious user needs to simply disbale the platform authenticator to gain access to the wallet\n    return !isWebAuthnSupported && !isAuthenticationRequired\n        ? null\n        : authentication;\n};\n\nexport default useWebAuthentication;\n"]},"metadata":{},"sourceType":"module"}