{"ast":null,"code":"/*!\n * coinentry.js - coin entry object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst bio = require('bufio');\n\nconst Coin = require('../primitives/coin');\n\nconst Output = require('../primitives/output');\n\nconst compress = require('./compress');\n\nconst {\n  encoding\n} = bio;\n/*\n * Constants\n */\n\nconst NUM_FLAGS = 1;\nconst MAX_HEIGHT = (1 << 32 - NUM_FLAGS >>> 0) - 1;\n/**\n * Coin Entry\n * Represents an unspent output.\n * @alias module:coins.CoinEntry\n * @property {Number} version - Transaction version.\n * @property {Number} height - Transaction height (-1 if unconfirmed).\n * @property {Boolean} coinbase - Whether the containing\n * transaction is a coinbase.\n * @property {Output} output\n * @property {Boolean} spent\n * @property {Buffer} raw\n */\n\nclass CoinEntry {\n  /**\n   * Create a coin entry.\n   * @constructor\n   */\n  constructor() {\n    this.version = 1;\n    this.height = -1;\n    this.coinbase = false;\n    this.output = new Output();\n    this.spent = false;\n    this.raw = null;\n  }\n  /**\n   * Convert coin entry to an output.\n   * @returns {Output}\n   */\n\n\n  toOutput() {\n    return this.output;\n  }\n  /**\n   * Convert coin entry to a coin.\n   * @param {Outpoint} prevout\n   * @returns {Coin}\n   */\n\n\n  toCoin(prevout) {\n    const coin = new Coin();\n    coin.version = this.version;\n    coin.height = this.height;\n    coin.coinbase = this.coinbase;\n    coin.script = this.output.script;\n    coin.value = this.output.value;\n    coin.hash = prevout.hash;\n    coin.index = prevout.index;\n    return coin;\n  }\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n\n  fromOutput(output) {\n    this.output = output;\n    return this;\n  }\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n\n  static fromOutput(output) {\n    return new this().fromOutput(output);\n  }\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n\n  fromCoin(coin) {\n    this.version = coin.version;\n    this.height = coin.height;\n    this.coinbase = coin.coinbase;\n    this.output.script = coin.script;\n    this.output.value = coin.value;\n    return this;\n  }\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n\n  static fromCoin(coin) {\n    return new this().fromCoin(coin);\n  }\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n\n  fromTX(tx, index, height) {\n    assert(typeof index === 'number');\n    assert(typeof height === 'number');\n    assert(index >= 0 && index < tx.outputs.length);\n    this.version = tx.version;\n    this.height = height;\n    this.coinbase = tx.isCoinbase();\n    this.output = tx.outputs[index];\n    return this;\n  }\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n\n  static fromTX(tx, index, height) {\n    return new this().fromTX(tx, index, height);\n  }\n  /**\n   * Calculate size of coin.\n   * @returns {Number}\n   */\n\n\n  getSize() {\n    if (this.raw) return this.raw.length;\n    let size = 0;\n    size += encoding.sizeVarint(this.version);\n    size += 4;\n    size += compress.size(this.output);\n    return size;\n  }\n  /**\n   * Write the coin to a buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n\n  toWriter(bw) {\n    if (this.raw) {\n      bw.writeBytes(this.raw);\n      return bw;\n    }\n\n    let height = this.height;\n    let field = 0;\n    if (this.coinbase) field |= 1;\n    if (height === -1) height = MAX_HEIGHT;\n    field |= height << NUM_FLAGS;\n    bw.writeVarint(this.version);\n    bw.writeU32(field);\n    compress.pack(this.output, bw);\n    return bw;\n  }\n  /**\n   * Serialize the coin.\n   * @returns {Buffer}\n   */\n\n\n  toRaw() {\n    if (this.raw) return this.raw;\n    const size = this.getSize();\n    const bw = bio.write(size);\n    this.toWriter(bw);\n    this.raw = bw.render();\n    return this.raw;\n  }\n  /**\n   * Inject properties from serialized buffer writer.\n   * @private\n   * @param {BufferReader} br\n   */\n\n\n  fromReader(br) {\n    const version = br.readVarint();\n    const field = br.readU32();\n    let height = field >>> NUM_FLAGS;\n    if (height === MAX_HEIGHT) height = -1;\n    this.version = version;\n    this.coinbase = (field & 1) !== 0;\n    this.height = height;\n    compress.unpack(this.output, br);\n    return this;\n  }\n  /**\n   * Instantiate a coin from a serialized Buffer.\n   * @param {Buffer} data\n   * @returns {CoinEntry}\n   */\n\n\n  static fromReader(data) {\n    return new this().fromReader(data);\n  }\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   */\n\n\n  fromRaw(data) {\n    this.fromReader(bio.read(data));\n    this.raw = data;\n    return this;\n  }\n  /**\n   * Instantiate a coin from a serialized Buffer.\n   * @param {Buffer} data\n   * @returns {CoinEntry}\n   */\n\n\n  static fromRaw(data) {\n    return new this().fromRaw(data);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = CoinEntry;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/coins/coinentry.js"],"names":["assert","require","bio","Coin","Output","compress","encoding","NUM_FLAGS","MAX_HEIGHT","CoinEntry","constructor","version","height","coinbase","output","spent","raw","toOutput","toCoin","prevout","coin","script","value","hash","index","fromOutput","fromCoin","fromTX","tx","outputs","length","isCoinbase","getSize","size","sizeVarint","toWriter","bw","writeBytes","field","writeVarint","writeU32","pack","toRaw","write","render","fromReader","br","readVarint","readU32","unpack","data","fromRaw","read","module","exports"],"mappings":"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","sourcesContent":["/*!\n * coinentry.js - coin entry object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst bio = require('bufio');\nconst Coin = require('../primitives/coin');\nconst Output = require('../primitives/output');\nconst compress = require('./compress');\nconst {encoding} = bio;\n\n/*\n * Constants\n */\n\nconst NUM_FLAGS = 1;\nconst MAX_HEIGHT = ((1 << (32 - NUM_FLAGS)) >>> 0) - 1;\n\n/**\n * Coin Entry\n * Represents an unspent output.\n * @alias module:coins.CoinEntry\n * @property {Number} version - Transaction version.\n * @property {Number} height - Transaction height (-1 if unconfirmed).\n * @property {Boolean} coinbase - Whether the containing\n * transaction is a coinbase.\n * @property {Output} output\n * @property {Boolean} spent\n * @property {Buffer} raw\n */\n\nclass CoinEntry {\n  /**\n   * Create a coin entry.\n   * @constructor\n   */\n\n  constructor() {\n    this.version = 1;\n    this.height = -1;\n    this.coinbase = false;\n    this.output = new Output();\n    this.spent = false;\n    this.raw = null;\n  }\n\n  /**\n   * Convert coin entry to an output.\n   * @returns {Output}\n   */\n\n  toOutput() {\n    return this.output;\n  }\n\n  /**\n   * Convert coin entry to a coin.\n   * @param {Outpoint} prevout\n   * @returns {Coin}\n   */\n\n  toCoin(prevout) {\n    const coin = new Coin();\n    coin.version = this.version;\n    coin.height = this.height;\n    coin.coinbase = this.coinbase;\n    coin.script = this.output.script;\n    coin.value = this.output.value;\n    coin.hash = prevout.hash;\n    coin.index = prevout.index;\n    return coin;\n  }\n\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n  fromOutput(output) {\n    this.output = output;\n    return this;\n  }\n\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n  static fromOutput(output) {\n    return new this().fromOutput(output);\n  }\n\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n  fromCoin(coin) {\n    this.version = coin.version;\n    this.height = coin.height;\n    this.coinbase = coin.coinbase;\n    this.output.script = coin.script;\n    this.output.value = coin.value;\n    return this;\n  }\n\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n  static fromCoin(coin) {\n    return new this().fromCoin(coin);\n  }\n\n  /**\n   * Inject properties from TX.\n   * @param {TX} tx\n   * @param {Number} index\n   */\n\n  fromTX(tx, index, height) {\n    assert(typeof index === 'number');\n    assert(typeof height === 'number');\n    assert(index >= 0 && index < tx.outputs.length);\n    this.version = tx.version;\n    this.height = height;\n    this.coinbase = tx.isCoinbase();\n    this.output = tx.outputs[index];\n    return this;\n  }\n\n  /**\n   * Instantiate a coin from a TX\n   * @param {TX} tx\n   * @param {Number} index - Output index.\n   * @returns {CoinEntry}\n   */\n\n  static fromTX(tx, index, height) {\n    return new this().fromTX(tx, index, height);\n  }\n\n  /**\n   * Calculate size of coin.\n   * @returns {Number}\n   */\n\n  getSize() {\n    if (this.raw)\n      return this.raw.length;\n\n    let size = 0;\n    size += encoding.sizeVarint(this.version);\n    size += 4;\n    size += compress.size(this.output);\n\n    return size;\n  }\n\n  /**\n   * Write the coin to a buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n  toWriter(bw) {\n    if (this.raw) {\n      bw.writeBytes(this.raw);\n      return bw;\n    }\n\n    let height = this.height;\n    let field = 0;\n\n    if (this.coinbase)\n      field |= 1;\n\n    if (height === -1)\n      height = MAX_HEIGHT;\n\n    field |= height << NUM_FLAGS;\n\n    bw.writeVarint(this.version);\n    bw.writeU32(field);\n    compress.pack(this.output, bw);\n\n    return bw;\n  }\n\n  /**\n   * Serialize the coin.\n   * @returns {Buffer}\n   */\n\n  toRaw() {\n    if (this.raw)\n      return this.raw;\n\n    const size = this.getSize();\n    const bw = bio.write(size);\n\n    this.toWriter(bw);\n\n    this.raw = bw.render();\n\n    return this.raw;\n  }\n\n  /**\n   * Inject properties from serialized buffer writer.\n   * @private\n   * @param {BufferReader} br\n   */\n\n  fromReader(br) {\n    const version = br.readVarint();\n    const field = br.readU32();\n\n    let height = field >>> NUM_FLAGS;\n\n    if (height === MAX_HEIGHT)\n      height = -1;\n\n    this.version = version;\n    this.coinbase = (field & 1) !== 0;\n    this.height = height;\n\n    compress.unpack(this.output, br);\n\n    return this;\n  }\n\n  /**\n   * Instantiate a coin from a serialized Buffer.\n   * @param {Buffer} data\n   * @returns {CoinEntry}\n   */\n\n  static fromReader(data) {\n    return new this().fromReader(data);\n  }\n\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   */\n\n  fromRaw(data) {\n    this.fromReader(bio.read(data));\n    this.raw = data;\n    return this;\n  }\n\n  /**\n   * Instantiate a coin from a serialized Buffer.\n   * @param {Buffer} data\n   * @returns {CoinEntry}\n   */\n\n  static fromRaw(data) {\n    return new this().fromRaw(data);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = CoinEntry;\n"]},"metadata":{},"sourceType":"module"}