{"ast":null,"code":"/*!\n * invitem.js - inv item object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst bio = require('bufio');\n\nconst util = require('../utils/util');\n/**\n * Inv Item\n * @alias module:primitives.InvItem\n * @constructor\n * @property {InvType} type\n * @property {Hash} hash\n */\n\n\nclass InvItem {\n  /**\n   * Create an inv item.\n   * @constructor\n   * @param {Number} type\n   * @param {Hash} hash\n   */\n  constructor(type, hash) {\n    this.type = type;\n    this.hash = hash;\n  }\n  /**\n   * Write inv item to buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n\n  getSize() {\n    return 36;\n  }\n  /**\n   * Write inv item to buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n\n  toWriter(bw) {\n    bw.writeU32(this.type);\n    bw.writeHash(this.hash);\n    return bw;\n  }\n  /**\n   * Serialize inv item.\n   * @returns {Buffer}\n   */\n\n\n  toRaw() {\n    return this.toWriter(bio.write(36)).render();\n  }\n  /**\n   * Inject properties from buffer reader.\n   * @private\n   * @param {BufferReader} br\n   */\n\n\n  fromReader(br) {\n    this.type = br.readU32();\n    this.hash = br.readHash();\n    return this;\n  }\n  /**\n   * Inject properties from serialized data.\n   * @param {Buffer} data\n   */\n\n\n  fromRaw(data) {\n    return this.fromReader(bio.read(data));\n  }\n  /**\n   * Instantiate inv item from buffer reader.\n   * @param {BufferReader} br\n   * @returns {InvItem}\n   */\n\n\n  static fromReader(br) {\n    return new this().fromReader(br);\n  }\n  /**\n   * Instantiate inv item from serialized data.\n   * @param {Buffer} data\n   * @param {String?} enc\n   * @returns {InvItem}\n   */\n\n\n  static fromRaw(data, enc) {\n    if (typeof data === 'string') data = Buffer.from(data, enc);\n    return new this().fromRaw(data);\n  }\n  /**\n   * Test whether the inv item is a block.\n   * @returns {Boolean}\n   */\n\n\n  isBlock() {\n    switch (this.type) {\n      case InvItem.types.BLOCK:\n      case InvItem.types.FILTERED_BLOCK:\n      case InvItem.types.CMPCT_BLOCK:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * Test whether the inv item is a tx.\n   * @returns {Boolean}\n   */\n\n\n  isTX() {\n    switch (this.type) {\n      case InvItem.types.TX:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * Get little-endian hash.\n   * @returns {Hash}\n   */\n\n\n  rhash() {\n    return util.revHex(this.hash);\n  }\n\n}\n/**\n * Inv types.\n * @enum {Number}\n * @default\n */\n\n\nInvItem.types = {\n  TX: 1,\n  BLOCK: 2,\n  FILTERED_BLOCK: 3,\n  CMPCT_BLOCK: 4\n};\n/**\n * Inv types by value.\n * @const {Object}\n */\n\nInvItem.typesByVal = {\n  1: 'TX',\n  2: 'BLOCK',\n  3: 'FILTERED_BLOCK',\n  4: 'CMPCT_BLOCK'\n};\n/*\n * Expose\n */\n\nmodule.exports = InvItem;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/primitives/invitem.js"],"names":["bio","require","util","InvItem","constructor","type","hash","getSize","toWriter","bw","writeU32","writeHash","toRaw","write","render","fromReader","br","readU32","readHash","fromRaw","data","read","enc","Buffer","from","isBlock","types","BLOCK","FILTERED_BLOCK","CMPCT_BLOCK","isTX","TX","rhash","revHex","typesByVal","module","exports"],"mappings":"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","sourcesContent":["/*!\n * invitem.js - inv item object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst bio = require('bufio');\nconst util = require('../utils/util');\n\n/**\n * Inv Item\n * @alias module:primitives.InvItem\n * @constructor\n * @property {InvType} type\n * @property {Hash} hash\n */\n\nclass InvItem {\n  /**\n   * Create an inv item.\n   * @constructor\n   * @param {Number} type\n   * @param {Hash} hash\n   */\n\n  constructor(type, hash) {\n    this.type = type;\n    this.hash = hash;\n  }\n\n  /**\n   * Write inv item to buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n  getSize() {\n    return 36;\n  }\n\n  /**\n   * Write inv item to buffer writer.\n   * @param {BufferWriter} bw\n   */\n\n  toWriter(bw) {\n    bw.writeU32(this.type);\n    bw.writeHash(this.hash);\n    return bw;\n  }\n\n  /**\n   * Serialize inv item.\n   * @returns {Buffer}\n   */\n\n  toRaw() {\n    return this.toWriter(bio.write(36)).render();\n  }\n\n  /**\n   * Inject properties from buffer reader.\n   * @private\n   * @param {BufferReader} br\n   */\n\n  fromReader(br) {\n    this.type = br.readU32();\n    this.hash = br.readHash();\n    return this;\n  }\n\n  /**\n   * Inject properties from serialized data.\n   * @param {Buffer} data\n   */\n\n  fromRaw(data) {\n    return this.fromReader(bio.read(data));\n  }\n\n  /**\n   * Instantiate inv item from buffer reader.\n   * @param {BufferReader} br\n   * @returns {InvItem}\n   */\n\n  static fromReader(br) {\n    return new this().fromReader(br);\n  }\n\n  /**\n   * Instantiate inv item from serialized data.\n   * @param {Buffer} data\n   * @param {String?} enc\n   * @returns {InvItem}\n   */\n\n  static fromRaw(data, enc) {\n    if (typeof data === 'string')\n      data = Buffer.from(data, enc);\n    return new this().fromRaw(data);\n  }\n\n  /**\n   * Test whether the inv item is a block.\n   * @returns {Boolean}\n   */\n\n  isBlock() {\n    switch (this.type) {\n      case InvItem.types.BLOCK:\n      case InvItem.types.FILTERED_BLOCK:\n      case InvItem.types.CMPCT_BLOCK:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Test whether the inv item is a tx.\n   * @returns {Boolean}\n   */\n\n  isTX() {\n    switch (this.type) {\n      case InvItem.types.TX:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Get little-endian hash.\n   * @returns {Hash}\n   */\n\n  rhash() {\n    return util.revHex(this.hash);\n  }\n}\n\n/**\n * Inv types.\n * @enum {Number}\n * @default\n */\n\nInvItem.types = {\n  TX: 1,\n  BLOCK: 2,\n  FILTERED_BLOCK: 3,\n  CMPCT_BLOCK: 4\n};\n\n/**\n * Inv types by value.\n * @const {Object}\n */\n\nInvItem.typesByVal = {\n  1: 'TX',\n  2: 'BLOCK',\n  3: 'FILTERED_BLOCK',\n  4: 'CMPCT_BLOCK'\n};\n\n/*\n * Expose\n */\n\nmodule.exports = InvItem;\n"]},"metadata":{},"sourceType":"module"}