{"ast":null,"code":"/*!\n * policy.js - bitcoin constants for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n/**\n * @module protocol/policy\n */\n\nconst assert = require('bsert');\n\nconst consensus = require('./consensus');\n/**\n * Maximum transaction version (policy).\n * @const {Number}\n * @default\n */\n\n\nexports.MAX_TX_VERSION = 2;\n/**\n * Maximum standard transaction size (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIZE = consensus.MAX_TX_SIZE / 10;\n/**\n * Maximum number of transaction sigops (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIGOPS = consensus.MAX_TX_SIGOPS / 5;\n/**\n * How much weight a sigop should\n * add to virtual size (policy).\n * @const {Number}\n * @default\n */\n\nexports.BYTES_PER_SIGOP = 20;\n/**\n * Minimum relay fee rate (policy).\n * @const {Rate}\n */\n\nexports.MIN_RELAY = 1000;\n/**\n * Whether bare multisig outputs\n * should be relayed (policy).\n * @const {Boolean}\n * @default\n */\n\nexports.BARE_MULTISIG = true;\n/**\n * Priority threshold for\n * free transactions (policy).\n * @const {Number}\n * @default\n */\n\nexports.FREE_THRESHOLD = consensus.COIN * 144 / 250;\n/**\n * Max sigops per redeem script (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2SH_SIGOPS = 15;\n/**\n * Max serialized nulldata size (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_OP_RETURN_BYTES = 223;\n/**\n * Max pushdata size in nulldata (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_OP_RETURN = 220;\n/**\n * Max p2wsh stack size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_STACK = 100;\n/**\n * Max p2wsh push size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_PUSH = 80;\n/**\n * Max serialized p2wsh size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_SIZE = 3600;\n/**\n * Default ancestor limit. \n * This has been removed for BCH.\n * Set to absurdly high number as default.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_ANCESTORS = 250000;\n/**\n * Default maximum mempool size in bytes.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_SIZE = 100 * 1000000;\n/**\n * Time at which transactions\n * fall out of the mempool.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_EXPIRY_TIME = 72 * 60 * 60;\n/**\n * Maximum number of orphan transactions.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_ORPHANS = 100;\n/**\n * Minimum block size to create. Block will be\n * filled with free transactions until block\n * reaches this weight.\n * @const {Number}\n * @default\n */\n\nexports.MIN_BLOCK_SIZE = 0;\n/**\n * Maximum block size to be mined.\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIZE = consensus.MAX_FORK_BLOCK_SIZE;\n/**\n * How much of the block should be dedicated to\n * high-priority transactions (included regardless\n * of fee rate).\n * @const {Number}\n * @default\n */\n\nexports.BLOCK_PRIORITY_SIZE = 0;\n/**\n * Priority threshold to be reached before\n * switching to fee rate comparison.\n * @const {Number}\n * @default\n */\n\nexports.BLOCK_PRIORITY_THRESHOLD = exports.FREE_THRESHOLD;\n/**\n * Calculate minimum fee based on rate and size.\n * @param {Number?} size\n * @param {Rate?} rate - Rate of satoshi per kB.\n * @returns {Amount} fee\n */\n\nexports.getMinFee = function getMinFee(size, rate) {\n  if (rate == null) rate = exports.MIN_RELAY;\n  assert(size >= 0);\n  assert(rate >= 0);\n  if (size === 0) return 0;\n  let fee = Math.floor(rate * size / 1000);\n  if (fee === 0 && rate > 0) fee = rate;\n  return fee;\n};\n/**\n * Calculate the minimum fee in order for the transaction\n * to be relayable, but _round to the nearest kilobyte\n * when taking into account size.\n * @param {Number?} size\n * @param {Rate?} rate - Rate of satoshi per kB.\n * @returns {Amount} fee\n */\n\n\nexports.getRoundFee = function getRoundFee(size, rate) {\n  if (rate == null) rate = exports.MIN_RELAY;\n  assert(size >= 0);\n  assert(rate >= 0);\n  if (size === 0) return 0;\n  let fee = rate * Math.ceil(size / 1000);\n  if (fee === 0 && rate > 0) fee = rate;\n  return fee;\n};\n/**\n * Calculate a fee rate based on size and fees.\n * @param {Number} size\n * @param {Amount} fee\n * @returns {Rate}\n */\n\n\nexports.getRate = function getRate(size, fee) {\n  assert(size >= 0);\n  assert(fee >= 0);\n  if (size === 0) return 0;\n  return Math.floor(fee * 1000 / size);\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/protocol/policy.js"],"names":["assert","require","consensus","exports","MAX_TX_VERSION","MAX_TX_SIZE","MAX_TX_SIGOPS","BYTES_PER_SIGOP","MIN_RELAY","BARE_MULTISIG","FREE_THRESHOLD","COIN","MAX_P2SH_SIGOPS","MAX_OP_RETURN_BYTES","MAX_OP_RETURN","MAX_P2WSH_STACK","MAX_P2WSH_PUSH","MAX_P2WSH_SIZE","MEMPOOL_MAX_ANCESTORS","MEMPOOL_MAX_SIZE","MEMPOOL_EXPIRY_TIME","MEMPOOL_MAX_ORPHANS","MIN_BLOCK_SIZE","MAX_BLOCK_SIZE","MAX_FORK_BLOCK_SIZE","BLOCK_PRIORITY_SIZE","BLOCK_PRIORITY_THRESHOLD","getMinFee","size","rate","fee","Math","floor","getRoundFee","ceil","getRate"],"mappings":"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","sourcesContent":["/*!\n * policy.js - bitcoin constants for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\n/**\n * @module protocol/policy\n */\n\nconst assert = require('bsert');\nconst consensus = require('./consensus');\n\n/**\n * Maximum transaction version (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_VERSION = 2;\n\n/**\n * Maximum standard transaction size (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIZE = consensus.MAX_TX_SIZE / 10;\n\n/**\n * Maximum number of transaction sigops (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIGOPS = consensus.MAX_TX_SIGOPS / 5;\n\n/**\n * How much weight a sigop should\n * add to virtual size (policy).\n * @const {Number}\n * @default\n */\n\nexports.BYTES_PER_SIGOP = 20;\n\n/**\n * Minimum relay fee rate (policy).\n * @const {Rate}\n */\n\nexports.MIN_RELAY = 1000;\n\n/**\n * Whether bare multisig outputs\n * should be relayed (policy).\n * @const {Boolean}\n * @default\n */\n\nexports.BARE_MULTISIG = true;\n\n/**\n * Priority threshold for\n * free transactions (policy).\n * @const {Number}\n * @default\n */\n\nexports.FREE_THRESHOLD = consensus.COIN * 144 / 250;\n\n/**\n * Max sigops per redeem script (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2SH_SIGOPS = 15;\n\n/**\n * Max serialized nulldata size (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_OP_RETURN_BYTES = 223;\n\n/**\n * Max pushdata size in nulldata (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_OP_RETURN = 220;\n\n/**\n * Max p2wsh stack size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_STACK = 100;\n\n/**\n * Max p2wsh push size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_PUSH = 80;\n\n/**\n * Max serialized p2wsh size. Used for\n * witness malleation checks (policy).\n * @const {Number}\n * @default\n */\n\nexports.MAX_P2WSH_SIZE = 3600;\n\n/**\n * Default ancestor limit. \n * This has been removed for BCH.\n * Set to absurdly high number as default.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_ANCESTORS = 250000;\n\n/**\n * Default maximum mempool size in bytes.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_SIZE = 100 * 1000000;\n\n/**\n * Time at which transactions\n * fall out of the mempool.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_EXPIRY_TIME = 72 * 60 * 60;\n\n/**\n * Maximum number of orphan transactions.\n * @const {Number}\n * @default\n */\n\nexports.MEMPOOL_MAX_ORPHANS = 100;\n\n/**\n * Minimum block size to create. Block will be\n * filled with free transactions until block\n * reaches this weight.\n * @const {Number}\n * @default\n */\n\nexports.MIN_BLOCK_SIZE = 0;\n\n/**\n * Maximum block size to be mined.\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIZE = consensus.MAX_FORK_BLOCK_SIZE;\n\n/**\n * How much of the block should be dedicated to\n * high-priority transactions (included regardless\n * of fee rate).\n * @const {Number}\n * @default\n */\n\nexports.BLOCK_PRIORITY_SIZE = 0;\n\n/**\n * Priority threshold to be reached before\n * switching to fee rate comparison.\n * @const {Number}\n * @default\n */\n\nexports.BLOCK_PRIORITY_THRESHOLD = exports.FREE_THRESHOLD;\n\n/**\n * Calculate minimum fee based on rate and size.\n * @param {Number?} size\n * @param {Rate?} rate - Rate of satoshi per kB.\n * @returns {Amount} fee\n */\n\nexports.getMinFee = function getMinFee(size, rate) {\n  if (rate == null)\n    rate = exports.MIN_RELAY;\n\n  assert(size >= 0);\n  assert(rate >= 0);\n\n  if (size === 0)\n    return 0;\n\n  let fee = Math.floor(rate * size / 1000);\n\n  if (fee === 0 && rate > 0)\n    fee = rate;\n\n  return fee;\n};\n\n/**\n * Calculate the minimum fee in order for the transaction\n * to be relayable, but _round to the nearest kilobyte\n * when taking into account size.\n * @param {Number?} size\n * @param {Rate?} rate - Rate of satoshi per kB.\n * @returns {Amount} fee\n */\n\nexports.getRoundFee = function getRoundFee(size, rate) {\n  if (rate == null)\n    rate = exports.MIN_RELAY;\n\n  assert(size >= 0);\n  assert(rate >= 0);\n\n  if (size === 0)\n    return 0;\n\n  let fee = rate * Math.ceil(size / 1000);\n\n  if (fee === 0 && rate > 0)\n    fee = rate;\n\n  return fee;\n};\n\n/**\n * Calculate a fee rate based on size and fees.\n * @param {Number} size\n * @param {Amount} fee\n * @returns {Rate}\n */\n\nexports.getRate = function getRate(size, fee) {\n  assert(size >= 0);\n  assert(fee >= 0);\n\n  if (size === 0)\n    return 0;\n\n  return Math.floor(fee * 1000 / size);\n};\n"]},"metadata":{},"sourceType":"module"}