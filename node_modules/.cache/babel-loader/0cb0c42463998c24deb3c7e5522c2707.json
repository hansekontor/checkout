{"ast":null,"code":"/*!\n * cshake128.js - CSHAKE128 implementation for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n'use strict';\n\nconst CSHAKE = require('./cshake');\n/**\n * CSHAKE128\n */\n\n\nclass CSHAKE128 extends CSHAKE {\n  constructor() {\n    super();\n  }\n\n  init(name, pers) {\n    return super.init(128, name, pers);\n  }\n\n  static hash() {\n    return new CSHAKE128();\n  }\n\n  static hmac(name, pers, len) {\n    return super.hmac(128, name, pers, len);\n  }\n\n  static digest(data, name, pers, len) {\n    return super.digest(data, 128, name, pers, len);\n  }\n\n  static root(left, right, name, pers, len) {\n    return super.root(left, right, 128, name, pers, len);\n  }\n\n  static multi(x, y, z, name, pers, len) {\n    return super.multi(x, y, z, 128, name, pers, len);\n  }\n\n  static mac(data, key, name, pers, len) {\n    return super.mac(data, key, 128, name, pers, len);\n  }\n\n}\n/*\n * Static\n */\n\n\nCSHAKE128.native = CSHAKE.native;\nCSHAKE128.id = 'CSHAKE128';\nCSHAKE128.size = 16;\nCSHAKE128.bits = 128;\nCSHAKE128.blockSize = 168;\nCSHAKE128.zero = Buffer.alloc(16, 0x00);\nCSHAKE128.ctx = new CSHAKE128();\n/*\n * Expose\n */\n\nmodule.exports = CSHAKE128;","map":null,"metadata":{},"sourceType":"script"}