{"ast":null,"code":"/*!\n * cipher.js - ciphers for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n\nconst ciphers = require('../internal/ciphers');\n\nconst modes = require('./ciphers/modes');\n\nconst AES = require('./ciphers/aes');\n\nconst Blowfish = require('./ciphers/blowfish');\n\nconst Camellia = require('./ciphers/camellia');\n\nconst CAST5 = require('./ciphers/cast5');\n\nconst {\n  DES,\n  EDE,\n  EDE3\n} = require('./ciphers/des');\n\nconst IDEA = require('./ciphers/idea');\n\nconst RC2 = require('./ciphers/rc2');\n\nconst Twofish = require('./ciphers/twofish');\n/**\n * CipherBase\n */\n\n\nclass CipherBase {\n  constructor(name, encrypt) {\n    assert(typeof name === 'string');\n    assert(typeof encrypt === 'boolean');\n    this.encrypt = encrypt;\n    this.ctx = null;\n\n    this._init(name);\n  }\n\n  _init(name) {\n    assert(typeof name === 'string');\n    const info = ciphers.get(name);\n    const Mode = modes.get(info.mode, this.encrypt);\n\n    switch (info.algorithm) {\n      case 'AES-128':\n      case 'AES-192':\n      case 'AES-256':\n        {\n          const bits = info.keySize * 8;\n          this.ctx = new Mode(new AES(bits));\n          break;\n        }\n\n      case 'BF':\n        {\n          this.ctx = new Mode(new Blowfish());\n          break;\n        }\n\n      case 'CAMELLIA-128':\n      case 'CAMELLIA-192':\n      case 'CAMELLIA-256':\n        {\n          const bits = info.keySize * 8;\n          this.ctx = new Mode(new Camellia(bits));\n          break;\n        }\n\n      case 'CAST5':\n        {\n          this.ctx = new Mode(new CAST5());\n          break;\n        }\n\n      case 'DES':\n        {\n          this.ctx = new Mode(new DES());\n          break;\n        }\n\n      case 'DES-EDE':\n        {\n          this.ctx = new Mode(new EDE());\n          break;\n        }\n\n      case 'DES-EDE3':\n        {\n          this.ctx = new Mode(new EDE3());\n          break;\n        }\n\n      case 'IDEA':\n        {\n          this.ctx = new Mode(new IDEA());\n          break;\n        }\n\n      case 'RC2-64':\n        {\n          this.ctx = new Mode(new RC2());\n          break;\n        }\n\n      case 'TWOFISH-128':\n      case 'TWOFISH-192':\n      case 'TWOFISH-256':\n        {\n          const bits = info.keySize * 8;\n          this.ctx = new Mode(new Twofish(bits));\n          break;\n        }\n\n      default:\n        {\n          throw new Error(`Unsupported cipher: ${info.name}.`);\n        }\n    }\n  }\n\n  init(key, iv) {\n    this.ctx.init(key, iv);\n    return this;\n  }\n\n  update(data) {\n    return this.ctx.update(data);\n  }\n\n  final() {\n    return this.ctx.final();\n  }\n\n  destroy() {\n    this.ctx.destroy();\n    return this;\n  }\n\n  setAAD(data) {\n    this.ctx.setAAD(data);\n    return this;\n  }\n\n  getAuthTag() {\n    return this.ctx.getAuthTag();\n  }\n\n  setAuthTag(tag) {\n    this.ctx.setAuthTag(tag);\n    return this;\n  }\n\n}\n/**\n * Cipher\n * @extends CipherBase\n */\n\n\nclass Cipher extends CipherBase {\n  constructor(name) {\n    super(name, true);\n  }\n\n}\n/**\n * Decipher\n * @extends CipherBase\n */\n\n\nclass Decipher extends CipherBase {\n  constructor(name) {\n    super(name, false);\n  }\n\n}\n/*\n * API\n */\n\n\nfunction encrypt(name, key, iv, data) {\n  const ctx = new Cipher(name);\n  ctx.init(key, iv);\n  return Buffer.concat([ctx.update(data), ctx.final()]);\n}\n\nfunction decrypt(name, key, iv, data) {\n  const ctx = new Decipher(name);\n  ctx.init(key, iv);\n  return Buffer.concat([ctx.update(data), ctx.final()]);\n}\n/*\n * Expose\n */\n\n\nexports.native = 0;\nexports._CipherBase = CipherBase;\nexports.Cipher = Cipher;\nexports.Decipher = Decipher;\nexports.info = ciphers.info;\nexports.get = ciphers.get;\nexports.has = ciphers.has;\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}