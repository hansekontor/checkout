{"ast":null,"code":"/*!\n * safe.js - constant-time equals for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on golang/go:\n *   Copyright (c) 2009 The Go Authors. All rights reserved.\n *   https://github.com/golang/go\n *\n * Resources:\n *   https://github.com/golang/go/blob/master/src/crypto/subtle/constant_time.go\n */\n'use strict';\n\nconst assert = require('./internal/assert');\n/*\n * Safe\n */\n\n\nfunction safeCompare(x, y) {\n  assert(Buffer.isBuffer(x));\n  assert(Buffer.isBuffer(y));\n  if (safeEqualInt(x.length, 0)) return safeEqualInt(y.length, 0); // Assumes `y` is the \"constant size\"\n  // parameter. Note that constant size\n  // doesn't necessarily mean secret.\n  // Assuming we have a constant-size\n  // secret key or passphrase. This\n  // function should be called as:\n  //\n  // if (!safeCompare(input, key))\n  //   throw new Error('Bad passphrase.');\n\n  let v = x.length ^ y.length;\n\n  for (let i = 0; i < y.length; i++) v |= x[i % x.length] ^ y[i];\n\n  return v - 1 >>> 31;\n}\n\nfunction safeEqual(x, y) {\n  assert(Buffer.isBuffer(x));\n  assert(Buffer.isBuffer(y)); // Assumes the lengths of both\n  // `x` and `y` are not secret.\n\n  if (!safeEqualInt(x.length, y.length)) return 0;\n  let v = 0;\n\n  for (let i = 0; i < x.length; i++) v |= x[i] ^ y[i];\n\n  return v - 1 >>> 31;\n}\n\nfunction safeEqualByte(x, y) {\n  return safeEqualInt(x & 0xff, y & 0xff);\n}\n\nfunction safeEqualInt(x, y) {\n  return (x ^ y) - 1 >>> 31;\n}\n\nfunction safeSelect(x, y, v) {\n  return x & v - 1 | y & ~(v - 1);\n}\n\nfunction safeLT(x, y) {\n  return x - y >>> 31;\n}\n\nfunction safeLTE(x, y) {\n  return x - y - 1 >>> 31;\n}\n\nfunction safeGT(x, y) {\n  return y - x >>> 31;\n}\n\nfunction safeGTE(x, y) {\n  return y - x - 1 >>> 31;\n}\n\nfunction safeMin(x, y) {\n  return safeSelect(x, y, safeLT(y, x));\n}\n\nfunction safeMax(x, y) {\n  return safeSelect(x, y, safeGT(y, x));\n}\n\nfunction safeAbs(x) {\n  return (x | 0) * (x >> 31 | 1);\n}\n\nfunction safeBool(x) {\n  return (x >> 31 | -x >> 31) & 1;\n}\n\nfunction safeCopy(x, y, v) {\n  assert(Buffer.isBuffer(x));\n  assert(Buffer.isBuffer(y));\n  assert(safeEqualInt(x.length, y.length));\n  const xmask = v - 1 & 0xff;\n  const ymask = ~(v - 1) & 0xff;\n\n  for (let i = 0; i < x.length; i++) x[i] = x[i] & xmask | y[i] & ymask;\n}\n/*\n * Expose\n */\n\n\nexports.safeCompare = safeCompare;\nexports.safeEqual = safeEqual;\nexports.safeEqualByte = safeEqualByte;\nexports.safeEqualInt = safeEqualInt;\nexports.safeSelect = safeSelect;\nexports.safeLT = safeLT;\nexports.safeLTE = safeLTE;\nexports.safeGT = safeGT;\nexports.safeGTE = safeGTE;\nexports.safeMin = safeMin;\nexports.safeMax = safeMax;\nexports.safeAbs = safeAbs;\nexports.safeBool = safeBool;\nexports.safeCopy = safeCopy;","map":null,"metadata":{},"sourceType":"script"}