{"ast":null,"code":"const bio = require('bufio'); // const bcash = require('@utils/bcash/bcoin');\n\n\nconst MTX = bcash.MTX;\nconst consensus = bcash.consensus;\nconst {\n  hashType\n} = bcash.Script; // const { \n//     SLP,\n//     common: { opcodes }\n// } = bcash.script;\n\nimport { common } from '@utils/bcash/script/common';\nimport { SLP } from '@utils/bcash/script/slp';\n\nconst hash256 = require('bcrypto').Hash256;\n\nconst {\n  i64,\n  u64\n} = require('n64');\n\nexport const authPubKeys = [{\n  tokenId: '7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5',\n  pubkey: '027e6cf8229495afadcb5a7e40365bbc82afcf145eacca3193151e68a61fc81743',\n  imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\n}, {\n  tokenId: '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1',\n  pubkey: '038c4fd8cc7dc08ab835a3b3ec3da08070136fe67b20d893db118a491598cbec84',\n  imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\n}];\nexport const buildOutScript = function (authPubKey) {\n  let checkIsFirstInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const script = new bcash.Script().pushSym('2dup').pushInt(36).pushSym('split').pushSym('drop');\n\n  if (checkIsFirstInput) {\n    script.pushSym('dup');\n    script.pushInt(6);\n    script.pushSym('pick');\n    script.pushInt(104);\n    script.pushSym('split');\n    script.pushSym('drop');\n    script.pushInt(68);\n    script.pushSym('split');\n    script.pushSym('nip');\n    script.pushSym('equalverify');\n  }\n\n  script.pushSym('swap').pushSym('dup').pushInt(78).pushSym('split').pushSym('nip').pushInt(20).pushSym('split').pushSym('drop').pushInt(7).pushSym('pick').pushSym('hash160').pushSym('equalverify').pushInt(132).pushSym('split').pushSym('drop').pushSym('cat').pushInt(3).pushSym('roll').pushSym('swap').pushData(authPubKey).pushSym('checkdatasigverify').pushInt(2).pushSym('roll').pushSym('dup').pushSym('size').pushInt(40).pushSym('sub').pushSym('split').pushSym('swap').pushInt(4).pushSym('split').pushSym('nip').pushInt(32).pushSym('split').pushSym('drop').pushInt(3).pushSym('roll').pushSym('hash256').pushSym('equalverify').pushInt(32).pushSym('split').pushSym('drop').pushSym('rot').pushSym('hash256').pushSym('equalverify').pushSym('sha256').pushSym('3dup').pushSym('rot').pushSym('size').pushSym('1sub').pushSym('split').pushSym('drop').pushSym('swap').pushSym('rot').pushSym('checkdatasigverify').pushSym('drop').pushSym('checksig').compile();\n  return script;\n};\nexport class TXUtil extends MTX {\n  constructor(options) {\n    super(options);\n  }\n  /**\n  * Witness sighashing -- O(n).\n  * @private\n  * @param {Number} index\n  * @param {Script} prev\n  * @param {Amount} value\n  * @param {SighashType} type\n  * @returns {Buffer}\n  */\n\n\n  getPreimage(index, prev, value, type) {\n    let json = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const input = this.inputs[index];\n    let prevouts = consensus.ZERO_HASH;\n    let sequences = consensus.ZERO_HASH;\n    let outputs = consensus.ZERO_HASH;\n\n    if (!(type & hashType.ANYONECANPAY)) {\n      if (this._hashPrevouts) {\n        prevouts = this._hashPrevouts;\n      } else {\n        const bw = bio.pool(this.inputs.length * 36);\n\n        for (const input of this.inputs) input.prevout.toWriter(bw);\n\n        if (json) {\n          const rawPrevouts = this.inputs.map(input => input.prevout.toRaw());\n          prevouts = Buffer.concat(rawPrevouts);\n        } else prevouts = hash256.digest(bw.render());\n\n        if (!this.mutable && !json) this._hashPrevouts = prevouts;\n      }\n    }\n\n    if (!(type & hashType.ANYONECANPAY) && (type & 0x1f) !== hashType.SINGLE && (type & 0x1f) !== hashType.NONE) {\n      if (this._hashSequence) {\n        sequences = this._hashSequence;\n      } else {\n        const bw = bio.pool(this.inputs.length * 4);\n\n        for (const input of this.inputs) bw.writeU32(input.sequence);\n\n        if (json) sequences = bw.render();else sequences = hash256.digest(bw.render());\n        if (!this.mutable && !json) this._hashSequence = sequences;\n      }\n    }\n\n    if ((type & 0x1f) !== hashType.SINGLE && (type & 0x1f) !== hashType.NONE) {\n      if (this._hashOutputs) {\n        outputs = this._hashOutputs;\n      } else {\n        let size = 0;\n\n        for (const output of this.outputs) size += output.getSize();\n\n        const bw = bio.pool(size);\n\n        for (const output of this.outputs) output.toWriter(bw);\n\n        if (json) {\n          const rawOutputs = this.outputs.map(output => output.toRaw());\n          outputs = Buffer.concat(rawOutputs);\n        } else outputs = hash256.digest(bw.render());\n\n        if (!this.mutable && !json) this._hashOutputs = outputs;\n      }\n    } else if ((type & 0x1f) === hashType.SINGLE) {\n      if (index < this.outputs.length) {\n        const output = this.outputs[index];\n        if (json) outputs = output.toRaw();else outputs = hash256.digest(output.toRaw());\n      }\n    }\n\n    if (json) {\n      const locktimeBuf = Buffer.alloc(4);\n      locktimeBuf.writeUInt32LE(this.locktime);\n      const typeBuf = Buffer.alloc(4);\n      typeBuf.writeUInt32LE(type);\n      return {\n        version: this.version,\n        prevouts: prevouts,\n        sequences: sequences,\n        outpoint: input.prevout.toRaw(),\n        scriptCode: prev.toRaw(),\n        inputValue: i64.fromInt(value).toLE(Buffer),\n        inputSequence: input.sequence,\n        outputs: outputs,\n        locktime: locktimeBuf,\n        type: typeBuf\n      };\n    }\n\n    const size = 156 + prev.getVarSize();\n    const bw = bio.pool(size);\n    bw.writeU32(this.version);\n    bw.writeBytes(prevouts);\n    bw.writeBytes(sequences);\n    bw.writeHash(input.prevout.hash);\n    bw.writeU32(input.prevout.index);\n    bw.writeVarBytes(prev.toRaw());\n    bw.writeI64(value);\n    bw.writeU32(input.sequence);\n    bw.writeBytes(outputs);\n    bw.writeU32(this.locktime);\n    bw.writeU32(type);\n    return bw.render();\n  }\n\n}","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/selfMint.js"],"names":["bio","require","MTX","bcash","consensus","hashType","Script","common","SLP","hash256","Hash256","i64","u64","authPubKeys","tokenId","pubkey","imageUrl","buildOutScript","authPubKey","checkIsFirstInput","script","pushSym","pushInt","pushData","compile","TXUtil","constructor","options","getPreimage","index","prev","value","type","json","input","inputs","prevouts","ZERO_HASH","sequences","outputs","ANYONECANPAY","_hashPrevouts","bw","pool","length","prevout","toWriter","rawPrevouts","map","toRaw","Buffer","concat","digest","render","mutable","SINGLE","NONE","_hashSequence","writeU32","sequence","_hashOutputs","size","output","getSize","rawOutputs","locktimeBuf","alloc","writeUInt32LE","locktime","typeBuf","version","outpoint","scriptCode","inputValue","fromInt","toLE","inputSequence","getVarSize","writeBytes","writeHash","hash","writeVarBytes","writeI64"],"mappings":"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","sourcesContent":["const bio = require('bufio');\n// const bcash = require('@utils/bcash/bcoin');\nconst MTX = bcash.MTX;\nconst consensus = bcash.consensus;\nconst { hashType } = bcash.Script;\n// const { \n//     SLP,\n//     common: { opcodes }\n// } = bcash.script;\nimport { common } from '@utils/bcash/script/common';\nimport { SLP } from '@utils/bcash/script/slp';\nconst hash256 = require('bcrypto').Hash256;\nconst { i64, u64 } = require('n64');\n\nexport const authPubKeys = [\n    {\n        tokenId: '7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5',\n        pubkey: '027e6cf8229495afadcb5a7e40365bbc82afcf145eacca3193151e68a61fc81743',\n        imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\n    },\n    {\n      tokenId: '744354f928fa48de87182c4024e2c4acbd3c34f42ce9d679f541213688e584b1',\n      pubkey: '038c4fd8cc7dc08ab835a3b3ec3da08070136fe67b20d893db118a491598cbec84',\n      imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\n    }\n]\n\nexport const buildOutScript = (authPubKey, checkIsFirstInput = false) => {\n    const script = new bcash.Script()\n        .pushSym('2dup')\n        .pushInt(36)\n        .pushSym('split')\n        .pushSym('drop');\n\n        if (checkIsFirstInput) {\n            script.pushSym('dup')\n            script.pushInt(6)\n            script.pushSym('pick')\n            script.pushInt(104)\n            script.pushSym('split')\n            script.pushSym('drop')\n            script.pushInt(68)\n            script.pushSym('split')\n            script.pushSym('nip')\n            script.pushSym('equalverify');\n        }\n\n        script.pushSym('swap')\n        .pushSym('dup')\n        .pushInt(78)\n        .pushSym('split')\n        .pushSym('nip')\n        .pushInt(20)\n        .pushSym('split')\n        .pushSym('drop')\n        .pushInt(7)\n        .pushSym('pick')\n        .pushSym('hash160')\n        .pushSym('equalverify')\n\n        .pushInt(132)\n        .pushSym('split')\n        .pushSym('drop')\n        .pushSym('cat')\n        .pushInt(3)\n        .pushSym('roll')\n        .pushSym('swap')\n        .pushData(authPubKey)\n        .pushSym('checkdatasigverify')\n        .pushInt(2)\n        .pushSym('roll')\n        .pushSym('dup')\n        .pushSym('size')\n        .pushInt(40)\n        .pushSym('sub')\n        .pushSym('split')\n        .pushSym('swap')\n        .pushInt(4)\n        .pushSym('split')\n        .pushSym('nip')\n        .pushInt(32)\n        .pushSym('split')\n        .pushSym('drop')\n        .pushInt(3)\n        .pushSym('roll')\n        .pushSym('hash256')\n        .pushSym('equalverify')\n        .pushInt(32)\n        .pushSym('split')\n        .pushSym('drop')\n        .pushSym('rot')\n        .pushSym('hash256')\n        .pushSym('equalverify')\n        .pushSym('sha256')\n        .pushSym('3dup')\n        .pushSym('rot')\n        .pushSym('size')\n        .pushSym('1sub')\n        .pushSym('split')\n        .pushSym('drop')\n        .pushSym('swap')\n        .pushSym('rot')\n        .pushSym('checkdatasigverify')\n        .pushSym('drop')\n        .pushSym('checksig')\n        .compile();\n\n    return script;\n}\n\nexport class TXUtil extends MTX {\n\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n   * Witness sighashing -- O(n).\n   * @private\n   * @param {Number} index\n   * @param {Script} prev\n   * @param {Amount} value\n   * @param {SighashType} type\n   * @returns {Buffer}\n   */\n\n  getPreimage(index, prev, value, type, json = false) {\n    const input = this.inputs[index];\n    let prevouts = consensus.ZERO_HASH;\n    let sequences = consensus.ZERO_HASH;\n    let outputs = consensus.ZERO_HASH;\n\n    if (!(type & hashType.ANYONECANPAY)) {\n      if (this._hashPrevouts) {\n        prevouts = this._hashPrevouts;\n      } else {\n        const bw = bio.pool(this.inputs.length * 36);\n\n        for (const input of this.inputs)\n          input.prevout.toWriter(bw);\n\n        if (json) {\n          const rawPrevouts= this.inputs.map(input => input.prevout.toRaw());\n          prevouts = Buffer.concat(rawPrevouts);\n        } else\n          prevouts = hash256.digest(bw.render());\n\n        if (!this.mutable && !json)\n          this._hashPrevouts = prevouts;\n      }\n    }\n\n    if (!(type & hashType.ANYONECANPAY)\n        && (type & 0x1f) !== hashType.SINGLE\n        && (type & 0x1f) !== hashType.NONE) {\n      if (this._hashSequence) {\n        sequences = this._hashSequence;\n      } else {\n        const bw = bio.pool(this.inputs.length * 4);\n\n        for (const input of this.inputs)\n          bw.writeU32(input.sequence);\n\n        if (json)\n          sequences = bw.render();\n        else\n          sequences = hash256.digest(bw.render());\n\n        if (!this.mutable && !json)\n          this._hashSequence = sequences;\n      }\n    }\n\n    if ((type & 0x1f) !== hashType.SINGLE\n        && (type & 0x1f) !== hashType.NONE) {\n      if (this._hashOutputs) {\n        outputs = this._hashOutputs;\n      } else {\n        let size = 0;\n\n        for (const output of this.outputs)\n          size += output.getSize();\n\n        const bw = bio.pool(size);\n\n        for (const output of this.outputs)\n          output.toWriter(bw);\n\n        if (json) {\n          const rawOutputs= this.outputs.map(output => output.toRaw());\n          outputs = Buffer.concat(rawOutputs);\n        } else\n          outputs = hash256.digest(bw.render());\n\n        if (!this.mutable && !json)\n          this._hashOutputs = outputs;\n      }\n    } else if ((type & 0x1f) === hashType.SINGLE) {\n      if (index < this.outputs.length) {\n        const output = this.outputs[index];\n        if (json)\n          outputs = output.toRaw();\n        else\n          outputs = hash256.digest(output.toRaw());\n      }\n    }\n\n    if (json) {\n        const locktimeBuf = Buffer.alloc(4);\n        locktimeBuf.writeUInt32LE(this.locktime);\n        const typeBuf = Buffer.alloc(4);\n        typeBuf.writeUInt32LE(type);\n        return {\n            version: this.version,\n            prevouts: prevouts,\n            sequences: sequences,\n            outpoint: input.prevout.toRaw(),\n            scriptCode: prev.toRaw(),\n            inputValue: i64.fromInt(value).toLE(Buffer),\n            inputSequence: input.sequence,\n            outputs: outputs,\n            locktime: locktimeBuf,\n            type: typeBuf  \n        }\n    }\n\n    const size = 156 + prev.getVarSize();\n    const bw = bio.pool(size);\n\n    bw.writeU32(this.version);\n    bw.writeBytes(prevouts);\n    bw.writeBytes(sequences);\n    bw.writeHash(input.prevout.hash);\n    bw.writeU32(input.prevout.index);\n    bw.writeVarBytes(prev.toRaw());\n    bw.writeI64(value);\n    bw.writeU32(input.sequence);\n    bw.writeBytes(outputs);\n    bw.writeU32(this.locktime);\n    bw.writeU32(type);\n\n    return bw.render();\n  }\n}"]},"metadata":{},"sourceType":"module"}