{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable default-case */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { SelectContext } from \"rc-tree-select/es/Context\";\nimport Column from './Column';\nimport { isLeaf, restoreCompatibleValue } from '../util';\nimport CascaderContext from '../context';\nimport useSearchResult from '../hooks/useSearchResult';\nvar RefOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _classNames;\n\n  var prefixCls = props.prefixCls,\n      options = props.options,\n      onSelect = props.onSelect,\n      multiple = props.multiple,\n      open = props.open,\n      flattenOptions = props.flattenOptions,\n      searchValue = props.searchValue,\n      onToggleOpen = props.onToggleOpen,\n      notFoundContent = props.notFoundContent,\n      direction = props.direction;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys;\n\n  var _React$useContext2 = React.useContext(CascaderContext),\n      changeOnSelect = _React$useContext2.changeOnSelect,\n      expandTrigger = _React$useContext2.expandTrigger,\n      fieldNames = _React$useContext2.fieldNames,\n      loadData = _React$useContext2.loadData,\n      search = _React$useContext2.search,\n      dropdownPrefixCls = _React$useContext2.dropdownPrefixCls;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(pathValue) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === pathValue;\n    });\n\n    if (entity && !isLeaf(entity.data.node)) {\n      var _restoreCompatibleVal = restoreCompatibleValue(entity, fieldNames),\n          optionList = _restoreCompatibleVal.options;\n\n      var rawOptionList = optionList.map(function (opt) {\n        return opt.node;\n      });\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [entity.key]);\n      });\n      loadData(rawOptionList);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var option = flattenOptions.find(function (opt) {\n          return opt.value === loadingKey;\n        });\n\n        if (!option || option.data.children || option.data.isLeaf === true) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [flattenOptions, loadingKeys]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(checkedKeys);\n  }, [checkedKeys]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(halfCheckedKeys);\n  }, [halfCheckedKeys]); // =========================== Open ===========================\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openFinalValue = _React$useState4[0],\n      setOpenFinalValue = _React$useState4[1];\n\n  var mergedOpenPath = React.useMemo(function () {\n    if (searchValue) {\n      return openFinalValue !== undefined && openFinalValue !== null ? [openFinalValue] : [];\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === openFinalValue;\n    });\n\n    if (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, fieldNames),\n          path = _restoreCompatibleVal2.path;\n\n      return path;\n    }\n\n    return [];\n  }, [openFinalValue, flattenOptions, searchValue]);\n  React.useEffect(function () {\n    if (open) {\n      var nextOpenPath = null;\n\n      if (!multiple && checkedKeys.length) {\n        var entity = flattenOptions.find(function (flattenOption) {\n          return flattenOption.data.value === checkedKeys[0];\n        });\n\n        if (entity) {\n          nextOpenPath = entity.data.value;\n        }\n      }\n\n      setOpenFinalValue(nextOpenPath);\n    }\n  }, [open]); // =========================== Path ===========================\n\n  var onPathOpen = function onPathOpen(index, pathValue) {\n    setOpenFinalValue(pathValue); // Trigger loadData\n\n    internalLoadData(pathValue);\n  };\n\n  var onPathSelect = function onPathSelect(pathValue, leaf) {\n    onSelect(pathValue, {\n      selected: !checkedSet.has(pathValue)\n    });\n\n    if (!multiple && (leaf || changeOnSelect && expandTrigger === 'hover')) {\n      onToggleOpen(false);\n    }\n  };\n\n  var getPathList = function getPathList(pathList) {\n    var currentOptions = options;\n\n    var _loop = function _loop(i) {\n      currentOptions = (currentOptions || []).find(function (option) {\n        return option.value === pathList[i];\n      }).children;\n    };\n\n    for (var i = 0; i < pathList.length; i += 1) {\n      _loop(i);\n    }\n\n    return currentOptions;\n  }; // ========================== Search ==========================\n\n\n  var searchOptions = useSearchResult(_objectSpread(_objectSpread({}, props), {}, {\n    prefixCls: mergedPrefixCls,\n    fieldNames: fieldNames,\n    changeOnSelect: changeOnSelect,\n    searchConfig: search\n  })); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    if (searchValue) {\n      return [{\n        options: searchOptions\n      }];\n    }\n\n    var rawOptionColumns = [];\n\n    for (var i = 0; i <= mergedOpenPath.length; i += 1) {\n      var subOptions = getPathList(mergedOpenPath.slice(0, i));\n\n      if (subOptions) {\n        rawOptionColumns.push({\n          options: subOptions\n        });\n      } else {\n        break;\n      }\n    }\n\n    return rawOptionColumns;\n  }, [searchValue, searchOptions, mergedOpenPath]); // ========================= Keyboard =========================\n\n  var getActiveOption = function getActiveOption(activeColumnIndex, offset) {\n    var _optionColumns$active;\n\n    var pathActiveValue = mergedOpenPath[activeColumnIndex];\n    var currentOptions = ((_optionColumns$active = optionColumns[activeColumnIndex]) === null || _optionColumns$active === void 0 ? void 0 : _optionColumns$active.options) || [];\n    var activeOptionIndex = currentOptions.findIndex(function (opt) {\n      return opt.value === pathActiveValue;\n    });\n    var len = currentOptions.length; // Last one is special since -1 may back 2 offset\n\n    if (offset === -1 && activeOptionIndex === -1) {\n      activeOptionIndex = len;\n    }\n\n    for (var i = 1; i <= len; i += 1) {\n      var current = (activeOptionIndex + i * offset + len) % len;\n      var option = currentOptions[current];\n\n      if (!option.disabled) {\n        return option;\n      }\n    }\n\n    return null;\n  };\n\n  var prevColumn = function prevColumn() {\n    if (mergedOpenPath.length <= 1) {\n      onToggleOpen(false);\n    }\n\n    setOpenFinalValue(mergedOpenPath[mergedOpenPath.length - 2]);\n  };\n\n  var nextColumn = function nextColumn() {\n    var nextColumnIndex = mergedOpenPath.length;\n    var nextActiveOption = getActiveOption(nextColumnIndex, 1);\n\n    if (nextActiveOption) {\n      onPathOpen(nextColumnIndex, nextActiveOption.value);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                var activeColumnIndex = Math.max(mergedOpenPath.length - 1, 0);\n                var nextActiveOption = getActiveOption(activeColumnIndex, offset);\n\n                if (nextActiveOption) {\n                  var _containerRef$current, _ele$scrollIntoView;\n\n                  var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-value=\\\"\".concat(nextActiveOption.value, \"\\\"]\"));\n                  ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n                    block: 'nearest'\n                  });\n                  onPathOpen(activeColumnIndex, nextActiveOption.value);\n                }\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              var _optionColumns, _optionColumns$option;\n\n              var lastValue = mergedOpenPath[mergedOpenPath.length - 1];\n              var option = (_optionColumns = optionColumns[mergedOpenPath.length - 1]) === null || _optionColumns === void 0 ? void 0 : (_optionColumns$option = _optionColumns.options) === null || _optionColumns$option === void 0 ? void 0 : _optionColumns$option.find(function (opt) {\n                return opt.value === lastValue;\n              }); // Skip when no select\n\n              if (option) {\n                var leaf = isLeaf(option);\n\n                if (multiple || changeOnSelect || leaf) {\n                  onPathSelect(lastValue, leaf);\n                } // Close for changeOnSelect\n\n\n                if (changeOnSelect) {\n                  onToggleOpen(false);\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    onOpen: onPathOpen,\n    onSelect: onPathSelect,\n    onToggleOpen: onToggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys\n  }); // >>>>> Empty\n\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [{\n    title: notFoundContent,\n    value: '__EMPTY__',\n    disabled: true,\n    node: null\n  }]; // >>>>> Columns\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index,\n      index: index\n    }, columnProps, {\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      openKey: mergedOpenPath[index]\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nexport default RefOptionList;","map":null,"metadata":{},"sourceType":"module"}