{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar ArgumentException_1 = require(\"../../ArgumentException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ErrorCorrectionLevelValues;\n\n(function (ErrorCorrectionLevelValues) {\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\r\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\r\n * defined by the QR code standard.</p>\r\n *\r\n * @author Sean Owen\r\n */\n\n\nvar ErrorCorrectionLevel =\n/** @class */\nfunction () {\n  function ErrorCorrectionLevel(value, stringValue, bits\n  /*int*/\n  ) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.bits = bits;\n    ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n    ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n  }\n\n  ErrorCorrectionLevel.prototype.getValue = function () {\n    return this.value;\n  };\n\n  ErrorCorrectionLevel.prototype.getBits = function () {\n    return this.bits;\n  };\n\n  ErrorCorrectionLevel.fromString = function (s) {\n    switch (s) {\n      case 'L':\n        return ErrorCorrectionLevel.L;\n\n      case 'M':\n        return ErrorCorrectionLevel.M;\n\n      case 'Q':\n        return ErrorCorrectionLevel.Q;\n\n      case 'H':\n        return ErrorCorrectionLevel.H;\n\n      default:\n        throw new ArgumentException_1.default(s + 'not available');\n    }\n  };\n\n  ErrorCorrectionLevel.prototype.toString = function () {\n    return this.stringValue;\n  };\n\n  ErrorCorrectionLevel.prototype.equals = function (o) {\n    if (!(o instanceof ErrorCorrectionLevel)) {\n      return false;\n    }\n\n    var other = o;\n    return this.value === other.value;\n  };\n  /**\r\n   * @param bits int containing the two bits encoding a QR Code's error correction level\r\n   * @return ErrorCorrectionLevel representing the encoded error correction level\r\n   */\n\n\n  ErrorCorrectionLevel.forBits = function (bits\n  /*int*/\n  ) {\n    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return ErrorCorrectionLevel.FOR_BITS.get(bits);\n  };\n\n  ErrorCorrectionLevel.FOR_BITS = new Map();\n  ErrorCorrectionLevel.FOR_VALUE = new Map();\n  /** L = ~7% correction */\n\n  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(0\n  /* L */\n  , 'L', 0x01);\n  /** M = ~15% correction */\n\n  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(1\n  /* M */\n  , 'M', 0x00);\n  /** Q = ~25% correction */\n\n  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(2\n  /* Q */\n  , 'Q', 0x03);\n  /** H = ~30% correction */\n\n  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(3\n  /* H */\n  , 'H', 0x02);\n  return ErrorCorrectionLevel;\n}();\n\nexports.default = ErrorCorrectionLevel;","map":null,"metadata":{},"sourceType":"script"}