{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { isLeaf, restoreCompatibleValue } from '../util';\n\nvar defaultFilter = function defaultFilter(search, options, _ref) {\n  var label = _ref.label;\n  return options.some(function (opt) {\n    return String(opt[label]).toLowerCase().includes(search.toLowerCase());\n  });\n};\n\nvar defaultRender = function defaultRender(inputValue, path, prefixCls, fieldNames) {\n  return path.map(function (opt) {\n    return opt[fieldNames.label];\n  }).join(' / ');\n};\n\nexport default function useSearchResult(resultConfig) {\n  var searchConfig = resultConfig.searchConfig,\n      flattenOptions = resultConfig.flattenOptions,\n      fieldNames = resultConfig.fieldNames,\n      changeOnSelect = resultConfig.changeOnSelect,\n      searchValue = resultConfig.searchValue,\n      prefixCls = resultConfig.prefixCls; // ============================== MISC ==============================\n\n  var filterOption = searchConfig.filter || defaultFilter;\n  var renderOption = searchConfig.render || defaultRender; // ============================= Filter =============================\n  // Do filter\n\n  var filteredEntityList = React.useMemo(function () {\n    if (!searchValue) {\n      return [];\n    } // Normalize list\n\n\n    var normalizeList = flattenOptions.map(function (option) {\n      var _restoreCompatibleVal = restoreCompatibleValue(option, fieldNames),\n          options = _restoreCompatibleVal.options;\n\n      var originOptionList = options.map(function (opt) {\n        return opt.node;\n      });\n      return {\n        option: option,\n        originOptionList: originOptionList\n      };\n    }); // Not keep parent node when !changeOnSelect\n\n    if (!changeOnSelect) {\n      normalizeList = normalizeList.filter(function (_ref2) {\n        var option = _ref2.option;\n        return isLeaf(option.data);\n      });\n    } // Filter\n\n\n    var filteredList = [];\n\n    for (var i = 0; i < normalizeList.length; i += 1) {\n      // Perf saving if enabled\n      if (!searchConfig.sort && filteredList.length >= searchConfig.limit) {\n        break;\n      } // Do filter\n\n\n      var optGrp = normalizeList[i];\n\n      if (filterOption(searchValue, optGrp.originOptionList, fieldNames)) {\n        filteredList.push(optGrp);\n      }\n    } // Sort: When searchConfig.sort is enabled. We have to filter all the list\n\n\n    if (searchConfig.sort) {\n      filteredList.sort(function (a, b) {\n        return searchConfig.sort(a.originOptionList, b.originOptionList, searchValue, fieldNames);\n      });\n    }\n\n    return filteredList;\n  }, [flattenOptions, fieldNames, searchValue, filterOption, changeOnSelect, searchConfig]); // ======================== Generate Options ========================\n  // Wrap with connected label\n\n  var options = React.useMemo(function () {\n    return filteredEntityList.map(function (_ref3) {\n      var option = _ref3.option,\n          originOptionList = _ref3.originOptionList;\n      var title = renderOption(searchValue, originOptionList, prefixCls, fieldNames);\n      return _objectSpread(_objectSpread({}, option.data), {}, {\n        title: title\n      });\n    });\n  }, [searchValue, renderOption, filteredEntityList, fieldNames, prefixCls]);\n  return options;\n}","map":null,"metadata":{},"sourceType":"module"}