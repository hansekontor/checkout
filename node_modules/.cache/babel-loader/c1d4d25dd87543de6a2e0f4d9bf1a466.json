{"ast":null,"code":"/*!\n * protowriter.js - protobufs for bcoin\n * Copyright (c) 2016-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst BufferWriter = require('bufio/lib/writer');\n/*\n * Constants\n */\n\n\nconst wireType = {\n  VARINT: 0,\n  FIXED64: 1,\n  DELIMITED: 2,\n  START_GROUP: 3,\n  END_GROUP: 4,\n  FIXED32: 5\n};\n/**\n * ProtoBuf Writer\n * @extends {BufferWriter}\n */\n\nclass ProtoWriter extends BufferWriter {\n  /**\n   * Create a protowriter.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n\n  writeVarint(num) {\n    const size = sizeVarint(num); // Avoid an extra allocation until\n    // we make bufferwriter more hackable.\n    // More insanity here...\n\n    switch (size) {\n      case 6:\n        {\n          const value = slipVarint(num);\n          this.writeU32BE(value / 0x10000 | 0);\n          this.writeU16BE(value & 0xffff);\n          break;\n        }\n\n      case 5:\n        {\n          const value = slipVarint(num);\n          this.writeU32BE(value / 0x100 | 0);\n          this.writeU8(value & 0xff);\n          break;\n        }\n\n      case 4:\n        {\n          const value = slipVarint(num);\n          this.writeU32BE(value);\n          break;\n        }\n\n      case 3:\n        {\n          const value = slipVarint(num);\n          this.writeU16BE(value >> 8);\n          this.writeU8(value & 0xff);\n          break;\n        }\n\n      case 2:\n        {\n          const value = slipVarint(num);\n          this.writeU16BE(value);\n          break;\n        }\n\n      case 1:\n        {\n          const value = slipVarint(num);\n          this.writeU8(value);\n          break;\n        }\n\n      default:\n        {\n          const value = Buffer.allocUnsafe(size);\n\n          _writeVarint(value, num, 0);\n\n          this.writeBytes(value);\n          break;\n        }\n    }\n  }\n\n  writeFieldVarint(tag, value) {\n    const header = tag << 3 | wireType.VARINT;\n    this.writeVarint(header);\n    this.writeVarint(value);\n  }\n\n  writeFieldU64(tag, value) {\n    assert(Number.isSafeInteger(value));\n    this.writeFieldVarint(tag, value);\n  }\n\n  writeFieldU32(tag, value) {\n    assert(value <= 0xffffffff);\n    this.writeFieldVarint(tag, value);\n  }\n\n  writeFieldBytes(tag, data) {\n    const header = tag << 3 | wireType.DELIMITED;\n    this.writeVarint(header);\n    this.writeVarint(data.length);\n    this.writeBytes(data);\n  }\n\n  writeFieldString(tag, data, enc) {\n    if (typeof data === 'string') data = Buffer.from(data, enc || 'utf8');\n    this.writeFieldBytes(tag, data);\n  }\n\n}\n/*\n * Encoding\n */\n\n\nfunction _writeVarint(data, num, off) {\n  assert(Number.isSafeInteger(num), 'Number exceeds 2^53-1.');\n\n  do {\n    assert(off < data.length);\n    let ch = num & 0x7f;\n    num -= num % 0x80;\n    num /= 0x80;\n    if (num !== 0) ch |= 0x80;\n    data[off] = ch;\n    off += 1;\n  } while (num > 0);\n\n  return off;\n}\n\n;\n\nfunction slipVarint(num) {\n  assert(Number.isSafeInteger(num), 'Number exceeds 2^53-1.');\n  let data = 0;\n  let size = 0;\n\n  do {\n    assert(size < 7);\n    let ch = num & 0x7f;\n    num -= num % 0x80;\n    num /= 0x80;\n    if (num !== 0) ch |= 0x80;\n    data *= 256;\n    data += ch;\n    size += 1;\n  } while (num > 0);\n\n  return data;\n}\n\nfunction sizeVarint(num) {\n  assert(Number.isSafeInteger(num), 'Number exceeds 2^53-1.');\n  let size = 0;\n\n  do {\n    num -= num % 0x80;\n    num /= 0x80;\n    size += 1;\n  } while (num > 0);\n\n  return size;\n}\n\n;\n/*\n * Expose\n */\n\nmodule.exports = ProtoWriter;","map":null,"metadata":{},"sourceType":"script"}