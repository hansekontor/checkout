{"ast":null,"code":"/*!\n * ciphers.js - cipher list for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n/* eslint no-prototype-builtins: \"off\" */\n'use strict';\n\nconst assert = require('../internal/assert');\n/*\n * Constants\n */\n\n\nconst ciphers = {\n  'AES-128': [16, 16],\n  'AES-192': [16, 24],\n  'AES-256': [16, 32],\n  'BF': [8, 16],\n  // 4 - 56/72 bytes, pgp default is 16\n  'CAMELLIA-128': [16, 16],\n  'CAMELLIA-192': [16, 24],\n  'CAMELLIA-256': [16, 32],\n  'CAST5': [8, 16],\n  'DES': [8, 8],\n  'DES-EDE': [8, 16],\n  'DES-EDE3': [8, 24],\n  'IDEA': [8, 16],\n  'RC2-64': [8, 8],\n  // 1 - 128 bytes, default is 8\n  'TWOFISH-128': [16, 16],\n  'TWOFISH-192': [16, 24],\n  'TWOFISH-256': [16, 32]\n};\n/**\n * CipherInfo\n */\n\nclass CipherInfo {\n  constructor(name, algorithm, mode, blockSize, keySize, ivSize) {\n    this.name = name;\n    this.algorithm = algorithm;\n    this.mode = mode;\n    this.blockSize = blockSize;\n    this.keySize = keySize;\n    this.ivSize = ivSize;\n  }\n\n}\n/*\n * Ciphers\n */\n\n\nfunction parse(name) {\n  assert(typeof name === 'string');\n  const len = name.length;\n  if (len < 1 || len > 64) throw new Error('Invalid cipher name.');\n  let suffix = null;\n  let mode = null;\n  let algorithm = null;\n  if (len >= 6) suffix = name.substring(len - 4);\n\n  switch (suffix) {\n    case '-ECB':\n      mode = 'ECB';\n      break;\n\n    case '-CBC':\n      mode = 'CBC';\n      break;\n\n    case '-CTR':\n      mode = 'CTR';\n      break;\n\n    case '-CFB':\n      mode = 'CFB';\n      break;\n\n    case '-OFB':\n      mode = 'OFB';\n      break;\n\n    case '-GCM':\n      mode = 'GCM';\n      break;\n\n    default:\n      suffix = null;\n      break;\n  }\n\n  if (suffix) algorithm = name.substring(0, len - 4);else algorithm = name;\n  if (!ciphers.hasOwnProperty(algorithm)) throw new Error(`Unknown cipher: ${name}.`);\n\n  if (mode === 'GCM') {\n    const size = ciphers[algorithm][0];\n    if (size !== 16) throw new Error(`Unsupported mode: ${mode}-${size * 8}.`);\n  }\n\n  return [name, algorithm, mode];\n}\n\nfunction info(cipher) {\n  const [name, algorithm, mode] = parse(cipher);\n  const [blockSize, keySize] = ciphers[algorithm];\n  let ivSize = blockSize;\n  if (!mode || mode === 'ECB') ivSize = 0;\n  return new CipherInfo(name, algorithm, mode, blockSize, keySize, ivSize);\n}\n\nfunction get(cipher) {\n  const c = info(cipher);\n  if (!c.mode) throw new Error('No mode provided for cipher name.');\n  return c;\n}\n\nfunction has(cipher) {\n  assert(typeof cipher === 'string');\n\n  try {\n    const mode = parse(cipher)[2];\n    return mode != null;\n  } catch (e) {\n    return false;\n  }\n}\n/*\n * Expose\n */\n\n\nexports.info = info;\nexports.get = get;\nexports.has = has;","map":null,"metadata":{},"sourceType":"script"}