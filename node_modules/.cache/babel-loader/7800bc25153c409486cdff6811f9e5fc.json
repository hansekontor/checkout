{"ast":null,"code":"/*!\n * base58.js - base58 for bcrypto\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on bitcoin/bitcoin:\n *   Copyright (c) 2009-2019, The Bitcoin Core Developers (MIT License).\n *   Copyright (c) 2009-2019, The Bitcoin Developers (MIT License).\n *   https://github.com/bitcoin/bitcoin\n *\n * Resources:\n *   https://github.com/bitcoin/bitcoin/blob/master/src/base58.cpp\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/*\n * Constants\n */\n\n\nconst CHARSET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst TABLE = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18, 19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, -1, -1, -1, -1, -1];\n/**\n * Encode a base58 string.\n * @param {Buffer} data\n * @returns {String}\n */\n\nfunction encode(data) {\n  assert(Buffer.isBuffer(data));\n  let zeroes = 0;\n  let i = 0;\n\n  for (; i < data.length; i++) {\n    if (data[i] !== 0) break;\n    zeroes += 1;\n  }\n\n  const b58 = Buffer.allocUnsafe((data.length * 138 / 100 | 0) + 1);\n  b58.fill(0);\n  let length = 0;\n\n  for (; i < data.length; i++) {\n    let carry = data[i];\n    let j = 0;\n\n    for (let k = b58.length - 1; k >= 0; k--, j++) {\n      if (carry === 0 && j >= length) break;\n      carry += 256 * b58[k];\n      b58[k] = carry % 58;\n      carry = carry / 58 | 0;\n    }\n\n    assert(carry === 0);\n    length = j;\n  }\n\n  i = b58.length - length;\n\n  while (i < b58.length && b58[i] === 0) i += 1;\n\n  let str = '';\n\n  for (let j = 0; j < zeroes; j++) str += '1';\n\n  for (; i < b58.length; i++) str += CHARSET[b58[i]];\n\n  return str;\n}\n/**\n * Decode a base58 string.\n * @param {String} str\n * @returns {Buffer}\n * @throws on non-base58 character.\n */\n\n\nfunction decode(str) {\n  assert(typeof str === 'string');\n  let zeroes = 0;\n  let i = 0;\n\n  for (; i < str.length; i++) {\n    if (str[i] !== '1') break;\n    zeroes += 1;\n  }\n\n  const b256 = Buffer.allocUnsafe((str.length * 733 / 1000 | 0) + 1);\n  b256.fill(0);\n  let length = 0;\n\n  for (; i < str.length; i++) {\n    const ch = str.charCodeAt(i);\n    const v = ch & 0xff80 ? -1 : TABLE[ch];\n    if (v === -1) throw new Error('Non-base58 character.');\n    let carry = v;\n    let j = 0;\n\n    for (let k = b256.length - 1; k >= 0; k--, j++) {\n      if (carry === 0 && j >= length) break;\n      carry += 58 * b256[k];\n      b256[k] = carry & 0xff;\n      carry >>>= 8;\n    }\n\n    assert(carry === 0);\n    length = j;\n  }\n\n  i = 0;\n\n  while (i < b256.length && b256[i] === 0) i += 1;\n\n  const out = Buffer.allocUnsafe(zeroes + (b256.length - i));\n  let j;\n\n  for (j = 0; j < zeroes; j++) out[j] = 0;\n\n  while (i < b256.length) out[j++] = b256[i++];\n\n  return out;\n}\n/**\n * Test whether the string is a base58 string.\n * @param {String} str\n * @returns {Buffer}\n */\n\n\nfunction test(str) {\n  assert(typeof str === 'string');\n\n  for (let i = 0; i < str.length; i++) {\n    const ch = str.charCodeAt(i);\n    if (ch & 0xff80) return false;\n    if (TABLE[ch] === -1) return false;\n  }\n\n  return true;\n}\n/*\n * Expose\n */\n\n\nexports.native = 0;\nexports.encode = encode;\nexports.decode = decode;\nexports.test = test;","map":null,"metadata":{},"sourceType":"script"}