{"ast":null,"code":"/*!\n * fixed.js - fixed number parsing\n * Copyright (c) 2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n/**\n * Convert int to fixed number string and reduce by a\n * power of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {String} Fixed number string.\n */\n\n\nexports.encode = function encode(num, exp) {\n  assert(Number.isSafeInteger(num), 'Invalid integer value.');\n  let sign = '';\n\n  if (num < 0) {\n    num = -num;\n    sign = '-';\n  }\n\n  const mult = pow10(exp);\n  let lo = num % mult;\n  let hi = (num - lo) / mult;\n  lo = lo.toString(10);\n  hi = hi.toString(10);\n\n  while (lo.length < exp) lo = '0' + lo;\n\n  lo = lo.replace(/0+$/, '');\n  assert(lo.length <= exp, 'Invalid integer value.');\n  if (lo.length === 0) lo = '0';\n  if (exp === 0) return `${sign}${hi}`;\n  return `${sign}${hi}.${lo}`;\n};\n/**\n * Parse a fixed number string and multiply by a\n * power of ten (uses no floating point arithmetic).\n * @param {String} str\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Integer.\n */\n\n\nexports.decode = function decode(str, exp) {\n  assert(typeof str === 'string');\n  assert(str.length <= 32, 'Fixed number string too large.');\n  let sign = 1;\n\n  if (str.length > 0 && str[0] === '-') {\n    str = str.substring(1);\n    sign = -1;\n  }\n\n  let hi = str;\n  let lo = '0';\n  const index = str.indexOf('.');\n\n  if (index !== -1) {\n    hi = str.substring(0, index);\n    lo = str.substring(index + 1);\n  }\n\n  hi = hi.replace(/^0+/, '');\n  lo = lo.replace(/0+$/, '');\n  assert(hi.length <= 16 - exp, 'Fixed number string exceeds 2^53-1.');\n  assert(lo.length <= exp, 'Too many decimal places in fixed number string.');\n  if (hi.length === 0) hi = '0';\n\n  while (lo.length < exp) lo += '0';\n\n  if (lo.length === 0) lo = '0';\n  assert(/^\\d+$/.test(hi) && /^\\d+$/.test(lo), 'Non-numeric characters in fixed number string.');\n  hi = parseInt(hi, 10);\n  lo = parseInt(lo, 10);\n  const mult = pow10(exp);\n  const maxLo = modSafe(mult);\n  const maxHi = divSafe(mult);\n  assert(hi < maxHi || hi === maxHi && lo <= maxLo, 'Fixed number string exceeds 2^53-1.');\n  return sign * (hi * mult + lo);\n};\n/**\n * Convert int to float and reduce by a power\n * of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Double float.\n */\n\n\nexports.toFloat = function toFloat(num, exp) {\n  return parseFloat(exports.encode(num, exp));\n};\n/**\n * Parse a double float number and multiply by a\n * power of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Integer.\n */\n\n\nexports.fromFloat = function fromFloat(num, exp) {\n  assert(typeof num === 'number' && isFinite(num));\n  assert(Number.isSafeInteger(exp));\n  return exports.decode(num.toFixed(exp), exp);\n};\n/*\n * Helpers\n */\n\n\nfunction pow10(exp) {\n  switch (exp) {\n    case 0:\n      return 1;\n\n    case 1:\n      return 10;\n\n    case 2:\n      return 100;\n\n    case 3:\n      return 1000;\n\n    case 4:\n      return 10000;\n\n    case 5:\n      return 100000;\n\n    case 6:\n      return 1000000;\n\n    case 7:\n      return 10000000;\n\n    case 8:\n      return 100000000;\n  }\n\n  throw new Error('Exponent is too large.');\n}\n\nfunction modSafe(mod) {\n  switch (mod) {\n    case 1:\n      return 0;\n\n    case 10:\n      return 1;\n\n    case 100:\n      return 91;\n\n    case 1000:\n      return 991;\n\n    case 10000:\n      return 991;\n\n    case 100000:\n      return 40991;\n\n    case 1000000:\n      return 740991;\n\n    case 10000000:\n      return 4740991;\n\n    case 100000000:\n      return 54740991;\n  }\n\n  throw new Error('Exponent is too large.');\n}\n\nfunction divSafe(div) {\n  switch (div) {\n    case 1:\n      return 9007199254740991;\n\n    case 10:\n      return 900719925474099;\n\n    case 100:\n      return 90071992547409;\n\n    case 1000:\n      return 9007199254740;\n\n    case 10000:\n      return 900719925474;\n\n    case 100000:\n      return 90071992547;\n\n    case 1000000:\n      return 9007199254;\n\n    case 10000000:\n      return 900719925;\n\n    case 100000000:\n      return 90071992;\n  }\n\n  throw new Error('Exponent is too large.');\n}","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/utils/fixed.js"],"names":["assert","require","exports","encode","num","exp","Number","isSafeInteger","sign","mult","pow10","lo","hi","toString","length","replace","decode","str","substring","index","indexOf","test","parseInt","maxLo","modSafe","maxHi","divSafe","toFloat","parseFloat","fromFloat","isFinite","toFixed","Error","mod","div"],"mappings":"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","sourcesContent":["/*!\n * fixed.js - fixed number parsing\n * Copyright (c) 2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\n\n/**\n * Convert int to fixed number string and reduce by a\n * power of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {String} Fixed number string.\n */\n\nexports.encode = function encode(num, exp) {\n  assert(Number.isSafeInteger(num), 'Invalid integer value.');\n\n  let sign = '';\n\n  if (num < 0) {\n    num = -num;\n    sign = '-';\n  }\n\n  const mult = pow10(exp);\n\n  let lo = num % mult;\n  let hi = (num - lo) / mult;\n\n  lo = lo.toString(10);\n  hi = hi.toString(10);\n\n  while (lo.length < exp)\n    lo = '0' + lo;\n\n  lo = lo.replace(/0+$/, '');\n\n  assert(lo.length <= exp, 'Invalid integer value.');\n\n  if (lo.length === 0)\n    lo = '0';\n\n  if (exp === 0)\n    return `${sign}${hi}`;\n\n  return `${sign}${hi}.${lo}`;\n};\n\n/**\n * Parse a fixed number string and multiply by a\n * power of ten (uses no floating point arithmetic).\n * @param {String} str\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Integer.\n */\n\nexports.decode = function decode(str, exp) {\n  assert(typeof str === 'string');\n  assert(str.length <= 32, 'Fixed number string too large.');\n\n  let sign = 1;\n\n  if (str.length > 0 && str[0] === '-') {\n    str = str.substring(1);\n    sign = -1;\n  }\n\n  let hi = str;\n  let lo = '0';\n\n  const index = str.indexOf('.');\n\n  if (index !== -1) {\n    hi = str.substring(0, index);\n    lo = str.substring(index + 1);\n  }\n\n  hi = hi.replace(/^0+/, '');\n  lo = lo.replace(/0+$/, '');\n\n  assert(hi.length <= 16 - exp,\n    'Fixed number string exceeds 2^53-1.');\n\n  assert(lo.length <= exp,\n    'Too many decimal places in fixed number string.');\n\n  if (hi.length === 0)\n    hi = '0';\n\n  while (lo.length < exp)\n    lo += '0';\n\n  if (lo.length === 0)\n    lo = '0';\n\n  assert(/^\\d+$/.test(hi) && /^\\d+$/.test(lo),\n    'Non-numeric characters in fixed number string.');\n\n  hi = parseInt(hi, 10);\n  lo = parseInt(lo, 10);\n\n  const mult = pow10(exp);\n  const maxLo = modSafe(mult);\n  const maxHi = divSafe(mult);\n\n  assert(hi < maxHi || (hi === maxHi && lo <= maxLo),\n    'Fixed number string exceeds 2^53-1.');\n\n  return sign * (hi * mult + lo);\n};\n\n/**\n * Convert int to float and reduce by a power\n * of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Double float.\n */\n\nexports.toFloat = function toFloat(num, exp) {\n  return parseFloat(exports.encode(num, exp));\n};\n\n/**\n * Parse a double float number and multiply by a\n * power of ten (uses no floating point arithmetic).\n * @param {Number} num\n * @param {Number} exp - Number of decimal places.\n * @returns {Number} Integer.\n */\n\nexports.fromFloat = function fromFloat(num, exp) {\n  assert(typeof num === 'number' && isFinite(num));\n  assert(Number.isSafeInteger(exp));\n  return exports.decode(num.toFixed(exp), exp);\n};\n\n/*\n * Helpers\n */\n\nfunction pow10(exp) {\n  switch (exp) {\n    case 0:\n      return 1;\n    case 1:\n      return 10;\n    case 2:\n      return 100;\n    case 3:\n      return 1000;\n    case 4:\n      return 10000;\n    case 5:\n      return 100000;\n    case 6:\n      return 1000000;\n    case 7:\n      return 10000000;\n    case 8:\n      return 100000000;\n  }\n  throw new Error('Exponent is too large.');\n}\n\nfunction modSafe(mod) {\n  switch (mod) {\n    case 1:\n      return 0;\n    case 10:\n      return 1;\n    case 100:\n      return 91;\n    case 1000:\n      return 991;\n    case 10000:\n      return 991;\n    case 100000:\n      return 40991;\n    case 1000000:\n      return 740991;\n    case 10000000:\n      return 4740991;\n    case 100000000:\n      return 54740991;\n  }\n  throw new Error('Exponent is too large.');\n}\n\nfunction divSafe(div) {\n  switch (div) {\n    case 1:\n      return 9007199254740991;\n    case 10:\n      return 900719925474099;\n    case 100:\n      return 90071992547409;\n    case 1000:\n      return 9007199254740;\n    case 10000:\n      return 900719925474;\n    case 100000:\n      return 90071992547;\n    case 1000000:\n      return 9007199254;\n    case 10000000:\n      return 900719925;\n    case 100000000:\n      return 90071992;\n  }\n  throw new Error('Exponent is too large.');\n}\n"]},"metadata":{},"sourceType":"module"}