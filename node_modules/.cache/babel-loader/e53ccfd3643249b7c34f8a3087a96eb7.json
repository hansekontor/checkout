{"ast":null,"code":"/*!\n * timedata.js - time management for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst util = require('../utils/util');\n\nconst binary = require('../utils/binary');\n/**\n * Time Data\n * An object which handles \"adjusted time\". This may not\n * look it, but this is actually a semi-consensus-critical\n * piece of code. It handles version packets from peers\n * and calculates what to offset our system clock's time by.\n * @alias module:protocol.TimeData\n * @extends EventEmitter\n * @property {Array} samples\n * @property {Object} known\n * @property {Number} limit\n * @property {Number} offset\n */\n\n\nclass TimeData extends EventEmitter {\n  /**\n   * Create time data.\n   * @constructor\n   * @param {Number} [limit=200]\n   */\n  constructor(limit) {\n    super();\n    if (limit == null) limit = 200;\n    this.samples = [];\n    this.known = new Map();\n    this.limit = limit;\n    this.offset = 0;\n    this.checked = false;\n  }\n  /**\n   * Add time data.\n   * @param {String} id\n   * @param {Number} time\n   */\n\n\n  add(id, time) {\n    if (this.samples.length >= this.limit) return;\n    if (this.known.has(id)) return;\n    const sample = time - util.now();\n    this.known.set(id, sample);\n    binary.insert(this.samples, sample, compare);\n    this.emit('sample', sample, this.samples.length);\n\n    if (this.samples.length >= 5 && this.samples.length % 2 === 1) {\n      let median = this.samples[this.samples.length >>> 1];\n\n      if (Math.abs(median) >= 70 * 60) {\n        if (!this.checked) {\n          let match = false;\n\n          for (const offset of this.samples) {\n            if (offset !== 0 && Math.abs(offset) < 5 * 60) {\n              match = true;\n              break;\n            }\n          }\n\n          if (!match) {\n            this.checked = true;\n            this.emit('mismatch');\n          }\n        }\n\n        median = 0;\n      }\n\n      this.offset = median;\n      this.emit('offset', this.offset);\n    }\n  }\n  /**\n   * Get the current adjusted time.\n   * @returns {Number} Adjusted Time.\n   */\n\n\n  now() {\n    return util.now() + this.offset;\n  }\n  /**\n   * Adjust a timestamp.\n   * @param {Number} time\n   * @returns {Number} Adjusted Time.\n   */\n\n\n  adjust(time) {\n    return time + this.offset;\n  }\n  /**\n   * Unadjust a timestamp.\n   * @param {Number} time\n   * @returns {Number} Local Time.\n   */\n\n\n  local(time) {\n    return time - this.offset;\n  }\n  /**\n   * Get the current adjusted time in milliseconds.\n   * @returns {Number} Adjusted Time.\n   */\n\n\n  ms() {\n    return Date.now() + this.offset * 1000;\n  }\n\n}\n/*\n * Helpers\n */\n\n\nfunction compare(a, b) {\n  return a - b;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = TimeData;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/protocol/timedata.js"],"names":["EventEmitter","require","util","binary","TimeData","constructor","limit","samples","known","Map","offset","checked","add","id","time","length","has","sample","now","set","insert","compare","emit","median","Math","abs","match","adjust","local","ms","Date","a","b","module","exports"],"mappings":"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","sourcesContent":["/*!\n * timedata.js - time management for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst util = require('../utils/util');\nconst binary = require('../utils/binary');\n\n/**\n * Time Data\n * An object which handles \"adjusted time\". This may not\n * look it, but this is actually a semi-consensus-critical\n * piece of code. It handles version packets from peers\n * and calculates what to offset our system clock's time by.\n * @alias module:protocol.TimeData\n * @extends EventEmitter\n * @property {Array} samples\n * @property {Object} known\n * @property {Number} limit\n * @property {Number} offset\n */\n\nclass TimeData extends EventEmitter {\n  /**\n   * Create time data.\n   * @constructor\n   * @param {Number} [limit=200]\n   */\n\n  constructor(limit) {\n    super();\n\n    if (limit == null)\n      limit = 200;\n\n    this.samples = [];\n    this.known = new Map();\n    this.limit = limit;\n    this.offset = 0;\n    this.checked = false;\n  }\n\n  /**\n   * Add time data.\n   * @param {String} id\n   * @param {Number} time\n   */\n\n  add(id, time) {\n    if (this.samples.length >= this.limit)\n      return;\n\n    if (this.known.has(id))\n      return;\n\n    const sample = time - util.now();\n\n    this.known.set(id, sample);\n\n    binary.insert(this.samples, sample, compare);\n\n    this.emit('sample', sample, this.samples.length);\n\n    if (this.samples.length >= 5 && this.samples.length % 2 === 1) {\n      let median = this.samples[this.samples.length >>> 1];\n\n      if (Math.abs(median) >= 70 * 60) {\n        if (!this.checked) {\n          let match = false;\n\n          for (const offset of this.samples) {\n            if (offset !== 0 && Math.abs(offset) < 5 * 60) {\n              match = true;\n              break;\n            }\n          }\n\n          if (!match) {\n            this.checked = true;\n            this.emit('mismatch');\n          }\n        }\n\n        median = 0;\n      }\n\n      this.offset = median;\n      this.emit('offset', this.offset);\n    }\n  }\n\n  /**\n   * Get the current adjusted time.\n   * @returns {Number} Adjusted Time.\n   */\n\n  now() {\n    return util.now() + this.offset;\n  }\n\n  /**\n   * Adjust a timestamp.\n   * @param {Number} time\n   * @returns {Number} Adjusted Time.\n   */\n\n  adjust(time) {\n    return time + this.offset;\n  }\n\n  /**\n   * Unadjust a timestamp.\n   * @param {Number} time\n   * @returns {Number} Local Time.\n   */\n\n  local(time) {\n    return time - this.offset;\n  }\n\n  /**\n   * Get the current adjusted time in milliseconds.\n   * @returns {Number} Adjusted Time.\n   */\n\n  ms() {\n    return Date.now() + this.offset * 1000;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction compare(a, b) {\n  return a - b;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = TimeData;\n"]},"metadata":{},"sourceType":"module"}