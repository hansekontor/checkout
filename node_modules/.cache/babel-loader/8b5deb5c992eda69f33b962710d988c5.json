{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { currency, isValidTokenPrefix } from '@components/Common/Ticker.js';\nimport { fromSmallestDenomination } from '@utils/cashMethods'; // Validate cash amount\n\nexport const shouldRejectAmountInput = (cashAmount, selectedCurrency, fiatPrice, totalCashBalance) => {\n  // Take cashAmount as input, a string from form input\n  let error = false;\n  let testedAmount = new BigNumber(cashAmount);\n\n  if (selectedCurrency !== currency.ticker) {\n    // Ensure no more than currency.cashDecimals decimal places\n    testedAmount = new BigNumber(fiatToCrypto(cashAmount, fiatPrice));\n  } // Validate value for > 0\n\n\n  if (isNaN(testedAmount)) {\n    error = 'Amount must be a number';\n  } else if (testedAmount.lte(0)) {\n    error = 'Amount must be greater than 0';\n  } else if (testedAmount.lt(fromSmallestDenomination(currency.dustSats).toString())) {\n    error = `Send amount must be at least ${fromSmallestDenomination(currency.dustSats).toString()} ${currency.ticker}`;\n  } else if (testedAmount.gt(totalCashBalance)) {\n    error = `Amount cannot exceed your ${currency.ticker} balance`;\n  } else if (!isNaN(testedAmount) && testedAmount.toString().includes('.')) {\n    if (testedAmount.toString().split('.')[1].length > currency.cashDecimals) {\n      error = `${currency.ticker} transactions do not support more than ${currency.cashDecimals} decimal places`;\n    }\n  } // return false if no error, or string error msg if error\n\n\n  return error;\n};\nexport const fiatToCrypto = function (fiatAmount, fiatPrice) {\n  let cashDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currency.cashDecimals;\n  let cryptoAmount = new BigNumber(fiatAmount).div(new BigNumber(fiatPrice)).toFixed(cashDecimals);\n  return cryptoAmount;\n};\nexport const isValidTokenName = tokenName => {\n  return typeof tokenName === 'string' && tokenName.length > 0 && tokenName.length < 68;\n};\nexport const isValidTokenTicker = tokenTicker => {\n  return typeof tokenTicker === 'string' && tokenTicker.length > 0 && tokenTicker.length < 13;\n};\nexport const isValidTokenDecimals = tokenDecimals => {\n  return ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(tokenDecimals);\n};\nexport const isValidTokenInitialQty = (tokenInitialQty, tokenDecimals) => {\n  const minimumQty = new BigNumber(1 / 10 ** tokenDecimals);\n  const tokenIntialQtyBig = new BigNumber(tokenInitialQty);\n  return tokenIntialQtyBig.gte(minimumQty) && tokenIntialQtyBig.lt(100000000000) && tokenIntialQtyBig.dp() <= tokenDecimals;\n};\nexport const isValidTokenDocumentUrl = tokenDocumentUrl => {\n  return typeof tokenDocumentUrl === 'string' && tokenDocumentUrl.length >= 0 && tokenDocumentUrl.length < 68;\n};\nexport const isValidTokenStats = tokenStats => {\n  return typeof tokenStats === 'object' && 'timestampUnix' in tokenStats && 'documentUri' in tokenStats && 'containsBaton' in tokenStats && 'initialTokenQty' in tokenStats && 'totalMinted' in tokenStats && 'totalBurned' in tokenStats && 'circulatingSupply' in tokenStats;\n};\nexport const isValidCashtabSettings = settings => {\n  try {\n    const isValid = typeof settings === 'object' && Object.prototype.hasOwnProperty.call(settings, 'fiatCurrency') && currency.settingsValidation.fiatCurrency.includes(settings.fiatCurrency);\n    return isValid;\n  } catch (err) {\n    return false;\n  }\n};\nexport const formatSavedBalance = (swBalance, optionalLocale) => {\n  try {\n    if (swBalance === undefined) {\n      return 'N/A';\n    } else {\n      if (optionalLocale === undefined) {\n        return new Number(swBalance).toLocaleString({\n          maximumFractionDigits: currency.cashDecimals\n        });\n      } else {\n        return new Number(swBalance).toLocaleString(optionalLocale, {\n          maximumFractionDigits: currency.cashDecimals\n        });\n      }\n    }\n  } catch (err) {\n    return 'N/A';\n  }\n};\nexport const formatFiatBalance = (fiatBalance, optionalLocale) => {\n  try {\n    if (fiatBalance === 0) {\n      return Number(fiatBalance).toFixed(currency.cashDecimals);\n    }\n\n    if (optionalLocale === undefined) {\n      return fiatBalance.toLocaleString({\n        maximumFractionDigits: currency.cashDecimals\n      });\n    }\n\n    return fiatBalance.toLocaleString(optionalLocale, {\n      maximumFractionDigits: currency.cashDecimals\n    });\n  } catch (err) {\n    return fiatBalance;\n  }\n};\nexport const isValidSendToMany = (addressInfo, valueString, ticker) => {\n  let isValidInput = true;\n\n  try {\n    if (addressInfo === null || addressInfo === undefined) {\n      return 'invalid address input';\n    } else if (valueString === null || valueString === undefined) {\n      return 'invalid value input';\n    } else if (ticker === null || ticker === undefined) {\n      return 'invalid ticker input';\n    }\n\n    const {\n      address,\n      isValid,\n      queryString,\n      amount\n    } = addressInfo; // Is this valid address?\n\n    if (!isValid) {\n      isValidInput = `Invalid ${ticker} address`; // If valid address but token format\n\n      if (isValidTokenPrefix(address)) {\n        isValidInput = `Token addresses are not supported for ${ticker} sends`;\n      } // Is this send value above minimum\n\n    } else if (valueString < 5.5) {\n      // value can only be XEC ticker in multi recipient mode\n      isValidInput = `Send amount must be at least 5.5 XEC`;\n    }\n\n    return isValidInput;\n  } catch (err) {\n    return err;\n  }\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/validation.js"],"names":["BigNumber","currency","isValidTokenPrefix","fromSmallestDenomination","shouldRejectAmountInput","cashAmount","selectedCurrency","fiatPrice","totalCashBalance","error","testedAmount","ticker","fiatToCrypto","isNaN","lte","lt","dustSats","toString","gt","includes","split","length","cashDecimals","fiatAmount","cryptoAmount","div","toFixed","isValidTokenName","tokenName","isValidTokenTicker","tokenTicker","isValidTokenDecimals","tokenDecimals","isValidTokenInitialQty","tokenInitialQty","minimumQty","tokenIntialQtyBig","gte","dp","isValidTokenDocumentUrl","tokenDocumentUrl","isValidTokenStats","tokenStats","isValidCashtabSettings","settings","isValid","Object","prototype","hasOwnProperty","call","settingsValidation","fiatCurrency","err","formatSavedBalance","swBalance","optionalLocale","undefined","Number","toLocaleString","maximumFractionDigits","formatFiatBalance","fiatBalance","isValidSendToMany","addressInfo","valueString","isValidInput","address","queryString","amount"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { currency, isValidTokenPrefix } from '@components/Common/Ticker.js';\nimport { fromSmallestDenomination } from '@utils/cashMethods';\n\n// Validate cash amount\nexport const shouldRejectAmountInput = (\n    cashAmount,\n    selectedCurrency,\n    fiatPrice,\n    totalCashBalance,\n) => {\n    // Take cashAmount as input, a string from form input\n    let error = false;\n    let testedAmount = new BigNumber(cashAmount);\n\n    if (selectedCurrency !== currency.ticker) {\n        // Ensure no more than currency.cashDecimals decimal places\n        testedAmount = new BigNumber(fiatToCrypto(cashAmount, fiatPrice));\n    }\n\n    // Validate value for > 0\n    if (isNaN(testedAmount)) {\n        error = 'Amount must be a number';\n    } else if (testedAmount.lte(0)) {\n        error = 'Amount must be greater than 0';\n    } else if (\n        testedAmount.lt(fromSmallestDenomination(currency.dustSats).toString())\n    ) {\n        error = `Send amount must be at least ${fromSmallestDenomination(\n            currency.dustSats,\n        ).toString()} ${currency.ticker}`;\n    } else if (testedAmount.gt(totalCashBalance)) {\n        error = `Amount cannot exceed your ${currency.ticker} balance`;\n    } else if (!isNaN(testedAmount) && testedAmount.toString().includes('.')) {\n        if (\n            testedAmount.toString().split('.')[1].length > currency.cashDecimals\n        ) {\n            error = `${currency.ticker} transactions do not support more than ${currency.cashDecimals} decimal places`;\n        }\n    }\n    // return false if no error, or string error msg if error\n    return error;\n};\n\nexport const fiatToCrypto = (\n    fiatAmount,\n    fiatPrice,\n    cashDecimals = currency.cashDecimals,\n) => {\n    let cryptoAmount = new BigNumber(fiatAmount)\n        .div(new BigNumber(fiatPrice))\n        .toFixed(cashDecimals);\n    return cryptoAmount;\n};\n\nexport const isValidTokenName = tokenName => {\n    return (\n        typeof tokenName === 'string' &&\n        tokenName.length > 0 &&\n        tokenName.length < 68\n    );\n};\n\nexport const isValidTokenTicker = tokenTicker => {\n    return (\n        typeof tokenTicker === 'string' &&\n        tokenTicker.length > 0 &&\n        tokenTicker.length < 13\n    );\n};\n\nexport const isValidTokenDecimals = tokenDecimals => {\n    return ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(\n        tokenDecimals,\n    );\n};\n\nexport const isValidTokenInitialQty = (tokenInitialQty, tokenDecimals) => {\n    const minimumQty = new BigNumber(1 / 10 ** tokenDecimals);\n    const tokenIntialQtyBig = new BigNumber(tokenInitialQty);\n    return (\n        tokenIntialQtyBig.gte(minimumQty) &&\n        tokenIntialQtyBig.lt(100000000000) &&\n        tokenIntialQtyBig.dp() <= tokenDecimals\n    );\n};\n\nexport const isValidTokenDocumentUrl = tokenDocumentUrl => {\n    return (\n        typeof tokenDocumentUrl === 'string' &&\n        tokenDocumentUrl.length >= 0 &&\n        tokenDocumentUrl.length < 68\n    );\n};\n\nexport const isValidTokenStats = tokenStats => {\n    return (\n        typeof tokenStats === 'object' &&\n        'timestampUnix' in tokenStats &&\n        'documentUri' in tokenStats &&\n        'containsBaton' in tokenStats &&\n        'initialTokenQty' in tokenStats &&\n        'totalMinted' in tokenStats &&\n        'totalBurned' in tokenStats &&\n        'circulatingSupply' in tokenStats\n    );\n};\n\nexport const isValidCashtabSettings = settings => {\n    try {\n        const isValid =\n            typeof settings === 'object' &&\n            Object.prototype.hasOwnProperty.call(settings, 'fiatCurrency') &&\n            currency.settingsValidation.fiatCurrency.includes(\n                settings.fiatCurrency,\n            );\n        return isValid;\n    } catch (err) {\n        return false;\n    }\n};\n\nexport const formatSavedBalance = (swBalance, optionalLocale) => {\n    try {\n        if (swBalance === undefined) {\n            return 'N/A';\n        } else {\n            if (optionalLocale === undefined) {\n                return new Number(swBalance).toLocaleString({\n                    maximumFractionDigits: currency.cashDecimals,\n                });\n            } else {\n                return new Number(swBalance).toLocaleString(optionalLocale, {\n                    maximumFractionDigits: currency.cashDecimals,\n                });\n            }\n        }\n    } catch (err) {\n        return 'N/A';\n    }\n};\n\nexport const formatFiatBalance = (fiatBalance, optionalLocale) => {\n    try {\n        if (fiatBalance === 0) {\n            return Number(fiatBalance).toFixed(currency.cashDecimals);\n        }\n        if (optionalLocale === undefined) {\n            return fiatBalance.toLocaleString({\n                maximumFractionDigits: currency.cashDecimals,\n            });\n        }\n        return fiatBalance.toLocaleString(optionalLocale, {\n            maximumFractionDigits: currency.cashDecimals,\n        });\n    } catch (err) {\n        return fiatBalance;\n    }\n};\n\nexport const isValidSendToMany = (addressInfo, valueString, ticker) => {\n    let isValidInput = true;\n\n    try {\n        if (addressInfo === null || addressInfo === undefined) {\n            return 'invalid address input';\n        } else if (valueString === null || valueString === undefined) {\n            return 'invalid value input';\n        } else if (ticker === null || ticker === undefined) {\n            return 'invalid ticker input';\n        }\n\n        const { address, isValid, queryString, amount } = addressInfo;\n\n        // Is this valid address?\n        if (!isValid) {\n            isValidInput = `Invalid ${ticker} address`;\n            // If valid address but token format\n            if (isValidTokenPrefix(address)) {\n                isValidInput = `Token addresses are not supported for ${ticker} sends`;\n            }\n            // Is this send value above minimum\n        } else if (valueString < 5.5) {\n            // value can only be XEC ticker in multi recipient mode\n            isValidInput = `Send amount must be at least 5.5 XEC`;\n        }\n        return isValidInput;\n    } catch (err) {\n        return err;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}