{"ast":null,"code":"/*!\n * pk.js - public key algorithms for bcoin\n * Copyright (c) 2016-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst SHA224 = require('bcrypto/lib/sha224');\n\nconst SHA256 = require('bcrypto/lib/sha256');\n\nconst SHA384 = require('bcrypto/lib/sha384');\n\nconst SHA512 = require('bcrypto/lib/sha512');\n\nconst rsa = require('bcrypto/lib/rsa');\n\nconst p224 = require('bcrypto/lib/p224');\n\nconst p256 = require('bcrypto/lib/p256');\n\nconst p384 = require('bcrypto/lib/p384');\n\nconst p521 = require('bcrypto/lib/p521');\n/**\n * Verify signature with public key.\n * @param {String} alg - Hash algorithm.\n * @param {Buffer} msg\n * @param {Buffer} sig\n * @param {Object} key\n * @returns {Boolean}\n */\n\n\nexports.verify = function verify(alg, msg, sig, key) {\n  const hash = getHash(alg);\n  if (!hash) return false;\n\n  switch (key.alg) {\n    case 'rsa':\n      {\n        return rsa.verify(hash, hash.digest(msg), sig, key.data);\n      }\n\n    case 'ecdsa':\n      {\n        const ec = getCurve(key.curve);\n        if (!ec) return false;\n        return ec.verifyDER(hash.digest(msg), sig, key.data);\n      }\n\n    default:\n      {\n        throw new Error(`Unsupported algorithm: ${key.alg}.`);\n      }\n  }\n};\n/**\n * Sign message with private key.\n * @param {String} alg - Hash algorithm.\n * @param {Buffer} msg\n * @param {Object} key\n * @returns {Buffer}\n */\n\n\nexports.sign = function sign(alg, msg, key) {\n  const hash = getHash(alg);\n  if (!hash) throw new Error(`Unsupported hash algorithm: ${alg}.`);\n\n  switch (key.alg) {\n    case 'rsa':\n      {\n        return rsa.sign(hash, hash.digest(msg), key.data);\n      }\n\n    case 'ecdsa':\n      {\n        const ec = getCurve(key.curve);\n        if (!ec) throw new Error(`Unsupported curve: ${key.curve}.`);\n        return ec.signDER(hash.digest(msg), key.data);\n      }\n\n    default:\n      {\n        throw new Error(`Unsupported algorithm: ${key.alg}.`);\n      }\n  }\n};\n/*\n * Helpers\n */\n\n\nfunction getHash(alg) {\n  assert(typeof alg === 'string');\n\n  switch (alg) {\n    case 'sha224':\n      return SHA224;\n\n    case 'sha256':\n      return SHA256;\n\n    case 'sha384':\n      return SHA384;\n\n    case 'sha512':\n      return SHA512;\n\n    default:\n      return null;\n  }\n}\n\nfunction getCurve(curve) {\n  assert(typeof curve === 'string');\n\n  switch (curve) {\n    case 'p224':\n      return p224;\n\n    case 'p256':\n      return p256;\n\n    case 'p384':\n      return p384;\n\n    case 'p521':\n      return p521;\n\n    default:\n      return null;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}