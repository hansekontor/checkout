{"ast":null,"code":"/*!\n * common.js - common script functions for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n/**\n * @module script/common\n */\n\nconst assert = require('bsert');\n\nconst secp256k1 = require('bcrypto/lib/secp256k1');\n\nconst ScriptNum = require('./scriptnum');\n/**\n * Script opcodes.\n * @enum {Number}\n * @default\n */\n\n\nexports.opcodes = {\n  // Push\n  OP_0: 0x00,\n  OP_PUSHDATA1: 0x4c,\n  OP_PUSHDATA2: 0x4d,\n  OP_PUSHDATA4: 0x4e,\n  OP_1NEGATE: 0x4f,\n  OP_RESERVED: 0x50,\n  OP_1: 0x51,\n  OP_2: 0x52,\n  OP_3: 0x53,\n  OP_4: 0x54,\n  OP_5: 0x55,\n  OP_6: 0x56,\n  OP_7: 0x57,\n  OP_8: 0x58,\n  OP_9: 0x59,\n  OP_10: 0x5a,\n  OP_11: 0x5b,\n  OP_12: 0x5c,\n  OP_13: 0x5d,\n  OP_14: 0x5e,\n  OP_15: 0x5f,\n  OP_16: 0x60,\n  // Control\n  OP_NOP: 0x61,\n  OP_VER: 0x62,\n  OP_IF: 0x63,\n  OP_NOTIF: 0x64,\n  OP_VERIF: 0x65,\n  OP_VERNOTIF: 0x66,\n  OP_ELSE: 0x67,\n  OP_ENDIF: 0x68,\n  OP_VERIFY: 0x69,\n  OP_RETURN: 0x6a,\n  // Stack\n  OP_TOALTSTACK: 0x6b,\n  OP_FROMALTSTACK: 0x6c,\n  OP_2DROP: 0x6d,\n  OP_2DUP: 0x6e,\n  OP_3DUP: 0x6f,\n  OP_2OVER: 0x70,\n  OP_2ROT: 0x71,\n  OP_2SWAP: 0x72,\n  OP_IFDUP: 0x73,\n  OP_DEPTH: 0x74,\n  OP_DROP: 0x75,\n  OP_DUP: 0x76,\n  OP_NIP: 0x77,\n  OP_OVER: 0x78,\n  OP_PICK: 0x79,\n  OP_ROLL: 0x7a,\n  OP_ROT: 0x7b,\n  OP_SWAP: 0x7c,\n  OP_TUCK: 0x7d,\n  // Splice\n  OP_CAT: 0x7e,\n  OP_SPLIT: 0x7f,\n  OP_NUM2BIN: 0x80,\n  OP_BIN2NUM: 0x81,\n  OP_SIZE: 0x82,\n  // Bit\n  OP_INVERT: 0x83,\n  OP_AND: 0x84,\n  OP_OR: 0x85,\n  OP_XOR: 0x86,\n  OP_EQUAL: 0x87,\n  OP_EQUALVERIFY: 0x88,\n  OP_RESERVED1: 0x89,\n  OP_RESERVED2: 0x8a,\n  // Numeric\n  OP_1ADD: 0x8b,\n  OP_1SUB: 0x8c,\n  OP_2MUL: 0x8d,\n  OP_2DIV: 0x8e,\n  OP_NEGATE: 0x8f,\n  OP_ABS: 0x90,\n  OP_NOT: 0x91,\n  OP_0NOTEQUAL: 0x92,\n  OP_ADD: 0x93,\n  OP_SUB: 0x94,\n  OP_MUL: 0x95,\n  OP_DIV: 0x96,\n  OP_MOD: 0x97,\n  OP_LSHIFT: 0x98,\n  OP_RSHIFT: 0x99,\n  OP_BOOLAND: 0x9a,\n  OP_BOOLOR: 0x9b,\n  OP_NUMEQUAL: 0x9c,\n  OP_NUMEQUALVERIFY: 0x9d,\n  OP_NUMNOTEQUAL: 0x9e,\n  OP_LESSTHAN: 0x9f,\n  OP_GREATERTHAN: 0xa0,\n  OP_LESSTHANOREQUAL: 0xa1,\n  OP_GREATERTHANOREQUAL: 0xa2,\n  OP_MIN: 0xa3,\n  OP_MAX: 0xa4,\n  OP_WITHIN: 0xa5,\n  // Crypto\n  OP_RIPEMD160: 0xa6,\n  OP_SHA1: 0xa7,\n  OP_SHA256: 0xa8,\n  OP_HASH160: 0xa9,\n  OP_HASH256: 0xaa,\n  OP_CODESEPARATOR: 0xab,\n  OP_CHECKSIG: 0xac,\n  OP_CHECKSIGVERIFY: 0xad,\n  OP_CHECKMULTISIG: 0xae,\n  OP_CHECKMULTISIGVERIFY: 0xaf,\n  // Expansion\n  OP_NOP1: 0xb0,\n  OP_CHECKLOCKTIMEVERIFY: 0xb1,\n  OP_CHECKSEQUENCEVERIFY: 0xb2,\n  OP_NOP4: 0xb3,\n  OP_NOP5: 0xb4,\n  OP_NOP6: 0xb5,\n  OP_NOP7: 0xb6,\n  OP_NOP8: 0xb7,\n  OP_NOP9: 0xb8,\n  OP_NOP10: 0xb9,\n  // More Crypto\n  OP_CHECKDATASIG: 0xba,\n  OP_CHECKDATASIGVERIFY: 0xbb,\n  // additional byte-string operations\n  OP_REVERSEBYTES: 0xbc,\n  // Custom\n  OP_INVALIDOPCODE: 0xff\n};\n/**\n * Opcodes by value.\n * @const {Object}\n */\n\nexports.opcodesByVal = {\n  // Push\n  0x00: 'OP_0',\n  0x4c: 'OP_PUSHDATA1',\n  0x4d: 'OP_PUSHDATA2',\n  0x4e: 'OP_PUSHDATA4',\n  0x4f: 'OP_1NEGATE',\n  0x50: 'OP_RESERVED',\n  0x51: 'OP_1',\n  0x52: 'OP_2',\n  0x53: 'OP_3',\n  0x54: 'OP_4',\n  0x55: 'OP_5',\n  0x56: 'OP_6',\n  0x57: 'OP_7',\n  0x58: 'OP_8',\n  0x59: 'OP_9',\n  0x5a: 'OP_10',\n  0x5b: 'OP_11',\n  0x5c: 'OP_12',\n  0x5d: 'OP_13',\n  0x5e: 'OP_14',\n  0x5f: 'OP_15',\n  0x60: 'OP_16',\n  // Control\n  0x61: 'OP_NOP',\n  0x62: 'OP_VER',\n  0x63: 'OP_IF',\n  0x64: 'OP_NOTIF',\n  0x65: 'OP_VERIF',\n  0x66: 'OP_VERNOTIF',\n  0x67: 'OP_ELSE',\n  0x68: 'OP_ENDIF',\n  0x69: 'OP_VERIFY',\n  0x6a: 'OP_RETURN',\n  // Stack\n  0x6b: 'OP_TOALTSTACK',\n  0x6c: 'OP_FROMALTSTACK',\n  0x6d: 'OP_2DROP',\n  0x6e: 'OP_2DUP',\n  0x6f: 'OP_3DUP',\n  0x70: 'OP_2OVER',\n  0x71: 'OP_2ROT',\n  0x72: 'OP_2SWAP',\n  0x73: 'OP_IFDUP',\n  0x74: 'OP_DEPTH',\n  0x75: 'OP_DROP',\n  0x76: 'OP_DUP',\n  0x77: 'OP_NIP',\n  0x78: 'OP_OVER',\n  0x79: 'OP_PICK',\n  0x7a: 'OP_ROLL',\n  0x7b: 'OP_ROT',\n  0x7c: 'OP_SWAP',\n  0x7d: 'OP_TUCK',\n  // Splice\n  0x7e: 'OP_CAT',\n  0x7f: 'OP_SPLIT',\n  0x80: 'OP_NUM2BIN',\n  0x81: 'OP_BIN2NUM',\n  0x82: 'OP_SIZE',\n  // Bit\n  0x83: 'OP_INVERT',\n  0x84: 'OP_AND',\n  0x85: 'OP_OR',\n  0x86: 'OP_XOR',\n  0x87: 'OP_EQUAL',\n  0x88: 'OP_EQUALVERIFY',\n  0x89: 'OP_RESERVED1',\n  0x8a: 'OP_RESERVED2',\n  // Numeric\n  0x8b: 'OP_1ADD',\n  0x8c: 'OP_1SUB',\n  0x8d: 'OP_2MUL',\n  0x8e: 'OP_2DIV',\n  0x8f: 'OP_NEGATE',\n  0x90: 'OP_ABS',\n  0x91: 'OP_NOT',\n  0x92: 'OP_0NOTEQUAL',\n  0x93: 'OP_ADD',\n  0x94: 'OP_SUB',\n  0x95: 'OP_MUL',\n  0x96: 'OP_DIV',\n  0x97: 'OP_MOD',\n  0x98: 'OP_LSHIFT',\n  0x99: 'OP_RSHIFT',\n  0x9a: 'OP_BOOLAND',\n  0x9b: 'OP_BOOLOR',\n  0x9c: 'OP_NUMEQUAL',\n  0x9d: 'OP_NUMEQUALVERIFY',\n  0x9e: 'OP_NUMNOTEQUAL',\n  0x9f: 'OP_LESSTHAN',\n  0xa0: 'OP_GREATERTHAN',\n  0xa1: 'OP_LESSTHANOREQUAL',\n  0xa2: 'OP_GREATERTHANOREQUAL',\n  0xa3: 'OP_MIN',\n  0xa4: 'OP_MAX',\n  0xa5: 'OP_WITHIN',\n  // Crypto\n  0xa6: 'OP_RIPEMD160',\n  0xa7: 'OP_SHA1',\n  0xa8: 'OP_SHA256',\n  0xa9: 'OP_HASH160',\n  0xaa: 'OP_HASH256',\n  0xab: 'OP_CODESEPARATOR',\n  0xac: 'OP_CHECKSIG',\n  0xad: 'OP_CHECKSIGVERIFY',\n  0xae: 'OP_CHECKMULTISIG',\n  0xaf: 'OP_CHECKMULTISIGVERIFY',\n  // Expansion\n  0xb0: 'OP_NOP1',\n  0xb1: 'OP_CHECKLOCKTIMEVERIFY',\n  0xb2: 'OP_CHECKSEQUENCEVERIFY',\n  0xb3: 'OP_NOP4',\n  0xb4: 'OP_NOP5',\n  0xb5: 'OP_NOP6',\n  0xb6: 'OP_NOP7',\n  0xb7: 'OP_NOP8',\n  0xb8: 'OP_NOP9',\n  0xb9: 'OP_NOP10',\n  // More Crypto\n  0xba: 'OP_CHECKDATASIG',\n  0xbb: 'OP_CHECKDATASIGVERIFY',\n  // Additional byte-string operation\n  0xbc: 'OP_REVERSEBYTES',\n  // Custom\n  0xff: 'OP_INVALIDOPCODE'\n};\n/**\n * Small ints (1 indexed, 1==0).\n * @const {Buffer[]}\n */\n\nexports.small = [Buffer.from([0x81]), Buffer.from([]), Buffer.from([0x01]), Buffer.from([0x02]), Buffer.from([0x03]), Buffer.from([0x04]), Buffer.from([0x05]), Buffer.from([0x06]), Buffer.from([0x07]), Buffer.from([0x08]), Buffer.from([0x09]), Buffer.from([0x0a]), Buffer.from([0x0b]), Buffer.from([0x0c]), Buffer.from([0x0d]), Buffer.from([0x0e]), Buffer.from([0x0f]), Buffer.from([0x10])];\n/**\n * Script and locktime flags. See {@link VerifyFlags}.\n * @enum {Number}\n */\n\nexports.flags = {\n  VERIFY_NONE: 0,\n  VERIFY_P2SH: 1 << 0,\n  VERIFY_STRICTENC: 1 << 1,\n  VERIFY_DERSIG: 1 << 2,\n  VERIFY_LOW_S: 1 << 3,\n  VERIFY_SIGPUSHONLY: 1 << 5,\n  VERIFY_MINIMALDATA: 1 << 6,\n  VERIFY_DISCOURAGE_UPGRADABLE_NOPS: 1 << 7,\n  VERIFY_CLEANSTACK: 1 << 8,\n  VERIFY_CHECKLOCKTIMEVERIFY: 1 << 9,\n  VERIFY_CHECKSEQUENCEVERIFY: 1 << 10,\n  VERIFY_MINIMALIF: 1 << 13,\n  VERIFY_NULLFAIL: 1 << 14,\n  VERIFY_COMPRESSED_PUBKEYTYPE: 1 << 15,\n  VERIFY_SIGHASH_FORKID: 1 << 16,\n  VERIFY_REPLAY_PROTECTION: 1 << 17,\n  VERIFY_CHECKDATASIG: 1 << 18,\n  VERIFY_SCHNORR: 1 << 19,\n  VERIFY_DISALLOW_SEGWIT_RECOVERY: 1 << 20,\n  VERIFY_SCHNORR_MULTISIG: 1 << 21,\n  VERIFY_INPUT_SIGCHECKS: 1 << 22,\n  VERIFY_REVERSEBYTES: 1 << 23,\n  VERIFY_ZERO_SIGOPS: 1 << 30,\n  REPORT_SIGCHECKS: 1 << 31\n};\n/**\n * Consensus verify flags (used for block validation).\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.MANDATORY_VERIFY_FLAGS = exports.flags.VERIFY_P2SH;\n/**\n * Standard verify flags (used for mempool validation).\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.STANDARD_VERIFY_FLAGS = 0 | exports.flags.MANDATORY_VERIFY_FLAGS | exports.flags.VERIFY_DERSIG | exports.flags.VERIFY_STRICTENC | exports.flags.VERIFY_MINIMALDATA | exports.flags.VERIFY_SIGPUSHONLY | exports.flags.VERIFY_DISCOURAGE_UPGRADABLE_NOPS | exports.flags.VERIFY_CLEANSTACK | exports.flags.VERIFY_MINIMALIF | exports.flags.VERIFY_NULLFAIL | exports.flags.VERIFY_CHECKLOCKTIMEVERIFY | exports.flags.VERIFY_CHECKSEQUENCEVERIFY | exports.flags.VERIFY_LOW_S | exports.flags.VERIFY_SIGHASH_FORKID | exports.flags.VERIFY_CHECKDATASIG | exports.flags.VERIFY_DISALLOW_SEGWIT_RECOVERY | exports.flags.VERIFY_SCHNORR_MULTISIG;\n/**\n * Standard flags without mandatory bits.\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.ONLY_STANDARD_VERIFY_FLAGS = exports.flags.STANDARD_VERIFY_FLAGS & ~exports.flags.MANDATORY_VERIFY_FLAGS;\n/**\n * Sighash Types.\n * @enum {SighashType}\n * @default\n */\n\nexports.hashType = {\n  /*\n   * Sign all outputs.\n   */\n  ALL: 1,\n\n  /*\n   * Do not sign outputs (zero sequences).\n   */\n  NONE: 2,\n\n  /*\n   * Sign output at the same index (zero sequences).\n   */\n  SINGLE: 3,\n\n  /*\n   * Sighash fork ID.\n   */\n  SIGHASH_FORKID: 0x40,\n\n  /*\n   * Sign only the current input (mask).\n   */\n  ANYONECANPAY: 0x80\n};\n/**\n * Sighash types by value.\n * @const {Object}\n */\n\nexports.hashTypeByVal = {\n  1: 'ALL',\n  2: 'NONE',\n  3: 'SINGLE',\n  0x80: 'ANYONECANPAY'\n};\n/**\n * Output script types.\n * @enum {Number}\n */\n\nexports.types = {\n  NONSTANDARD: 0,\n  PUBKEY: 1,\n  PUBKEYHASH: 2,\n  SCRIPTHASH: 3,\n  MULTISIG: 4,\n  NULLDATA: 5\n};\n/**\n * Output script types by value.\n * @const {Object}\n */\n\nexports.typesByVal = {\n  0: 'NONSTANDARD',\n  1: 'PUBKEY',\n  2: 'PUBKEYHASH',\n  3: 'SCRIPTHASH',\n  4: 'MULTISIG',\n  5: 'NULLDATA'\n};\n/**\n * Test a signature to see whether it contains a valid sighash type.\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\nexports.isHashType = function isHashType(sig) {\n  assert(Buffer.isBuffer(sig));\n  if (sig.length === 0) return false;\n  const type = sig[sig.length - 1] & ~(exports.hashType.ANYONECANPAY | exports.hashType.SIGHASH_FORKID);\n  if (type < exports.hashType.ALL || type > exports.hashType.SINGLE) return false;\n  return true;\n};\n/**\n * Bitfield calculation helper for signatures.\n * @param {Number} bits\n * @returns {Number}\n */\n\n\nexports.countBits = function countBits(bits) {\n  bits = bits - (bits >> 1 & 0x55555555);\n  bits = (bits & 0x33333333) + (bits >> 2 & 0x33333333);\n  return (bits + (bits >> 4) & 0xf0f0f0f) * 0x1010101 >> 24;\n};\n/**\n * Test whether a signature is 64-bytes in length\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\n\nexports.isSchnorr = function isSchnorr(sig) {\n  assert(Buffer.isBuffer(sig));\n  return sig.length === 64;\n};\n/**\n * Test a signature to see whether it contains a low S value.\n * NOTE: signature MUST exclude sighash byte\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\n\nexports.isLowDER = function isLowDER(sig) {\n  if (!exports.isDERSignatureEncoding(sig)) return false;\n  return secp256k1.isLowDER(sig);\n};\n/**\n * Test whether the data element is a valid key.\n * @param {Buffer} key\n * @returns {Boolean}\n */\n\n\nexports.isKeyEncoding = function isKeyEncoding(key) {\n  assert(Buffer.isBuffer(key));\n  if (key.length < 33) return false;\n\n  if (key[0] === 0x04) {\n    if (key.length !== 65) return false;\n  } else if (key[0] === 0x02 || key[0] === 0x03) {\n    if (key.length !== 33) return false;\n  } else {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Test whether the data element is a compressed key.\n * @param {Buffer} key\n * @returns {Boolean}\n */\n\n\nexports.isCompressedEncoding = function isCompressedEncoding(key) {\n  assert(Buffer.isBuffer(key));\n  if (key.length !== 33) return false;\n  if (key[0] !== 0x02 && key[0] !== 0x03) return false;\n  return true;\n};\n/**\n * Test a signature to see if it abides by BIP66.\n * NOTE: signature MUST exclude sighash byte\n * @see https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\n\nexports.isDERSignatureEncoding = function isDERSignatureEncoding(sig) {\n  assert(Buffer.isBuffer(sig)); // Format:\n  //   0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n  // * total-length: 1-byte length descriptor of everything that follows,\n  //   excluding the sighash byte.\n  // * R-length: 1-byte length descriptor of the R value that follows.\n  // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n  //   possible encoding for a positive integers (which means no null bytes at\n  //   the start, except a single one when the next byte has its highest bit\n  //   set).\n  // * S-length: 1-byte length descriptor of the S value that follows.\n  // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n  // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n  //   signature)\n  // Minimum and maximum size constraints.\n\n  if (sig.length < 8) return false;\n  if (sig.length > 72) return false; // A signature is of type 0x30 (compound).\n\n  if (sig[0] !== 0x30) return false; // Make sure the length covers the entire signature.\n\n  if (sig[1] !== sig.length - 2) return false; // Extract the length of the R element.\n\n  const lenR = sig[3]; // Make sure the length of the S element is still inside the signature.\n\n  if (5 + lenR >= sig.length) return false; // Extract the length of the S element.\n\n  const lenS = sig[5 + lenR]; // Verify that the length of the signature matches the sum of the length\n  // of the elements.\n\n  if (lenR + lenS + 6 !== sig.length) return false; // Check whether the R element is an integer.\n\n  if (sig[2] !== 0x02) return false; // Zero-length integers are not allowed for R.\n\n  if (lenR === 0) return false; // Negative numbers are not allowed for R.\n\n  if (sig[4] & 0x80) return false; // Null bytes at the start of R are not allowed, unless R would\n  // otherwise be interpreted as a negative number.\n\n  if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return false; // Check whether the S element is an integer.\n\n  if (sig[lenR + 4] !== 0x02) return false; // Zero-length integers are not allowed for S.\n\n  if (lenS === 0) return false; // Negative numbers are not allowed for S.\n\n  if (sig[lenR + 6] & 0x80) return false; // Null bytes at the start of S are not allowed, unless S would otherwise be\n  // interpreted as a negative number.\n\n  if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return false;\n  return true;\n};\n/**\n * Format stack item into bitcoind asm format.\n * @param {Buffer} item\n * @param {Boolean?} decode - Attempt to decode hash types.\n * @returns {String} Human-readable string.\n */\n\n\nexports.toASM = function toASM(item, decode) {\n  if (item.length <= 4) {\n    const num = ScriptNum.decode(item);\n    return num.toString(10);\n  }\n\n  if (decode && exports.isDERSignatureEncoding(item.slice(0, -1))) {\n    const type = item[item.length - 1];\n    let symbol = exports.hashTypeByVal[type & 0x1f] || '';\n\n    if (symbol) {\n      if (type & exports.hashType.ANYONECANPAY) symbol += '|ANYONECANPAY';\n      symbol = `[${symbol}]`;\n    }\n\n    return item.slice(0, -1).toString('hex') + symbol;\n  }\n\n  return item.toString('hex');\n};\n/**\n * Sighash with fork value for replay protection\n * @param {SighashType} sighash\n * @param {Number} value\n * @returns {SighashType}\n */\n\n\nexports.hashTypeWithForkValue = function hashTypeWithForkValue(sighash, value) {\n  return value << 8 | sighash & 0xff;\n};\n/**\n * Get fork value from hashtype\n * @param {SighashType} sighash\n * @returns {Number}\n */\n\n\nexports.getHashTypeForkValue = function getHashTypeForkValue(sighash) {\n  return sighash >>> 8;\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/script/common.js"],"names":["assert","require","secp256k1","ScriptNum","exports","opcodes","OP_0","OP_PUSHDATA1","OP_PUSHDATA2","OP_PUSHDATA4","OP_1NEGATE","OP_RESERVED","OP_1","OP_2","OP_3","OP_4","OP_5","OP_6","OP_7","OP_8","OP_9","OP_10","OP_11","OP_12","OP_13","OP_14","OP_15","OP_16","OP_NOP","OP_VER","OP_IF","OP_NOTIF","OP_VERIF","OP_VERNOTIF","OP_ELSE","OP_ENDIF","OP_VERIFY","OP_RETURN","OP_TOALTSTACK","OP_FROMALTSTACK","OP_2DROP","OP_2DUP","OP_3DUP","OP_2OVER","OP_2ROT","OP_2SWAP","OP_IFDUP","OP_DEPTH","OP_DROP","OP_DUP","OP_NIP","OP_OVER","OP_PICK","OP_ROLL","OP_ROT","OP_SWAP","OP_TUCK","OP_CAT","OP_SPLIT","OP_NUM2BIN","OP_BIN2NUM","OP_SIZE","OP_INVERT","OP_AND","OP_OR","OP_XOR","OP_EQUAL","OP_EQUALVERIFY","OP_RESERVED1","OP_RESERVED2","OP_1ADD","OP_1SUB","OP_2MUL","OP_2DIV","OP_NEGATE","OP_ABS","OP_NOT","OP_0NOTEQUAL","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_MOD","OP_LSHIFT","OP_RSHIFT","OP_BOOLAND","OP_BOOLOR","OP_NUMEQUAL","OP_NUMEQUALVERIFY","OP_NUMNOTEQUAL","OP_LESSTHAN","OP_GREATERTHAN","OP_LESSTHANOREQUAL","OP_GREATERTHANOREQUAL","OP_MIN","OP_MAX","OP_WITHIN","OP_RIPEMD160","OP_SHA1","OP_SHA256","OP_HASH160","OP_HASH256","OP_CODESEPARATOR","OP_CHECKSIG","OP_CHECKSIGVERIFY","OP_CHECKMULTISIG","OP_CHECKMULTISIGVERIFY","OP_NOP1","OP_CHECKLOCKTIMEVERIFY","OP_CHECKSEQUENCEVERIFY","OP_NOP4","OP_NOP5","OP_NOP6","OP_NOP7","OP_NOP8","OP_NOP9","OP_NOP10","OP_CHECKDATASIG","OP_CHECKDATASIGVERIFY","OP_REVERSEBYTES","OP_INVALIDOPCODE","opcodesByVal","small","Buffer","from","flags","VERIFY_NONE","VERIFY_P2SH","VERIFY_STRICTENC","VERIFY_DERSIG","VERIFY_LOW_S","VERIFY_SIGPUSHONLY","VERIFY_MINIMALDATA","VERIFY_DISCOURAGE_UPGRADABLE_NOPS","VERIFY_CLEANSTACK","VERIFY_CHECKLOCKTIMEVERIFY","VERIFY_CHECKSEQUENCEVERIFY","VERIFY_MINIMALIF","VERIFY_NULLFAIL","VERIFY_COMPRESSED_PUBKEYTYPE","VERIFY_SIGHASH_FORKID","VERIFY_REPLAY_PROTECTION","VERIFY_CHECKDATASIG","VERIFY_SCHNORR","VERIFY_DISALLOW_SEGWIT_RECOVERY","VERIFY_SCHNORR_MULTISIG","VERIFY_INPUT_SIGCHECKS","VERIFY_REVERSEBYTES","VERIFY_ZERO_SIGOPS","REPORT_SIGCHECKS","MANDATORY_VERIFY_FLAGS","STANDARD_VERIFY_FLAGS","ONLY_STANDARD_VERIFY_FLAGS","hashType","ALL","NONE","SINGLE","SIGHASH_FORKID","ANYONECANPAY","hashTypeByVal","types","NONSTANDARD","PUBKEY","PUBKEYHASH","SCRIPTHASH","MULTISIG","NULLDATA","typesByVal","isHashType","sig","isBuffer","length","type","countBits","bits","isSchnorr","isLowDER","isDERSignatureEncoding","isKeyEncoding","key","isCompressedEncoding","lenR","lenS","toASM","item","decode","num","toString","slice","symbol","hashTypeWithForkValue","sighash","value","getHashTypeForkValue"],"mappings":"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","sourcesContent":["/*!\n * common.js - common script functions for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\n/**\n * @module script/common\n */\n\nconst assert = require('bsert');\nconst secp256k1 = require('bcrypto/lib/secp256k1');\nconst ScriptNum = require('./scriptnum');\n\n/**\n * Script opcodes.\n * @enum {Number}\n * @default\n */\n\nexports.opcodes = {\n  // Push\n  OP_0: 0x00,\n\n  OP_PUSHDATA1: 0x4c,\n  OP_PUSHDATA2: 0x4d,\n  OP_PUSHDATA4: 0x4e,\n\n  OP_1NEGATE: 0x4f,\n\n  OP_RESERVED: 0x50,\n\n  OP_1: 0x51,\n  OP_2: 0x52,\n  OP_3: 0x53,\n  OP_4: 0x54,\n  OP_5: 0x55,\n  OP_6: 0x56,\n  OP_7: 0x57,\n  OP_8: 0x58,\n  OP_9: 0x59,\n  OP_10: 0x5a,\n  OP_11: 0x5b,\n  OP_12: 0x5c,\n  OP_13: 0x5d,\n  OP_14: 0x5e,\n  OP_15: 0x5f,\n  OP_16: 0x60,\n\n  // Control\n  OP_NOP: 0x61,\n  OP_VER: 0x62,\n  OP_IF: 0x63,\n  OP_NOTIF: 0x64,\n  OP_VERIF: 0x65,\n  OP_VERNOTIF: 0x66,\n  OP_ELSE: 0x67,\n  OP_ENDIF: 0x68,\n  OP_VERIFY: 0x69,\n  OP_RETURN: 0x6a,\n\n  // Stack\n  OP_TOALTSTACK: 0x6b,\n  OP_FROMALTSTACK: 0x6c,\n  OP_2DROP: 0x6d,\n  OP_2DUP: 0x6e,\n  OP_3DUP: 0x6f,\n  OP_2OVER: 0x70,\n  OP_2ROT: 0x71,\n  OP_2SWAP: 0x72,\n  OP_IFDUP: 0x73,\n  OP_DEPTH: 0x74,\n  OP_DROP: 0x75,\n  OP_DUP: 0x76,\n  OP_NIP: 0x77,\n  OP_OVER: 0x78,\n  OP_PICK: 0x79,\n  OP_ROLL: 0x7a,\n  OP_ROT: 0x7b,\n  OP_SWAP: 0x7c,\n  OP_TUCK: 0x7d,\n\n  // Splice\n  OP_CAT: 0x7e,\n  OP_SPLIT: 0x7f,\n  OP_NUM2BIN: 0x80,\n  OP_BIN2NUM: 0x81,\n  OP_SIZE: 0x82,\n\n  // Bit\n  OP_INVERT: 0x83,\n  OP_AND: 0x84,\n  OP_OR: 0x85,\n  OP_XOR: 0x86,\n  OP_EQUAL: 0x87,\n  OP_EQUALVERIFY: 0x88,\n  OP_RESERVED1: 0x89,\n  OP_RESERVED2: 0x8a,\n\n  // Numeric\n  OP_1ADD: 0x8b,\n  OP_1SUB: 0x8c,\n  OP_2MUL: 0x8d,\n  OP_2DIV: 0x8e,\n  OP_NEGATE: 0x8f,\n  OP_ABS: 0x90,\n  OP_NOT: 0x91,\n  OP_0NOTEQUAL: 0x92,\n  OP_ADD: 0x93,\n  OP_SUB: 0x94,\n  OP_MUL: 0x95,\n  OP_DIV: 0x96,\n  OP_MOD: 0x97,\n  OP_LSHIFT: 0x98,\n  OP_RSHIFT: 0x99,\n  OP_BOOLAND: 0x9a,\n  OP_BOOLOR: 0x9b,\n  OP_NUMEQUAL: 0x9c,\n  OP_NUMEQUALVERIFY: 0x9d,\n  OP_NUMNOTEQUAL: 0x9e,\n  OP_LESSTHAN: 0x9f,\n  OP_GREATERTHAN: 0xa0,\n  OP_LESSTHANOREQUAL: 0xa1,\n  OP_GREATERTHANOREQUAL: 0xa2,\n  OP_MIN: 0xa3,\n  OP_MAX: 0xa4,\n  OP_WITHIN: 0xa5,\n\n  // Crypto\n  OP_RIPEMD160: 0xa6,\n  OP_SHA1: 0xa7,\n  OP_SHA256: 0xa8,\n  OP_HASH160: 0xa9,\n  OP_HASH256: 0xaa,\n  OP_CODESEPARATOR: 0xab,\n  OP_CHECKSIG: 0xac,\n  OP_CHECKSIGVERIFY: 0xad,\n  OP_CHECKMULTISIG: 0xae,\n  OP_CHECKMULTISIGVERIFY: 0xaf,\n\n  // Expansion\n  OP_NOP1: 0xb0,\n  OP_CHECKLOCKTIMEVERIFY: 0xb1,\n  OP_CHECKSEQUENCEVERIFY: 0xb2,\n  OP_NOP4: 0xb3,\n  OP_NOP5: 0xb4,\n  OP_NOP6: 0xb5,\n  OP_NOP7: 0xb6,\n  OP_NOP8: 0xb7,\n  OP_NOP9: 0xb8,\n  OP_NOP10: 0xb9,\n\n  // More Crypto\n  OP_CHECKDATASIG: 0xba,\n  OP_CHECKDATASIGVERIFY: 0xbb,\n\n  // additional byte-string operations\n  OP_REVERSEBYTES: 0xbc,\n\n  // Custom\n  OP_INVALIDOPCODE: 0xff\n};\n\n/**\n * Opcodes by value.\n * @const {Object}\n */\n\nexports.opcodesByVal = {\n  // Push\n  0x00: 'OP_0',\n\n  0x4c: 'OP_PUSHDATA1',\n  0x4d: 'OP_PUSHDATA2',\n  0x4e: 'OP_PUSHDATA4',\n\n  0x4f: 'OP_1NEGATE',\n\n  0x50: 'OP_RESERVED',\n\n  0x51: 'OP_1',\n  0x52: 'OP_2',\n  0x53: 'OP_3',\n  0x54: 'OP_4',\n  0x55: 'OP_5',\n  0x56: 'OP_6',\n  0x57: 'OP_7',\n  0x58: 'OP_8',\n  0x59: 'OP_9',\n  0x5a: 'OP_10',\n  0x5b: 'OP_11',\n  0x5c: 'OP_12',\n  0x5d: 'OP_13',\n  0x5e: 'OP_14',\n  0x5f: 'OP_15',\n  0x60: 'OP_16',\n\n  // Control\n  0x61: 'OP_NOP',\n  0x62: 'OP_VER',\n  0x63: 'OP_IF',\n  0x64: 'OP_NOTIF',\n  0x65: 'OP_VERIF',\n  0x66: 'OP_VERNOTIF',\n  0x67: 'OP_ELSE',\n  0x68: 'OP_ENDIF',\n  0x69: 'OP_VERIFY',\n  0x6a: 'OP_RETURN',\n\n  // Stack\n  0x6b: 'OP_TOALTSTACK',\n  0x6c: 'OP_FROMALTSTACK',\n  0x6d: 'OP_2DROP',\n  0x6e: 'OP_2DUP',\n  0x6f: 'OP_3DUP',\n  0x70: 'OP_2OVER',\n  0x71: 'OP_2ROT',\n  0x72: 'OP_2SWAP',\n  0x73: 'OP_IFDUP',\n  0x74: 'OP_DEPTH',\n  0x75: 'OP_DROP',\n  0x76: 'OP_DUP',\n  0x77: 'OP_NIP',\n  0x78: 'OP_OVER',\n  0x79: 'OP_PICK',\n  0x7a: 'OP_ROLL',\n  0x7b: 'OP_ROT',\n  0x7c: 'OP_SWAP',\n  0x7d: 'OP_TUCK',\n\n  // Splice\n  0x7e: 'OP_CAT',\n  0x7f: 'OP_SPLIT',\n  0x80: 'OP_NUM2BIN',\n  0x81: 'OP_BIN2NUM',\n  0x82: 'OP_SIZE',\n\n  // Bit\n  0x83: 'OP_INVERT',\n  0x84: 'OP_AND',\n  0x85: 'OP_OR',\n  0x86: 'OP_XOR',\n  0x87: 'OP_EQUAL',\n  0x88: 'OP_EQUALVERIFY',\n  0x89: 'OP_RESERVED1',\n  0x8a: 'OP_RESERVED2',\n\n  // Numeric\n  0x8b: 'OP_1ADD',\n  0x8c: 'OP_1SUB',\n  0x8d: 'OP_2MUL',\n  0x8e: 'OP_2DIV',\n  0x8f: 'OP_NEGATE',\n  0x90: 'OP_ABS',\n  0x91: 'OP_NOT',\n  0x92: 'OP_0NOTEQUAL',\n  0x93: 'OP_ADD',\n  0x94: 'OP_SUB',\n  0x95: 'OP_MUL',\n  0x96: 'OP_DIV',\n  0x97: 'OP_MOD',\n  0x98: 'OP_LSHIFT',\n  0x99: 'OP_RSHIFT',\n  0x9a: 'OP_BOOLAND',\n  0x9b: 'OP_BOOLOR',\n  0x9c: 'OP_NUMEQUAL',\n  0x9d: 'OP_NUMEQUALVERIFY',\n  0x9e: 'OP_NUMNOTEQUAL',\n  0x9f: 'OP_LESSTHAN',\n  0xa0: 'OP_GREATERTHAN',\n  0xa1: 'OP_LESSTHANOREQUAL',\n  0xa2: 'OP_GREATERTHANOREQUAL',\n  0xa3: 'OP_MIN',\n  0xa4: 'OP_MAX',\n  0xa5: 'OP_WITHIN',\n\n  // Crypto\n  0xa6: 'OP_RIPEMD160',\n  0xa7: 'OP_SHA1',\n  0xa8: 'OP_SHA256',\n  0xa9: 'OP_HASH160',\n  0xaa: 'OP_HASH256',\n  0xab: 'OP_CODESEPARATOR',\n  0xac: 'OP_CHECKSIG',\n  0xad: 'OP_CHECKSIGVERIFY',\n  0xae: 'OP_CHECKMULTISIG',\n  0xaf: 'OP_CHECKMULTISIGVERIFY',\n\n  // Expansion\n  0xb0: 'OP_NOP1',\n  0xb1: 'OP_CHECKLOCKTIMEVERIFY',\n  0xb2: 'OP_CHECKSEQUENCEVERIFY',\n  0xb3: 'OP_NOP4',\n  0xb4: 'OP_NOP5',\n  0xb5: 'OP_NOP6',\n  0xb6: 'OP_NOP7',\n  0xb7: 'OP_NOP8',\n  0xb8: 'OP_NOP9',\n  0xb9: 'OP_NOP10',\n\n  // More Crypto\n  0xba: 'OP_CHECKDATASIG',\n  0xbb: 'OP_CHECKDATASIGVERIFY',\n\n  // Additional byte-string operation\n  0xbc: 'OP_REVERSEBYTES',\n\n  // Custom\n  0xff: 'OP_INVALIDOPCODE'\n};\n\n/**\n * Small ints (1 indexed, 1==0).\n * @const {Buffer[]}\n */\n\nexports.small = [\n  Buffer.from([0x81]),\n  Buffer.from([]),\n  Buffer.from([0x01]),\n  Buffer.from([0x02]),\n  Buffer.from([0x03]),\n  Buffer.from([0x04]),\n  Buffer.from([0x05]),\n  Buffer.from([0x06]),\n  Buffer.from([0x07]),\n  Buffer.from([0x08]),\n  Buffer.from([0x09]),\n  Buffer.from([0x0a]),\n  Buffer.from([0x0b]),\n  Buffer.from([0x0c]),\n  Buffer.from([0x0d]),\n  Buffer.from([0x0e]),\n  Buffer.from([0x0f]),\n  Buffer.from([0x10])\n];\n\n/**\n * Script and locktime flags. See {@link VerifyFlags}.\n * @enum {Number}\n */\n\nexports.flags = {\n  VERIFY_NONE: 0,\n  VERIFY_P2SH: 1 << 0,\n  VERIFY_STRICTENC: 1 << 1,\n  VERIFY_DERSIG: 1 << 2,\n  VERIFY_LOW_S: 1 << 3,\n  VERIFY_SIGPUSHONLY: 1 << 5,\n  VERIFY_MINIMALDATA: 1 << 6,\n  VERIFY_DISCOURAGE_UPGRADABLE_NOPS: 1 << 7,\n  VERIFY_CLEANSTACK: 1 << 8,\n  VERIFY_CHECKLOCKTIMEVERIFY: 1 << 9,\n  VERIFY_CHECKSEQUENCEVERIFY: 1 << 10,\n  VERIFY_MINIMALIF: 1 << 13,\n  VERIFY_NULLFAIL: 1 << 14,\n  VERIFY_COMPRESSED_PUBKEYTYPE: 1 << 15,\n  VERIFY_SIGHASH_FORKID: 1 << 16,\n  VERIFY_REPLAY_PROTECTION: 1 << 17,\n  VERIFY_CHECKDATASIG: 1 << 18,\n  VERIFY_SCHNORR: 1 << 19,\n  VERIFY_DISALLOW_SEGWIT_RECOVERY: 1 << 20,\n  VERIFY_SCHNORR_MULTISIG: 1 << 21,\n  VERIFY_INPUT_SIGCHECKS: 1 << 22,\n  VERIFY_REVERSEBYTES: 1 << 23,\n  VERIFY_ZERO_SIGOPS: 1 << 30,\n  REPORT_SIGCHECKS: 1 << 31\n};\n\n/**\n * Consensus verify flags (used for block validation).\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.MANDATORY_VERIFY_FLAGS = exports.flags.VERIFY_P2SH;\n\n/**\n * Standard verify flags (used for mempool validation).\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.STANDARD_VERIFY_FLAGS = 0\n  | exports.flags.MANDATORY_VERIFY_FLAGS\n  | exports.flags.VERIFY_DERSIG\n  | exports.flags.VERIFY_STRICTENC\n  | exports.flags.VERIFY_MINIMALDATA\n  | exports.flags.VERIFY_SIGPUSHONLY\n  | exports.flags.VERIFY_DISCOURAGE_UPGRADABLE_NOPS\n  | exports.flags.VERIFY_CLEANSTACK\n  | exports.flags.VERIFY_MINIMALIF\n  | exports.flags.VERIFY_NULLFAIL\n  | exports.flags.VERIFY_CHECKLOCKTIMEVERIFY\n  | exports.flags.VERIFY_CHECKSEQUENCEVERIFY\n  | exports.flags.VERIFY_LOW_S\n  | exports.flags.VERIFY_SIGHASH_FORKID\n  | exports.flags.VERIFY_CHECKDATASIG\n  | exports.flags.VERIFY_DISALLOW_SEGWIT_RECOVERY\n  | exports.flags.VERIFY_SCHNORR_MULTISIG;\n\n/**\n * Standard flags without mandatory bits.\n * @const {VerifyFlags}\n * @default\n */\n\nexports.flags.ONLY_STANDARD_VERIFY_FLAGS =\n  exports.flags.STANDARD_VERIFY_FLAGS & ~exports.flags.MANDATORY_VERIFY_FLAGS;\n\n/**\n * Sighash Types.\n * @enum {SighashType}\n * @default\n */\n\nexports.hashType = {\n  /*\n   * Sign all outputs.\n   */\n\n  ALL: 1,\n\n  /*\n   * Do not sign outputs (zero sequences).\n   */\n\n  NONE: 2,\n\n  /*\n   * Sign output at the same index (zero sequences).\n   */\n\n  SINGLE: 3,\n\n  /*\n   * Sighash fork ID.\n   */\n\n  SIGHASH_FORKID: 0x40,\n\n  /*\n   * Sign only the current input (mask).\n   */\n\n  ANYONECANPAY: 0x80\n};\n\n/**\n * Sighash types by value.\n * @const {Object}\n */\n\nexports.hashTypeByVal = {\n  1: 'ALL',\n  2: 'NONE',\n  3: 'SINGLE',\n  0x80: 'ANYONECANPAY'\n};\n\n/**\n * Output script types.\n * @enum {Number}\n */\n\nexports.types = {\n  NONSTANDARD: 0,\n  PUBKEY: 1,\n  PUBKEYHASH: 2,\n  SCRIPTHASH: 3,\n  MULTISIG: 4,\n  NULLDATA: 5\n};\n\n/**\n * Output script types by value.\n * @const {Object}\n */\n\nexports.typesByVal = {\n  0: 'NONSTANDARD',\n  1: 'PUBKEY',\n  2: 'PUBKEYHASH',\n  3: 'SCRIPTHASH',\n  4: 'MULTISIG',\n  5: 'NULLDATA'\n};\n\n/**\n * Test a signature to see whether it contains a valid sighash type.\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\nexports.isHashType = function isHashType(sig) {\n  assert(Buffer.isBuffer(sig));\n\n  if (sig.length === 0)\n    return false;\n\n  const type = sig[sig.length - 1]\n    & ~(exports.hashType.ANYONECANPAY | exports.hashType.SIGHASH_FORKID);\n\n  if (type < exports.hashType.ALL || type > exports.hashType.SINGLE)\n    return false;\n\n  return true;\n};\n\n/**\n * Bitfield calculation helper for signatures.\n * @param {Number} bits\n * @returns {Number}\n */\n\nexports.countBits = function countBits(bits) {\n  bits = bits - ((bits >> 1) & 0x55555555);\n  bits = (bits & 0x33333333) + ((bits >> 2) & 0x33333333);\n  return (((bits + (bits >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n};\n\n/**\n * Test whether a signature is 64-bytes in length\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\nexports.isSchnorr = function isSchnorr(sig)  {\n  assert(Buffer.isBuffer(sig));\n  return sig.length === 64;\n}\n\n/**\n * Test a signature to see whether it contains a low S value.\n * NOTE: signature MUST exclude sighash byte\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\nexports.isLowDER = function isLowDER(sig) {\n  if (!exports.isDERSignatureEncoding(sig))\n    return false;\n\n  return secp256k1.isLowDER(sig);\n};\n\n/**\n * Test whether the data element is a valid key.\n * @param {Buffer} key\n * @returns {Boolean}\n */\n\nexports.isKeyEncoding = function isKeyEncoding(key) {\n  assert(Buffer.isBuffer(key));\n\n  if (key.length < 33)\n    return false;\n\n  if (key[0] === 0x04) {\n    if (key.length !== 65)\n      return false;\n  } else if (key[0] === 0x02 || key[0] === 0x03) {\n    if (key.length !== 33)\n      return false;\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Test whether the data element is a compressed key.\n * @param {Buffer} key\n * @returns {Boolean}\n */\n\nexports.isCompressedEncoding = function isCompressedEncoding(key) {\n  assert(Buffer.isBuffer(key));\n\n  if (key.length !== 33)\n    return false;\n\n  if (key[0] !== 0x02 && key[0] !== 0x03)\n    return false;\n\n  return true;\n};\n\n/**\n * Test a signature to see if it abides by BIP66.\n * NOTE: signature MUST exclude sighash byte\n * @see https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n * @param {Buffer} sig\n * @returns {Boolean}\n */\n\nexports.isDERSignatureEncoding = function isDERSignatureEncoding(sig) {\n  assert(Buffer.isBuffer(sig));\n\n  // Format:\n  //   0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S] [sighash]\n  // * total-length: 1-byte length descriptor of everything that follows,\n  //   excluding the sighash byte.\n  // * R-length: 1-byte length descriptor of the R value that follows.\n  // * R: arbitrary-length big-endian encoded R value. It must use the shortest\n  //   possible encoding for a positive integers (which means no null bytes at\n  //   the start, except a single one when the next byte has its highest bit\n  //   set).\n  // * S-length: 1-byte length descriptor of the S value that follows.\n  // * S: arbitrary-length big-endian encoded S value. The same rules apply.\n  // * sighash: 1-byte value indicating what data is hashed (not part of the DER\n  //   signature)\n\n  // Minimum and maximum size constraints.\n  if (sig.length < 8)\n    return false;\n\n  if (sig.length > 72)\n    return false;\n\n  // A signature is of type 0x30 (compound).\n  if (sig[0] !== 0x30)\n    return false;\n\n  // Make sure the length covers the entire signature.\n  if (sig[1] !== sig.length - 2)\n    return false;\n\n  // Extract the length of the R element.\n  const lenR = sig[3];\n\n  // Make sure the length of the S element is still inside the signature.\n  if (5 + lenR >= sig.length)\n    return false;\n\n  // Extract the length of the S element.\n  const lenS = sig[5 + lenR];\n\n  // Verify that the length of the signature matches the sum of the length\n  // of the elements.\n  if (lenR + lenS + 6 !== sig.length)\n    return false;\n\n  // Check whether the R element is an integer.\n  if (sig[2] !== 0x02)\n    return false;\n\n  // Zero-length integers are not allowed for R.\n  if (lenR === 0)\n    return false;\n\n  // Negative numbers are not allowed for R.\n  if (sig[4] & 0x80)\n    return false;\n\n  // Null bytes at the start of R are not allowed, unless R would\n  // otherwise be interpreted as a negative number.\n  if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80))\n    return false;\n\n  // Check whether the S element is an integer.\n  if (sig[lenR + 4] !== 0x02)\n    return false;\n\n  // Zero-length integers are not allowed for S.\n  if (lenS === 0)\n    return false;\n\n  // Negative numbers are not allowed for S.\n  if (sig[lenR + 6] & 0x80)\n    return false;\n\n  // Null bytes at the start of S are not allowed, unless S would otherwise be\n  // interpreted as a negative number.\n  if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80))\n    return false;\n\n  return true;\n};\n\n/**\n * Format stack item into bitcoind asm format.\n * @param {Buffer} item\n * @param {Boolean?} decode - Attempt to decode hash types.\n * @returns {String} Human-readable string.\n */\n\nexports.toASM = function toASM(item, decode) {\n  if (item.length <= 4) {\n    const num = ScriptNum.decode(item);\n    return num.toString(10);\n  }\n\n  if (decode && exports.isDERSignatureEncoding(item.slice(0, -1))) {\n    const type = item[item.length - 1];\n\n    let symbol = exports.hashTypeByVal[type & 0x1f] || '';\n\n    if (symbol) {\n      if (type & exports.hashType.ANYONECANPAY)\n        symbol += '|ANYONECANPAY';\n      symbol = `[${symbol}]`;\n    }\n\n    return item.slice(0, -1).toString('hex') + symbol;\n  }\n\n  return item.toString('hex');\n};\n\n/**\n * Sighash with fork value for replay protection\n * @param {SighashType} sighash\n * @param {Number} value\n * @returns {SighashType}\n */\n\nexports.hashTypeWithForkValue = function hashTypeWithForkValue(sighash, value) {\n  return (value << 8) | (sighash & 0xff);\n};\n\n/**\n * Get fork value from hashtype\n * @param {SighashType} sighash\n * @returns {Number}\n */\n\nexports.getHashTypeForkValue = function getHashTypeForkValue(sighash) {\n  return (sighash >>> 8);\n};\n"]},"metadata":{},"sourceType":"module"}