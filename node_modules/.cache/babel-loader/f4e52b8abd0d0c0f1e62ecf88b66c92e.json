{"ast":null,"code":"/*!\n * consensus.js - consensus constants and helpers for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n/**\n * @module protocol/consensus\n */\n\nconst assert = require('bsert');\n\nconst BN = require('bcrypto/lib/bn.js');\n/**\n * One bitcoin in satoshis.\n * @const {Amount}\n * @default\n */\n\n\nexports.COIN = 100000000;\n/**\n * Maximum amount of money in satoshis:\n * `21million * 1btc` (consensus).\n * @const {Amount}\n * @default\n */\n\nexports.MAX_MONEY = 21000000 * exports.COIN;\n/**\n * Base block subsidy (consensus).\n * Note to shitcoin implementors: if you\n * increase this to anything greater than\n * 33 bits, getReward will have to be\n * modified to handle the shifts.\n * @const {Amount}\n * @default\n */\n\nexports.BASE_REWARD = 50 * exports.COIN;\n/**\n * Half base block subsidy. Required to\n * calculate the reward properly (with\n * only 32 bit shifts available).\n * @const {Amount}\n * @default\n */\n\nexports.HALF_REWARD = Math.floor(exports.BASE_REWARD / 2);\n/**\n * Maximum block base size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIZE = 1000000;\n/**\n * Maximum block base size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_FORK_BLOCK_SIZE = 32000000;\n/**\n * Maximum transaction size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIZE = 1000000;\n/**\n * Maximum sigcheck operations per transaction.\n * @const {Number\n * @default\n */\n\nexports.MAX_TX_SIGCHECKS = 3000;\n/**\n * Ratio between the allowable block-size / sigchecks during sigcheck\n * operations in a block. (Network rule)\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGCHECKS_RATIO = 141;\n/**\n * Minimum transaction size (consensus)\n * @const {Number}\n * @see https://bitslog.wordpress.com/2018/06/09/leaf-node-weakness-in-bitcoin-merkle-tree-design/\n * @default\n */\n\nexports.MIN_TX_SIZE = 100;\n/**\n * Maximum block serialization size (protocol).\n * @const {Number}\n * @default\n */\n\nexports.MAX_RAW_BLOCK_SIZE = 32000000;\n/**\n * Maximum block sigops per mb (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGOPS_PER_MB = 20000;\n/**\n * Maximum transaction sigops\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIGOPS = 20000;\n/**\n * Maximum block sigops cost (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGOPS_COST = 80000;\n/**\n * Maximum size for coinbase script sig\n * @const {Number}\n * @default\n */\n\nexports.MAX_COINBASE_SCRIPTSIG_SIZE = 100;\n/**\n * Address for Coinbase Rule (8% of block reward+fees goes to this address)\n * @const {String}\n * @default\n */\n\nexports.COINBASE_RULE_ADDR = 'ecash:pqnqv9lt7e5vjyp0w88zf2af0l92l8rxdg2jj94l5j';\n/**\n * Size of set to pick median time from.\n * @const {Number}\n * @default\n */\n\nexports.MEDIAN_TIMESPAN = 11;\n/**\n * What bits to set in version\n * for versionbits blocks.\n * @const {Number}\n * @default\n */\n\nexports.VERSION_TOP_BITS = 0x20000000;\n/**\n * What bitmask determines whether\n * versionbits is in use.\n * @const {Number}\n * @default\n */\n\nexports.VERSION_TOP_MASK = 0xe0000000;\n/**\n * Number of blocks before a coinbase\n * spend can occur (consensus).\n * @const {Number}\n * @default\n */\n\nexports.COINBASE_MATURITY = 100;\n/**\n * nLockTime threshold for differentiating\n * between height and time (consensus).\n * Tue Nov 5 00:53:20 1985 UTC\n * @const {Number}\n * @default\n */\n\nexports.LOCKTIME_THRESHOLD = 500000000;\n/**\n * Highest nSequence bit -- disables\n * sequence locktimes (consensus).\n * @const {Number}\n */\n\nexports.SEQUENCE_DISABLE_FLAG = 1 << 31 >>> 0;\n/**\n * Sequence time: height or time (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_TYPE_FLAG = 1 << 22;\n/**\n * Sequence granularity for time (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_GRANULARITY = 9;\n/**\n * Sequence mask (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_MASK = 0x0000ffff;\n/**\n * Max serialized script size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_SIZE = 10000;\n/**\n * Max stack size during execution (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_STACK = 1000;\n/**\n * Max script element size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_PUSH = 520;\n/**\n * Max opcodes executed (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_OPS = 201;\n/**\n * Max `n` value for multisig (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_MULTISIG_PUBKEYS = 20;\n/**\n * The date bip16 (p2sh) was activated (consensus).\n * @const {Number}\n * @default\n */\n\nexports.BIP16_TIME = 1333238400;\n/**\n * A hash of all zeroes.\n * @const {Buffer}\n * @default\n */\n\nexports.ZERO_HASH = Buffer.alloc(32, 0x00);\n/**\n * A hash of all zeroes.\n * @const {String}\n * @default\n */\n\nexports.NULL_HASH = '0000000000000000000000000000000000000000000000000000000000000000';\n/**\n * Anti replay commitment.\n * @const {String}\n * @default\n */\n\nexports.ANTI_REPLAY_COMMITMENT = 'Bitcoin: A Peer-to-Peer Electronic Cash System';\n/**\n * Convert a compact number to a big number.\n * Used for `block.bits` -> `target` conversion.\n * @param {Number} compact\n * @returns {BN}\n */\n\nexports.fromCompact = function fromCompact(compact) {\n  if (compact === 0) return new BN(0);\n  const exponent = compact >>> 24;\n  const negative = compact >>> 23 & 1;\n  let mantissa = compact & 0x7fffff;\n  let num;\n\n  if (exponent <= 3) {\n    mantissa >>>= 8 * (3 - exponent);\n    num = new BN(mantissa);\n  } else {\n    num = new BN(mantissa);\n    num.iushln(8 * (exponent - 3));\n  }\n\n  if (negative) num.ineg();\n  return num;\n};\n/**\n * Convert a big number to a compact number.\n * Used for `target` -> `block.bits` conversion.\n * @param {BN} num\n * @returns {Number}\n */\n\n\nexports.toCompact = function toCompact(num) {\n  if (num.isZero()) return 0;\n  let exponent = num.byteLength();\n  let mantissa;\n\n  if (exponent <= 3) {\n    mantissa = num.toNumber();\n    mantissa <<= 8 * (3 - exponent);\n  } else {\n    mantissa = num.ushrn(8 * (exponent - 3)).toNumber();\n  }\n\n  if (mantissa & 0x800000) {\n    mantissa >>= 8;\n    exponent++;\n  }\n\n  let compact = exponent << 24 | mantissa;\n  if (num.isNeg()) compact |= 0x800000;\n  compact >>>= 0;\n  return compact;\n};\n/**\n * Verify proof-of-work.\n * @param {Hash} hash\n * @param {Number} bits\n * @returns {Boolean}\n */\n\n\nexports.verifyPOW = function verifyPOW(hash, bits) {\n  const target = exports.fromCompact(bits);\n  if (target.isNeg() || target.isZero()) return false;\n  if (target.bitLength() > 256) return false;\n  const num = new BN(hash, 'le');\n  if (num.gt(target)) return false;\n  return true;\n};\n/**\n * Calculate block subsidy.\n * @param {Number} height - Reward era by height.\n * @returns {Amount}\n */\n\n\nexports.getReward = function getReward(height, interval) {\n  assert(height >= 0, 'Bad height for reward.');\n  const halvings = Math.floor(height / interval); // BIP 42 (well, our own version of it,\n  // since we can only handle 32 bit shifts).\n  // https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki\n\n  if (halvings >= 33) return 0; // We need to shift right by `halvings`,\n  // but 50 btc is a 33 bit number, so we\n  // cheat. We only start halving once the\n  // halvings are at least 1.\n\n  if (halvings === 0) return exports.BASE_REWARD;\n  return exports.HALF_REWARD >>> halvings - 1;\n};\n/**\n * Test version bit.\n * @param {Number} version\n * @param {Number} bit\n * @returns {Boolean}\n */\n\n\nexports.hasBit = function hasBit(version, bit) {\n  const TOP_MASK = exports.VERSION_TOP_MASK;\n  const TOP_BITS = exports.VERSION_TOP_BITS;\n  const bits = (version & TOP_MASK) >>> 0;\n  const mask = 1 << bit;\n  return bits === TOP_BITS && (version & mask) !== 0;\n};\n/**\n * Calculate max block sigops.\n * @param {Number} size\n * @returns {Number}\n */\n\n\nexports.maxBlockSigops = function maxBlockSigops(size) {\n  const mb = 1 + ((size - 1) / 1e6 | 0);\n  return mb * exports.MAX_BLOCK_SIGOPS_PER_MB;\n};\n/**\n * Calculate maximum block sigchecks.\n * @param {Number} size \n * @returns {Number}\n */\n\n\nexports.maxBlockSigchecks = function maxBlockSigchecks(size) {\n  return size / exports.MAX_BLOCK_SIGCHECKS_RATIO;\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/protocol/consensus.js"],"names":["assert","require","BN","exports","COIN","MAX_MONEY","BASE_REWARD","HALF_REWARD","Math","floor","MAX_BLOCK_SIZE","MAX_FORK_BLOCK_SIZE","MAX_TX_SIZE","MAX_TX_SIGCHECKS","MAX_BLOCK_SIGCHECKS_RATIO","MIN_TX_SIZE","MAX_RAW_BLOCK_SIZE","MAX_BLOCK_SIGOPS_PER_MB","MAX_TX_SIGOPS","MAX_BLOCK_SIGOPS_COST","MAX_COINBASE_SCRIPTSIG_SIZE","COINBASE_RULE_ADDR","MEDIAN_TIMESPAN","VERSION_TOP_BITS","VERSION_TOP_MASK","COINBASE_MATURITY","LOCKTIME_THRESHOLD","SEQUENCE_DISABLE_FLAG","SEQUENCE_TYPE_FLAG","SEQUENCE_GRANULARITY","SEQUENCE_MASK","MAX_SCRIPT_SIZE","MAX_SCRIPT_STACK","MAX_SCRIPT_PUSH","MAX_SCRIPT_OPS","MAX_MULTISIG_PUBKEYS","BIP16_TIME","ZERO_HASH","Buffer","alloc","NULL_HASH","ANTI_REPLAY_COMMITMENT","fromCompact","compact","exponent","negative","mantissa","num","iushln","ineg","toCompact","isZero","byteLength","toNumber","ushrn","isNeg","verifyPOW","hash","bits","target","bitLength","gt","getReward","height","interval","halvings","hasBit","version","bit","TOP_MASK","TOP_BITS","mask","maxBlockSigops","size","mb","maxBlockSigchecks"],"mappings":"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","sourcesContent":["/*!\n * consensus.js - consensus constants and helpers for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\n/**\n * @module protocol/consensus\n */\n\nconst assert = require('bsert');\nconst BN = require('bcrypto/lib/bn.js');\n\n/**\n * One bitcoin in satoshis.\n * @const {Amount}\n * @default\n */\n\nexports.COIN = 100000000;\n\n/**\n * Maximum amount of money in satoshis:\n * `21million * 1btc` (consensus).\n * @const {Amount}\n * @default\n */\n\nexports.MAX_MONEY = 21000000 * exports.COIN;\n\n/**\n * Base block subsidy (consensus).\n * Note to shitcoin implementors: if you\n * increase this to anything greater than\n * 33 bits, getReward will have to be\n * modified to handle the shifts.\n * @const {Amount}\n * @default\n */\n\nexports.BASE_REWARD = 50 * exports.COIN;\n\n/**\n * Half base block subsidy. Required to\n * calculate the reward properly (with\n * only 32 bit shifts available).\n * @const {Amount}\n * @default\n */\n\nexports.HALF_REWARD = Math.floor(exports.BASE_REWARD / 2);\n\n/**\n * Maximum block base size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIZE = 1000000;\n\n/**\n * Maximum block base size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_FORK_BLOCK_SIZE = 32000000;\n\n/**\n * Maximum transaction size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIZE = 1000000;\n\n/**\n * Maximum sigcheck operations per transaction.\n * @const {Number\n * @default\n */\n\nexports.MAX_TX_SIGCHECKS = 3000;\n\n/**\n * Ratio between the allowable block-size / sigchecks during sigcheck\n * operations in a block. (Network rule)\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGCHECKS_RATIO = 141;\n\n/**\n * Minimum transaction size (consensus)\n * @const {Number}\n * @see https://bitslog.wordpress.com/2018/06/09/leaf-node-weakness-in-bitcoin-merkle-tree-design/\n * @default\n */\n\nexports.MIN_TX_SIZE = 100;\n\n/**\n * Maximum block serialization size (protocol).\n * @const {Number}\n * @default\n */\n\nexports.MAX_RAW_BLOCK_SIZE = 32000000;\n\n/**\n * Maximum block sigops per mb (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGOPS_PER_MB = 20000;\n\n/**\n * Maximum transaction sigops\n * @const {Number}\n * @default\n */\n\nexports.MAX_TX_SIGOPS = 20000;\n\n/**\n * Maximum block sigops cost (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_BLOCK_SIGOPS_COST = 80000;\n\n/**\n * Maximum size for coinbase script sig\n * @const {Number}\n * @default\n */\nexports.MAX_COINBASE_SCRIPTSIG_SIZE = 100;\n\n/**\n * Address for Coinbase Rule (8% of block reward+fees goes to this address)\n * @const {String}\n * @default\n */\n exports.COINBASE_RULE_ADDR = 'ecash:pqnqv9lt7e5vjyp0w88zf2af0l92l8rxdg2jj94l5j';\n\n/**\n * Size of set to pick median time from.\n * @const {Number}\n * @default\n */\n\nexports.MEDIAN_TIMESPAN = 11;\n\n/**\n * What bits to set in version\n * for versionbits blocks.\n * @const {Number}\n * @default\n */\n\nexports.VERSION_TOP_BITS = 0x20000000;\n\n/**\n * What bitmask determines whether\n * versionbits is in use.\n * @const {Number}\n * @default\n */\n\nexports.VERSION_TOP_MASK = 0xe0000000;\n\n/**\n * Number of blocks before a coinbase\n * spend can occur (consensus).\n * @const {Number}\n * @default\n */\n\nexports.COINBASE_MATURITY = 100;\n\n/**\n * nLockTime threshold for differentiating\n * between height and time (consensus).\n * Tue Nov 5 00:53:20 1985 UTC\n * @const {Number}\n * @default\n */\n\nexports.LOCKTIME_THRESHOLD = 500000000;\n\n/**\n * Highest nSequence bit -- disables\n * sequence locktimes (consensus).\n * @const {Number}\n */\n\nexports.SEQUENCE_DISABLE_FLAG = (1 << 31) >>> 0;\n\n/**\n * Sequence time: height or time (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_TYPE_FLAG = 1 << 22;\n\n/**\n * Sequence granularity for time (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_GRANULARITY = 9;\n\n/**\n * Sequence mask (consensus).\n * @const {Number}\n * @default\n */\n\nexports.SEQUENCE_MASK = 0x0000ffff;\n\n/**\n * Max serialized script size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_SIZE = 10000;\n\n/**\n * Max stack size during execution (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_STACK = 1000;\n\n/**\n * Max script element size (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_PUSH = 520;\n\n/**\n * Max opcodes executed (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_SCRIPT_OPS = 201;\n\n/**\n * Max `n` value for multisig (consensus).\n * @const {Number}\n * @default\n */\n\nexports.MAX_MULTISIG_PUBKEYS = 20;\n\n/**\n * The date bip16 (p2sh) was activated (consensus).\n * @const {Number}\n * @default\n */\n\nexports.BIP16_TIME = 1333238400;\n\n/**\n * A hash of all zeroes.\n * @const {Buffer}\n * @default\n */\n\nexports.ZERO_HASH = Buffer.alloc(32, 0x00);\n\n/**\n * A hash of all zeroes.\n * @const {String}\n * @default\n */\n\nexports.NULL_HASH =\n  '0000000000000000000000000000000000000000000000000000000000000000';\n\n/**\n * Anti replay commitment.\n * @const {String}\n * @default\n */\n\nexports.ANTI_REPLAY_COMMITMENT =\n  'Bitcoin: A Peer-to-Peer Electronic Cash System';\n\n/**\n * Convert a compact number to a big number.\n * Used for `block.bits` -> `target` conversion.\n * @param {Number} compact\n * @returns {BN}\n */\n\nexports.fromCompact = function fromCompact(compact) {\n  if (compact === 0)\n    return new BN(0);\n\n  const exponent = compact >>> 24;\n  const negative = (compact >>> 23) & 1;\n\n  let mantissa = compact & 0x7fffff;\n  let num;\n\n  if (exponent <= 3) {\n    mantissa >>>= 8 * (3 - exponent);\n    num = new BN(mantissa);\n  } else {\n    num = new BN(mantissa);\n    num.iushln(8 * (exponent - 3));\n  }\n\n  if (negative)\n    num.ineg();\n\n  return num;\n};\n\n/**\n * Convert a big number to a compact number.\n * Used for `target` -> `block.bits` conversion.\n * @param {BN} num\n * @returns {Number}\n */\n\nexports.toCompact = function toCompact(num) {\n  if (num.isZero())\n    return 0;\n\n  let exponent = num.byteLength();\n  let mantissa;\n\n  if (exponent <= 3) {\n    mantissa = num.toNumber();\n    mantissa <<= 8 * (3 - exponent);\n  } else {\n    mantissa = num.ushrn(8 * (exponent - 3)).toNumber();\n  }\n\n  if (mantissa & 0x800000) {\n    mantissa >>= 8;\n    exponent++;\n  }\n\n  let compact = (exponent << 24) | mantissa;\n\n  if (num.isNeg())\n    compact |= 0x800000;\n\n  compact >>>= 0;\n\n  return compact;\n};\n\n/**\n * Verify proof-of-work.\n * @param {Hash} hash\n * @param {Number} bits\n * @returns {Boolean}\n */\n\nexports.verifyPOW = function verifyPOW(hash, bits) {\n  const target = exports.fromCompact(bits);\n\n  if (target.isNeg() || target.isZero())\n    return false;\n\n  if (target.bitLength() > 256)\n    return false;\n\n  const num = new BN(hash, 'le');\n\n  if (num.gt(target))\n    return false;\n\n  return true;\n};\n\n/**\n * Calculate block subsidy.\n * @param {Number} height - Reward era by height.\n * @returns {Amount}\n */\n\nexports.getReward = function getReward(height, interval) {\n  assert(height >= 0, 'Bad height for reward.');\n\n  const halvings = Math.floor(height / interval);\n\n  // BIP 42 (well, our own version of it,\n  // since we can only handle 32 bit shifts).\n  // https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki\n  if (halvings >= 33)\n    return 0;\n\n  // We need to shift right by `halvings`,\n  // but 50 btc is a 33 bit number, so we\n  // cheat. We only start halving once the\n  // halvings are at least 1.\n  if (halvings === 0)\n    return exports.BASE_REWARD;\n\n  return exports.HALF_REWARD >>> (halvings - 1);\n};\n\n/**\n * Test version bit.\n * @param {Number} version\n * @param {Number} bit\n * @returns {Boolean}\n */\n\nexports.hasBit = function hasBit(version, bit) {\n  const TOP_MASK = exports.VERSION_TOP_MASK;\n  const TOP_BITS = exports.VERSION_TOP_BITS;\n  const bits = (version & TOP_MASK) >>> 0;\n  const mask = 1 << bit;\n  return bits === TOP_BITS && (version & mask) !== 0;\n};\n\n/**\n * Calculate max block sigops.\n * @param {Number} size\n * @returns {Number}\n */\n\nexports.maxBlockSigops = function maxBlockSigops(size) {\n  const mb = 1 + ((size - 1) / 1e6 | 0);\n  return mb * exports.MAX_BLOCK_SIGOPS_PER_MB;\n};\n\n/**\n * Calculate maximum block sigchecks.\n * @param {Number} size \n * @returns {Number}\n */\n\nexports.maxBlockSigchecks = function maxBlockSigchecks(size) {\n  return size / exports.MAX_BLOCK_SIGCHECKS_RATIO;\n};\n"]},"metadata":{},"sourceType":"module"}