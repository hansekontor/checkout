{"ast":null,"code":"/*!\n * network.js - network object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst binary = require('../utils/binary');\n\nconst networks = require('./networks');\n\nconst consensus = require('./consensus');\n\nconst TimeData = require('./timedata');\n/**\n * Network\n * Represents a network.\n * @alias module:protocol.Network\n */\n\n\nclass Network {\n  /**\n   * Create a network.\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options) {\n    assert(!Network[options.type], 'Cannot create two networks.');\n    this.type = options.type;\n    this.seeds = options.seeds;\n    this.magic = options.magic;\n    this.port = options.port;\n    this.checkpointMap = options.checkpointMap;\n    this.lastCheckpoint = options.lastCheckpoint;\n    this.checkpoints = [];\n    this.halvingInterval = options.halvingInterval;\n    this.genesis = options.genesis;\n    this.genesisBlock = options.genesisBlock;\n    this.pow = options.pow;\n    this.block = options.block;\n    this.bip30 = options.bip30;\n    this.activationThreshold = options.activationThreshold;\n    this.minerWindow = options.minerWindow;\n    this.deployments = options.deployments;\n    this.deploys = options.deploys;\n    this.unknownBits = ~consensus.VERSION_TOP_MASK;\n    this.keyPrefix = options.keyPrefix;\n    this.addressPrefix = options.addressPrefix;\n    this.requireStandard = options.requireStandard;\n    this.rpcPort = options.rpcPort;\n    this.walletPort = options.walletPort;\n    this.minRelay = options.minRelay;\n    this.feeRate = options.feeRate;\n    this.maxFeeRate = options.maxFeeRate;\n    this.selfConnect = options.selfConnect;\n    this.requestMempool = options.requestMempool;\n    this.time = new TimeData();\n    this.init();\n  }\n  /**\n   * Get a deployment by bit index.\n   * @param {Number} bit\n   * @returns {Object}\n   */\n\n\n  init() {\n    let bits = 0;\n\n    for (const deployment of this.deploys) bits |= 1 << deployment.bit;\n\n    bits |= consensus.VERSION_TOP_MASK;\n    this.unknownBits = ~bits >>> 0;\n\n    for (const key of Object.keys(this.checkpointMap)) {\n      const hash = this.checkpointMap[key];\n      const height = Number(key);\n      this.checkpoints.push({\n        hash,\n        height\n      });\n    }\n\n    this.checkpoints.sort(cmpNode);\n  }\n  /**\n   * Get a deployment by bit index.\n   * @param {Number} bit\n   * @returns {Object}\n   */\n\n\n  byBit(bit) {\n    const index = binary.search(this.deploys, bit, cmpBit);\n    if (index === -1) return null;\n    return this.deploys[index];\n  }\n  /**\n   * Get network adjusted time.\n   * @returns {Number}\n   */\n\n\n  now() {\n    return this.time.now();\n  }\n  /**\n   * Get network adjusted time in milliseconds.\n   * @returns {Number}\n   */\n\n\n  ms() {\n    return this.time.ms();\n  }\n  /**\n   * Create a network. Get existing network if possible.\n   * @param {NetworkType|Object} options\n   * @returns {Network}\n   */\n\n\n  static create(options) {\n    if (typeof options === 'string') options = networks[options];\n    assert(options, 'Unknown network.');\n    if (Network[options.type]) return Network[options.type];\n    const network = new Network(options);\n    Network[network.type] = network;\n    if (!Network.primary) Network.primary = network;\n    return network;\n  }\n  /**\n   * Set the default network. This network will be used\n   * if nothing is passed as the `network` option for\n   * certain objects.\n   * @param {NetworkType} type - Network type.\n   * @returns {Network}\n   */\n\n\n  static set(type) {\n    assert(typeof type === 'string', 'Bad network.');\n    Network.primary = Network.get(type);\n    Network.type = type;\n    return Network.primary;\n  }\n  /**\n   * Get a network with a string or a Network object.\n   * @param {NetworkType|Network} type - Network type.\n   * @returns {Network}\n   */\n\n\n  static get(type) {\n    if (!type) {\n      assert(Network.primary, 'No default network.');\n      return Network.primary;\n    }\n\n    if (type instanceof Network) return type;\n    if (typeof type === 'string') return Network.create(type);\n    throw new Error('Unknown network.');\n  }\n  /**\n   * Get a network with a string or a Network object.\n   * @param {NetworkType|Network} type - Network type.\n   * @returns {Network}\n   */\n\n\n  static ensure(type) {\n    if (!type) {\n      assert(Network.primary, 'No default network.');\n      return Network.primary;\n    }\n\n    if (type instanceof Network) return type;\n\n    if (typeof type === 'string') {\n      if (networks[type]) return Network.create(type);\n    }\n\n    assert(Network.primary, 'No default network.');\n    return Network.primary;\n  }\n  /**\n   * Get a network by an associated comparator.\n   * @private\n   * @param {Object} value\n   * @param {Function} compare\n   * @param {Network|null} network\n   * @param {String} name\n   * @returns {Network}\n   */\n\n\n  static by(value, compare, network, name) {\n    if (network) {\n      network = Network.get(network);\n      if (compare(network, value)) return network;\n      throw new Error(`Network mismatch for ${name}.`);\n    }\n\n    for (const type of networks.types) {\n      network = networks[type];\n      if (compare(network, value)) return Network.get(type);\n    }\n\n    throw new Error(`Network not found for ${name}.`);\n  }\n  /**\n   * Get a network by its magic number.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromMagic(value, network) {\n    return Network.by(value, cmpMagic, network, 'magic number');\n  }\n  /**\n   * Get a network by its WIF prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromWIF(prefix, network) {\n    return Network.by(prefix, cmpWIF, network, 'WIF');\n  }\n  /**\n   * Get a network by its xpubkey prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromPublic(prefix, network) {\n    return Network.by(prefix, cmpPub, network, 'xpubkey');\n  }\n  /**\n   * Get a network by its xprivkey prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromPrivate(prefix, network) {\n    return Network.by(prefix, cmpPriv, network, 'xprivkey');\n  }\n  /**\n   * Get a network by its xpubkey base58 prefix.\n   * @param {String} prefix\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromPublic58(prefix, network) {\n    return Network.by(prefix, cmpPub58, network, 'xpubkey');\n  }\n  /**\n   * Get a network by its xprivkey base58 prefix.\n   * @param {String} prefix\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromPrivate58(prefix, network) {\n    return Network.by(prefix, cmpPriv58, network, 'xprivkey');\n  }\n  /**\n   * Get a network by its base58 address prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromAddress(prefix, network) {\n    return Network.by(prefix, cmpAddress, network, 'base58 address');\n  }\n  /**\n   * Get a network by its cashaddr address prefix.\n   * @param {String} hrp\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n\n  static fromCashAddr(prefix, network) {\n    return Network.by(prefix, cmpCashAddr, network, 'cashaddr address');\n  }\n  /**\n   * Convert the network to a string.\n   * @returns {String}\n   */\n\n\n  toString() {\n    return this.type;\n  }\n  /**\n   * Inspect the network.\n   * @returns {String}\n   */\n\n\n  inspect() {\n    return `<Network: ${this.type}>`;\n  }\n  /**\n   * Test an object to see if it is a Network.\n   * @param {Object} obj\n   * @returns {Boolean}\n   */\n\n\n  static isNetwork(obj) {\n    return obj instanceof Network;\n  }\n\n}\n/**\n * Default network.\n * @type {Network}\n */\n\n\nNetwork.primary = null;\n/**\n * Default network type.\n * @type {String}\n */\n\nNetwork.type = null;\n/*\n * Networks (to avoid hash table mode).\n */\n\nNetwork.main = null;\nNetwork.testnet = null;\nNetwork.regtest = null;\nNetwork.segnet4 = null;\nNetwork.simnet = null;\n/*\n * Set initial network.\n */\n\nNetwork.set(process.env.BCASH_NETWORK || 'main');\n/*\n * Helpers\n */\n\nfunction cmpBit(a, b) {\n  return a.bit - b;\n}\n\nfunction cmpNode(a, b) {\n  return a.height - b.height;\n}\n\nfunction cmpMagic(network, magic) {\n  return network.magic === magic;\n}\n\nfunction cmpWIF(network, prefix) {\n  return network.keyPrefix.privkey === prefix;\n}\n\nfunction cmpPub(network, prefix) {\n  return network.keyPrefix.xpubkey === prefix;\n}\n\nfunction cmpPriv(network, prefix) {\n  return network.keyPrefix.xprivkey === prefix;\n}\n\nfunction cmpPub58(network, prefix) {\n  return network.keyPrefix.xpubkey58 === prefix;\n}\n\nfunction cmpPriv58(network, prefix) {\n  return network.keyPrefix.xprivkey58 === prefix;\n}\n\nfunction cmpAddress(network, prefix) {\n  const prefixes = network.addressPrefix;\n\n  switch (prefix) {\n    case prefixes.pubkeyhash:\n    case prefixes.scripthash:\n      return true;\n  }\n\n  return false;\n}\n\nfunction cmpCashAddr(network, prefix) {\n  return network.addressPrefix.cashaddr === prefix;\n}\n/*\n * Expose\n */\n\n\nmodule.exports = Network;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/protocol/network.js"],"names":["assert","require","binary","networks","consensus","TimeData","Network","constructor","options","type","seeds","magic","port","checkpointMap","lastCheckpoint","checkpoints","halvingInterval","genesis","genesisBlock","pow","block","bip30","activationThreshold","minerWindow","deployments","deploys","unknownBits","VERSION_TOP_MASK","keyPrefix","addressPrefix","requireStandard","rpcPort","walletPort","minRelay","feeRate","maxFeeRate","selfConnect","requestMempool","time","init","bits","deployment","bit","key","Object","keys","hash","height","Number","push","sort","cmpNode","byBit","index","search","cmpBit","now","ms","create","network","primary","set","get","Error","ensure","by","value","compare","name","types","fromMagic","cmpMagic","fromWIF","prefix","cmpWIF","fromPublic","cmpPub","fromPrivate","cmpPriv","fromPublic58","cmpPub58","fromPrivate58","cmpPriv58","fromAddress","cmpAddress","fromCashAddr","cmpCashAddr","toString","inspect","isNetwork","obj","main","testnet","regtest","segnet4","simnet","process","env","BCASH_NETWORK","a","b","privkey","xpubkey","xprivkey","xpubkey58","xprivkey58","prefixes","pubkeyhash","scripthash","cashaddr","module","exports"],"mappings":"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","sourcesContent":["/*!\n * network.js - network object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst binary = require('../utils/binary');\nconst networks = require('./networks');\nconst consensus = require('./consensus');\nconst TimeData = require('./timedata');\n\n/**\n * Network\n * Represents a network.\n * @alias module:protocol.Network\n */\n\nclass Network {\n  /**\n   * Create a network.\n   * @constructor\n   * @param {Object} options\n   */\n\n  constructor(options) {\n    assert(!Network[options.type], 'Cannot create two networks.');\n\n    this.type = options.type;\n    this.seeds = options.seeds;\n    this.magic = options.magic;\n    this.port = options.port;\n    this.checkpointMap = options.checkpointMap;\n    this.lastCheckpoint = options.lastCheckpoint;\n    this.checkpoints = [];\n    this.halvingInterval = options.halvingInterval;\n    this.genesis = options.genesis;\n    this.genesisBlock = options.genesisBlock;\n    this.pow = options.pow;\n    this.block = options.block;\n    this.bip30 = options.bip30;\n    this.activationThreshold = options.activationThreshold;\n    this.minerWindow = options.minerWindow;\n    this.deployments = options.deployments;\n    this.deploys = options.deploys;\n    this.unknownBits = ~consensus.VERSION_TOP_MASK;\n    this.keyPrefix = options.keyPrefix;\n    this.addressPrefix = options.addressPrefix;\n    this.requireStandard = options.requireStandard;\n    this.rpcPort = options.rpcPort;\n    this.walletPort = options.walletPort;\n    this.minRelay = options.minRelay;\n    this.feeRate = options.feeRate;\n    this.maxFeeRate = options.maxFeeRate;\n    this.selfConnect = options.selfConnect;\n    this.requestMempool = options.requestMempool;\n    this.time = new TimeData();\n\n    this.init();\n  }\n\n  /**\n   * Get a deployment by bit index.\n   * @param {Number} bit\n   * @returns {Object}\n   */\n\n  init() {\n    let bits = 0;\n\n    for (const deployment of this.deploys)\n      bits |= 1 << deployment.bit;\n\n    bits |= consensus.VERSION_TOP_MASK;\n\n    this.unknownBits = ~bits >>> 0;\n\n    for (const key of Object.keys(this.checkpointMap)) {\n      const hash = this.checkpointMap[key];\n      const height = Number(key);\n\n      this.checkpoints.push({ hash, height });\n    }\n\n    this.checkpoints.sort(cmpNode);\n  }\n\n  /**\n   * Get a deployment by bit index.\n   * @param {Number} bit\n   * @returns {Object}\n   */\n\n  byBit(bit) {\n    const index = binary.search(this.deploys, bit, cmpBit);\n\n    if (index === -1)\n      return null;\n\n    return this.deploys[index];\n  }\n\n  /**\n   * Get network adjusted time.\n   * @returns {Number}\n   */\n\n  now() {\n    return this.time.now();\n  }\n\n  /**\n   * Get network adjusted time in milliseconds.\n   * @returns {Number}\n   */\n\n  ms() {\n    return this.time.ms();\n  }\n\n  /**\n   * Create a network. Get existing network if possible.\n   * @param {NetworkType|Object} options\n   * @returns {Network}\n   */\n\n  static create(options) {\n    if (typeof options === 'string')\n      options = networks[options];\n\n    assert(options, 'Unknown network.');\n\n    if (Network[options.type])\n      return Network[options.type];\n\n    const network = new Network(options);\n\n    Network[network.type] = network;\n\n    if (!Network.primary)\n      Network.primary = network;\n\n    return network;\n  }\n\n  /**\n   * Set the default network. This network will be used\n   * if nothing is passed as the `network` option for\n   * certain objects.\n   * @param {NetworkType} type - Network type.\n   * @returns {Network}\n   */\n\n  static set(type) {\n    assert(typeof type === 'string', 'Bad network.');\n    Network.primary = Network.get(type);\n    Network.type = type;\n    return Network.primary;\n  }\n\n  /**\n   * Get a network with a string or a Network object.\n   * @param {NetworkType|Network} type - Network type.\n   * @returns {Network}\n   */\n\n  static get(type) {\n    if (!type) {\n      assert(Network.primary, 'No default network.');\n      return Network.primary;\n    }\n\n    if (type instanceof Network)\n      return type;\n\n    if (typeof type === 'string')\n      return Network.create(type);\n\n    throw new Error('Unknown network.');\n  }\n\n  /**\n   * Get a network with a string or a Network object.\n   * @param {NetworkType|Network} type - Network type.\n   * @returns {Network}\n   */\n\n  static ensure(type) {\n    if (!type) {\n      assert(Network.primary, 'No default network.');\n      return Network.primary;\n    }\n\n    if (type instanceof Network)\n      return type;\n\n    if (typeof type === 'string') {\n      if (networks[type])\n        return Network.create(type);\n    }\n\n    assert(Network.primary, 'No default network.');\n\n    return Network.primary;\n  }\n\n  /**\n   * Get a network by an associated comparator.\n   * @private\n   * @param {Object} value\n   * @param {Function} compare\n   * @param {Network|null} network\n   * @param {String} name\n   * @returns {Network}\n   */\n\n  static by(value, compare, network, name) {\n    if (network) {\n      network = Network.get(network);\n      if (compare(network, value))\n        return network;\n      throw new Error(`Network mismatch for ${name}.`);\n    }\n\n    for (const type of networks.types) {\n      network = networks[type];\n      if (compare(network, value))\n        return Network.get(type);\n    }\n\n    throw new Error(`Network not found for ${name}.`);\n  }\n\n  /**\n   * Get a network by its magic number.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromMagic(value, network) {\n    return Network.by(value, cmpMagic, network, 'magic number');\n  }\n\n  /**\n   * Get a network by its WIF prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromWIF(prefix, network) {\n    return Network.by(prefix, cmpWIF, network, 'WIF');\n  }\n\n  /**\n   * Get a network by its xpubkey prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromPublic(prefix, network) {\n    return Network.by(prefix, cmpPub, network, 'xpubkey');\n  }\n\n  /**\n   * Get a network by its xprivkey prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromPrivate(prefix, network) {\n    return Network.by(prefix, cmpPriv, network, 'xprivkey');\n  }\n\n  /**\n   * Get a network by its xpubkey base58 prefix.\n   * @param {String} prefix\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromPublic58(prefix, network) {\n    return Network.by(prefix, cmpPub58, network, 'xpubkey');\n  }\n\n  /**\n   * Get a network by its xprivkey base58 prefix.\n   * @param {String} prefix\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromPrivate58(prefix, network) {\n    return Network.by(prefix, cmpPriv58, network, 'xprivkey');\n  }\n\n  /**\n   * Get a network by its base58 address prefix.\n   * @param {Number} value\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromAddress(prefix, network) {\n    return Network.by(prefix, cmpAddress, network, 'base58 address');\n  }\n\n  /**\n   * Get a network by its cashaddr address prefix.\n   * @param {String} hrp\n   * @param {Network?} network\n   * @returns {Network}\n   */\n\n  static fromCashAddr(prefix, network) {\n    return Network.by(prefix, cmpCashAddr, network, 'cashaddr address');\n  }\n\n  /**\n   * Convert the network to a string.\n   * @returns {String}\n   */\n\n  toString() {\n    return this.type;\n  }\n\n  /**\n   * Inspect the network.\n   * @returns {String}\n   */\n\n  inspect() {\n    return `<Network: ${this.type}>`;\n  }\n\n  /**\n   * Test an object to see if it is a Network.\n   * @param {Object} obj\n   * @returns {Boolean}\n   */\n\n  static isNetwork(obj) {\n    return obj instanceof Network;\n  }\n}\n\n/**\n * Default network.\n * @type {Network}\n */\n\nNetwork.primary = null;\n\n/**\n * Default network type.\n * @type {String}\n */\n\nNetwork.type = null;\n\n/*\n * Networks (to avoid hash table mode).\n */\n\nNetwork.main = null;\nNetwork.testnet = null;\nNetwork.regtest = null;\nNetwork.segnet4 = null;\nNetwork.simnet = null;\n\n/*\n * Set initial network.\n */\n\nNetwork.set(process.env.BCASH_NETWORK || 'main');\n\n/*\n * Helpers\n */\n\nfunction cmpBit(a, b) {\n  return a.bit - b;\n}\n\nfunction cmpNode(a, b) {\n  return a.height - b.height;\n}\n\nfunction cmpMagic(network, magic) {\n  return network.magic === magic;\n}\n\nfunction cmpWIF(network, prefix) {\n  return network.keyPrefix.privkey === prefix;\n}\n\nfunction cmpPub(network, prefix) {\n  return network.keyPrefix.xpubkey === prefix;\n}\n\nfunction cmpPriv(network, prefix) {\n  return network.keyPrefix.xprivkey === prefix;\n}\n\nfunction cmpPub58(network, prefix) {\n  return network.keyPrefix.xpubkey58 === prefix;\n}\n\nfunction cmpPriv58(network, prefix) {\n  return network.keyPrefix.xprivkey58 === prefix;\n}\n\nfunction cmpAddress(network, prefix) {\n  const prefixes = network.addressPrefix;\n\n  switch (prefix) {\n    case prefixes.pubkeyhash:\n    case prefixes.scripthash:\n      return true;\n  }\n\n  return false;\n}\n\nfunction cmpCashAddr(network, prefix) {\n  return network.addressPrefix.cashaddr === prefix;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = Network;\n"]},"metadata":{},"sourceType":"module"}