{"ast":null,"code":"/*!\n * util.js - utils for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n/**\n * @exports utils/util\n */\n\n\nconst util = exports;\n/**\n * Return hrtime (shim for browser).\n * @param {Array} time\n * @returns {Array} [seconds, nanoseconds]\n */\n\nutil.bench = function bench(time) {\n  if (!process.hrtime) {\n    const now = Date.now();\n\n    if (time) {\n      const [hi, lo] = time;\n      const start = hi * 1000 + lo / 1e6;\n      return now - start;\n    }\n\n    const ms = now % 1000; // Seconds\n\n    const hi = (now - ms) / 1000; // Nanoseconds\n\n    const lo = ms * 1e6;\n    return [hi, lo];\n  }\n\n  if (time) {\n    const [hi, lo] = process.hrtime(time);\n    return hi * 1000 + lo / 1e6;\n  }\n\n  return process.hrtime();\n};\n/**\n * Get current time in unix time (seconds).\n * @returns {Number}\n */\n\n\nutil.now = function now() {\n  return Math.floor(Date.now() / 1000);\n};\n/**\n * Get current time in unix time (milliseconds).\n * @returns {Number}\n */\n\n\nutil.ms = function ms() {\n  return Date.now();\n};\n/**\n * Create a Date ISO string from time in unix time (seconds).\n * @param {Number?} time - Seconds in unix time.\n * @returns {String}\n */\n\n\nutil.date = function date(time) {\n  if (time == null) time = util.now();\n  return new Date(time * 1000).toISOString().slice(0, -5) + 'Z';\n};\n/**\n * Get unix seconds from a Date string.\n * @param {String?} date - Date ISO String.\n * @returns {Number}\n */\n\n\nutil.time = function time(date) {\n  if (date == null) return util.now();\n  return new Date(date) / 1000 | 0;\n};\n/**\n * Reverse a hex-string.\n * @param {Buffer}\n * @returns {String} Reversed hex string.\n */\n\n\nutil.revHex = function revHex(buf) {\n  assert(Buffer.isBuffer(buf));\n  return Buffer.from(buf).reverse().toString('hex');\n};\n\nutil.fromRev = function fromRev(str) {\n  assert(typeof str === 'string');\n  assert((str.length & 1) === 0);\n  return Buffer.from(str, 'hex').reverse();\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/utils/util.js"],"names":["assert","require","util","exports","bench","time","process","hrtime","now","Date","hi","lo","start","ms","Math","floor","date","toISOString","slice","revHex","buf","Buffer","isBuffer","from","reverse","toString","fromRev","str","length"],"mappings":"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","sourcesContent":["/*!\n * util.js - utils for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\n\n/**\n * @exports utils/util\n */\n\nconst util = exports;\n\n/**\n * Return hrtime (shim for browser).\n * @param {Array} time\n * @returns {Array} [seconds, nanoseconds]\n */\n\nutil.bench = function bench(time) {\n  if (!process.hrtime) {\n    const now = Date.now();\n\n    if (time) {\n      const [hi, lo] = time;\n      const start = hi * 1000 + lo / 1e6;\n      return now - start;\n    }\n\n    const ms = now % 1000;\n\n    // Seconds\n    const hi = (now - ms) / 1000;\n\n    // Nanoseconds\n    const lo = ms * 1e6;\n\n    return [hi, lo];\n  }\n\n  if (time) {\n    const [hi, lo] = process.hrtime(time);\n    return hi * 1000 + lo / 1e6;\n  }\n\n  return process.hrtime();\n};\n\n/**\n * Get current time in unix time (seconds).\n * @returns {Number}\n */\n\nutil.now = function now() {\n  return Math.floor(Date.now() / 1000);\n};\n\n/**\n * Get current time in unix time (milliseconds).\n * @returns {Number}\n */\n\nutil.ms = function ms() {\n  return Date.now();\n};\n\n/**\n * Create a Date ISO string from time in unix time (seconds).\n * @param {Number?} time - Seconds in unix time.\n * @returns {String}\n */\n\nutil.date = function date(time) {\n  if (time == null)\n    time = util.now();\n\n  return new Date(time * 1000).toISOString().slice(0, -5) + 'Z';\n};\n\n/**\n * Get unix seconds from a Date string.\n * @param {String?} date - Date ISO String.\n * @returns {Number}\n */\n\nutil.time = function time(date) {\n  if (date == null)\n    return util.now();\n\n  return new Date(date) / 1000 | 0;\n};\n\n/**\n * Reverse a hex-string.\n * @param {Buffer}\n * @returns {String} Reversed hex string.\n */\n\nutil.revHex = function revHex(buf) {\n  assert(Buffer.isBuffer(buf));\n\n  return Buffer.from(buf).reverse().toString('hex');\n};\n\nutil.fromRev = function fromRev(str) {\n  assert(typeof str === 'string');\n  assert((str.length & 1) === 0);\n\n  return Buffer.from(str, 'hex').reverse();\n};\n"]},"metadata":{},"sourceType":"module"}