{"ast":null,"code":"/*!\n * rfc3279.js - rfc3279 encoding for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://tools.ietf.org/html/rfc3279\n *   https://tools.ietf.org/html/rfc5912\n */\n'use strict';\n\nconst asn1 = require('./asn1');\n\nconst pem = require('./pem');\n/**\n * DSA Parms\n */\n// Dss-Parms  ::=  SEQUENCE  {\n//     p             INTEGER,\n//     q             INTEGER,\n//     g             INTEGER  }\n\n\nclass DSAParams extends asn1.Sequence {\n  constructor(p, q, g) {\n    super();\n    this.p = new asn1.Unsigned(p);\n    this.q = new asn1.Unsigned(q);\n    this.g = new asn1.Unsigned(g);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.p.getSize();\n    size += this.q.getSize();\n    size += this.g.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.p.write(bw);\n    this.q.write(bw);\n    this.g.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.p.read(br);\n    this.q.read(br);\n    this.g.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.p.clean() && this.q.clean() && this.g.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA PARAMETERS');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA PARAMETERS');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      p: this.p,\n      q: this.q,\n      g: this.g\n    };\n  }\n\n}\n/**\n * DSA Public Key\n */\n// DSAPublicKey ::= INTEGER -- public key, Y\n\n\nclass DSAPublicKey extends asn1.Unsigned {\n  constructor(y) {\n    super(y);\n  }\n\n  get y() {\n    return this.value;\n  }\n\n  set y(value) {\n    this.value = value;\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA PUBLIC KEY');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA PUBLIC KEY');\n    return this.decode(data);\n  }\n\n}\n/**\n * DSA Signature\n */\n\n\nclass DSASignature extends asn1.Sequence {\n  constructor(r, s) {\n    super();\n    this.r = new asn1.Unsigned(r);\n    this.s = new asn1.Unsigned(s);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.r.getSize();\n    size += this.s.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.r.write(bw);\n    this.s.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.r.read(br);\n    this.s.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.r.clean() && this.s.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'DSA SIGNATURE');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'DSA SIGNATURE');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      r: this.r,\n      s: this.s\n    };\n  }\n\n}\n/*\n * Expose\n */\n\n\nexports.DSAParams = DSAParams;\nexports.DSAPublicKey = DSAPublicKey;\nexports.DSASignature = DSASignature;","map":null,"metadata":{},"sourceType":"script"}