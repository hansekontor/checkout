{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\r\n * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\r\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\r\n * is represented by an instance of this class.</p>\r\n *\r\n * @author Sean Owen\r\n */\n\n\nvar DataBlock =\n/** @class */\nfunction () {\n  function DataBlock(numDataCodewords\n  /*int*/\n  , codewords) {\n    this.numDataCodewords = numDataCodewords;\n    this.codewords = codewords;\n  }\n  /**\r\n   * <p>When QR Codes use multiple data blocks, they are actually interleaved.\r\n   * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\r\n   * method will separate the data into original blocks.</p>\r\n   *\r\n   * @param rawCodewords bytes as read directly from the QR Code\r\n   * @param version version of the QR Code\r\n   * @param ecLevel error-correction level of the QR Code\r\n   * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\r\n   *         QR Code\r\n   */\n\n\n  DataBlock.getDataBlocks = function (rawCodewords, version, ecLevel) {\n    if (rawCodewords.length !== version.getTotalCodewords()) {\n      throw new IllegalArgumentException_1.default();\n    } // Figure out the number and size of data blocks used by this version and\n    // error correction level\n\n\n    var ecBlocks = version.getECBlocksForLevel(ecLevel); // First count the total number of data blocks\n\n    var totalBlocks = 0;\n    var ecBlockArray = ecBlocks.getECBlocks();\n\n    for (var _i = 0, ecBlockArray_1 = ecBlockArray; _i < ecBlockArray_1.length; _i++) {\n      var ecBlock = ecBlockArray_1[_i];\n      totalBlocks += ecBlock.getCount();\n    } // Now establish DataBlocks of the appropriate size and number of data codewords\n\n\n    var result = new Array(totalBlocks);\n    var numResultBlocks = 0;\n\n    for (var _a = 0, ecBlockArray_2 = ecBlockArray; _a < ecBlockArray_2.length; _a++) {\n      var ecBlock = ecBlockArray_2[_a];\n\n      for (var i = 0; i < ecBlock.getCount(); i++) {\n        var numDataCodewords = ecBlock.getDataCodewords();\n        var numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n        result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n      }\n    } // All blocks have the same amount of data, except that the last n\n    // (where n may be 0) have 1 more byte. Figure out where these start.\n\n\n    var shorterBlocksTotalCodewords = result[0].codewords.length;\n    var longerBlocksStartAt = result.length - 1; // TYPESCRIPTPORT: check length is correct here\n\n    while (longerBlocksStartAt >= 0) {\n      var numCodewords = result[longerBlocksStartAt].codewords.length;\n\n      if (numCodewords === shorterBlocksTotalCodewords) {\n        break;\n      }\n\n      longerBlocksStartAt--;\n    }\n\n    longerBlocksStartAt++;\n    var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock(); // The last elements of result may be 1 element longer\n    // first fill out as many elements as all of them have\n\n    var rawCodewordsOffset = 0;\n\n    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n      }\n    } // Fill out the last data block in the longer ones\n\n\n    for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\n      result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n    } // Now add in error correction blocks\n\n\n    var max = result[0].codewords.length;\n\n    for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        var iOffset = j < longerBlocksStartAt ? i : i + 1;\n        result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\n\n    return result;\n  };\n\n  DataBlock.prototype.getNumDataCodewords = function () {\n    return this.numDataCodewords;\n  };\n\n  DataBlock.prototype.getCodewords = function () {\n    return this.codewords;\n  };\n\n  return DataBlock;\n}();\n\nexports.default = DataBlock;","map":null,"metadata":{},"sourceType":"script"}