{"ast":null,"code":"/*!\n * coinview.js - coin viewpoint object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst {\n  BufferMap\n} = require('buffer-map');\n\nconst Coins = require('./coins');\n\nconst UndoCoins = require('./undocoins');\n\nconst CoinEntry = require('./coinentry');\n/**\n * Coin View\n * Represents a coin viewpoint:\n * a snapshot of {@link Coins} objects.\n * @alias module:coins.CoinView\n * @property {Object} map\n * @property {UndoCoins} undo\n */\n\n\nclass CoinView {\n  /**\n   * Create a coin view.\n   * @constructor\n   */\n  constructor() {\n    this.map = new BufferMap();\n    this.undo = new UndoCoins();\n  } //   /**\n  //    * Get coins.\n  //    * @param {Hash} hash\n  //    * @returns {Coins} coins\n  //    */\n  //   get(hash) {\n  //     return this.map.get(hash);\n  //   }\n  //   /**\n  //    * Test whether the view has an entry.\n  //    * @param {Hash} hash\n  //    * @returns {Boolean}\n  //    */\n  //   has(hash) {\n  //     return this.map.has(hash);\n  //   }\n  //   /**\n  //    * Add coins to the collection.\n  //    * @param {Hash} hash\n  //    * @param {Coins} coins\n  //    * @returns {Coins}\n  //    */\n  //   add(hash, coins) {\n  //     this.map.set(hash, coins);\n  //     return coins;\n  //   }\n  //   /**\n  //    * Ensure existence of coins object in the collection.\n  //    * @param {Hash} hash\n  //    * @returns {Coins}\n  //    */\n  //   ensure(hash) {\n  //     const coins = this.map.get(hash);\n  //     if (coins)\n  //       return coins;\n  //     return this.add(hash, new Coins());\n  //   }\n  //   /**\n  //    * Remove coins from the collection.\n  //    * @param {Coins} coins\n  //    * @returns {Coins|null}\n  //    */\n  //   remove(hash) {\n  //     const coins = this.map.get(hash);\n  //     if (!coins)\n  //       return null;\n  //     this.map.delete(hash);\n  //     return coins;\n  //   }\n  //   /**\n  //    * Add a tx to the collection.\n  //    * @param {TX} tx\n  //    * @param {Number} height\n  //    * @returns {Coins}\n  //    */\n  //   addTX(tx, height) {\n  //     const hash = tx.hash();\n  //     const coins = Coins.fromTX(tx, height);\n  //     return this.add(hash, coins);\n  //   }\n  //   /**\n  //    * Remove a tx from the collection.\n  //    * @param {TX} tx\n  //    * @param {Number} height\n  //    * @returns {Coins}\n  //    */\n  //   removeTX(tx, height) {\n  //     const hash = tx.hash();\n  //     const coins = Coins.fromTX(tx, height);\n  //     for (const coin of coins.outputs.values())\n  //       coin.spent = true;\n  //     return this.add(hash, coins);\n  //   }\n  //   /**\n  //    * Add an entry to the collection.\n  //    * @param {Outpoint} prevout\n  //    * @param {CoinEntry} coin\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   addEntry(prevout, coin) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.ensure(hash);\n  //     return coins.add(index, coin);\n  //   }\n  //   /**\n  //    * Add a coin to the collection.\n  //    * @param {Coin} coin\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   addCoin(coin) {\n  //     const coins = this.ensure(coin.hash);\n  //     return coins.addCoin(coin);\n  //   }\n  //   /**\n  //    * Add an output to the collection.\n  //    * @param {Outpoint} prevout\n  //    * @param {Output} output\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   addOutput(prevout, output) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.ensure(hash);\n  //     return coins.addOutput(index, output);\n  //   }\n  //   /**\n  //    * Add an output to the collection by output index.\n  //    * @param {TX} tx\n  //    * @param {Number} index\n  //    * @param {Number} height\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   addIndex(tx, index, height) {\n  //     const hash = tx.hash();\n  //     const coins = this.ensure(hash);\n  //     return coins.addIndex(tx, index, height);\n  //   }\n  //   /**\n  //    * Spend an output.\n  //    * @param {Outpoint} prevout\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   spendEntry(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return null;\n  //     const coin = coins.spend(index);\n  //     if (!coin)\n  //       return null;\n  //     this.undo.push(coin);\n  //     return coin;\n  //   }\n  //   /**\n  //    * Remove an output.\n  //    * @param {Outpoint} prevout\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   removeEntry(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return null;\n  //     return coins.remove(index);\n  //   }\n  //   /**\n  //    * Test whether the view has an entry by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Boolean}\n  //    */\n  //   hasEntry(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return false;\n  //     return coins.has(index);\n  //   }\n  //   /**\n  //    * Get a single entry by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   getEntry(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return null;\n  //     return coins.get(index);\n  //   }\n  //   /**\n  //    * Test whether an entry has been spent by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Boolean}\n  //    */\n  //   isUnspent(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return false;\n  //     return coins.isUnspent(index);\n  //   }\n  //   /**\n  //    * Get a single coin by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Coin|null}\n  //    */\n  //   getCoin(prevout) {\n  //     const coins = this.get(prevout.hash);\n  //     if (!coins)\n  //       return null;\n  //     return coins.getCoin(prevout);\n  //   }\n  //   /**\n  //    * Get a single output by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Output|null}\n  //    */\n  //   getOutput(prevout) {\n  //     const {hash, index} = prevout;\n  //     const coins = this.get(hash);\n  //     if (!coins)\n  //       return null;\n  //     return coins.getOutput(index);\n  //   }\n  //   /**\n  //    * Get coins height by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Number}\n  //    */\n  //   getHeight(prevout) {\n  //     const coin = this.getEntry(prevout);\n  //     if (!coin)\n  //       return -1;\n  //     return coin.height;\n  //   }\n  //   /**\n  //    * Get coins coinbase flag by prevout.\n  //    * @param {Outpoint} prevout\n  //    * @returns {Boolean}\n  //    */\n  //   isCoinbase(prevout) {\n  //     const coin = this.getEntry(prevout);\n  //     if (!coin)\n  //       return false;\n  //     return coin.coinbase;\n  //   }\n  //   /**\n  //    * Test whether the view has an entry by input.\n  //    * @param {Input} input\n  //    * @returns {Boolean}\n  //    */\n  //   hasEntryFor(input) {\n  //     return this.hasEntry(input.prevout);\n  //   }\n  //   /**\n  //    * Get a single entry by input.\n  //    * @param {Input} input\n  //    * @returns {CoinEntry|null}\n  //    */\n  //   getEntryFor(input) {\n  //     return this.getEntry(input.prevout);\n  //   }\n  //   /**\n  //    * Test whether an entry has been spent by input.\n  //    * @param {Input} input\n  //    * @returns {Boolean}\n  //    */\n  //   isUnspentFor(input) {\n  //     return this.isUnspent(input.prevout);\n  //   }\n  //   /**\n  //    * Get a single coin by input.\n  //    * @param {Input} input\n  //    * @returns {Coin|null}\n  //    */\n  //   getCoinFor(input) {\n  //     return this.getCoin(input.prevout);\n  //   }\n  //   /**\n  //    * Get a single output by input.\n  //    * @param {Input} input\n  //    * @returns {Output|null}\n  //    */\n  //   getOutputFor(input) {\n  //     return this.getOutput(input.prevout);\n  //   }\n  //   /**\n  //    * Get coins height by input.\n  //    * @param {Input} input\n  //    * @returns {Number}\n  //    */\n  //   getHeightFor(input) {\n  //     return this.getHeight(input.prevout);\n  //   }\n  //   /**\n  //    * Get coins coinbase flag by input.\n  //    * @param {Input} input\n  //    * @returns {Boolean}\n  //    */\n  //   isCoinbaseFor(input) {\n  //     return this.isCoinbase(input.prevout);\n  //   }\n  //   /**\n  //    * Retrieve coins from database.\n  //    * @method\n  //    * @param {ChainDB} db\n  //    * @param {Outpoint} prevout\n  //    * @returns {Promise} - Returns {@link CoinEntry}.\n  //    */\n  //   async readCoin(db, prevout) {\n  //     const cache = this.getEntry(prevout);\n  //     if (cache)\n  //       return cache;\n  //     const coin = await db.readCoin(prevout);\n  //     if (!coin)\n  //       return null;\n  //     return this.addEntry(prevout, coin);\n  //   }\n  //   /**\n  //    * Read all input coins into unspent map.\n  //    * @method\n  //    * @param {ChainDB} db\n  //    * @param {TX} tx\n  //    * @returns {Promise} - Returns {Boolean}.\n  //    */\n  //   async readInputs(db, tx) {\n  //     let found = true;\n  //     for (const {prevout} of tx.inputs) {\n  //       if (!await this.readCoin(db, prevout))\n  //         found = false;\n  //     }\n  //     return found;\n  //   }\n  //   /**\n  //    * Spend coins for transaction.\n  //    * @method\n  //    * @param {ChainDB} db\n  //    * @param {TX} tx\n  //    * @returns {Promise} - Returns {Boolean}.\n  //    */\n  //   async spendInputs(db, tx) {\n  //     let i = 0;\n  //     while (i < tx.inputs.length) {\n  //       const len = Math.min(i + 4, tx.inputs.length);\n  //       const jobs = [];\n  //       for (; i < len; i++) {\n  //         const {prevout} = tx.inputs[i];\n  //         jobs.push(this.readCoin(db, prevout));\n  //       }\n  //       const coins = await Promise.all(jobs);\n  //       for (const coin of coins) {\n  //         if (!coin || coin.spent)\n  //           return false;\n  //         coin.spent = true;\n  //         this.undo.push(coin);\n  //       }\n  //     }\n  //     return true;\n  //   }\n  //   /**\n  //    * Calculate serialization size.\n  //    * @returns {Number}\n  //    */\n  //   getSize(tx) {\n  //     let size = 0;\n  //     size += tx.inputs.length;\n  //     for (const {prevout} of tx.inputs) {\n  //       const coin = this.getEntry(prevout);\n  //       if (!coin)\n  //         continue;\n  //       size += coin.getSize();\n  //     }\n  //     return size;\n  //   }\n  //   /**\n  //    * Write coin data to buffer writer\n  //    * as it pertains to a transaction.\n  //    * @param {BufferWriter} bw\n  //    * @param {TX} tx\n  //    */\n  //   toWriter(bw, tx) {\n  //     for (const {prevout} of tx.inputs) {\n  //       const coin = this.getEntry(prevout);\n  //       if (!coin) {\n  //         bw.writeU8(0);\n  //         continue;\n  //       }\n  //       bw.writeU8(1);\n  //       coin.toWriter(bw);\n  //     }\n  //     return bw;\n  //   }\n  //   /**\n  //    * Read serialized view data from a buffer\n  //    * reader as it pertains to a transaction.\n  //    * @private\n  //    * @param {BufferReader} br\n  //    * @param {TX} tx\n  //    */\n  //   fromReader(br, tx) {\n  //     for (const {prevout} of tx.inputs) {\n  //       if (br.readU8() === 0)\n  //         continue;\n  //       const coin = CoinEntry.fromReader(br);\n  //       this.addEntry(prevout, coin);\n  //     }\n  //     return this;\n  //   }\n  //   /**\n  //    * Read serialized view data from a buffer\n  //    * reader as it pertains to a transaction.\n  //    * @param {BufferReader} br\n  //    * @param {TX} tx\n  //    * @returns {CoinView}\n  //    */\n  //   static fromReader(br, tx) {\n  //     return new this().fromReader(br, tx);\n  //   }\n\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = CoinView;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/coins/coinview.js"],"names":["BufferMap","require","Coins","UndoCoins","CoinEntry","CoinView","constructor","map","undo","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAcC,OAAO,CAAC,YAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,QAAN,CAAe;AACb;AACF;AACA;AACA;AAEEC,EAAAA,WAAW,GAAG;AACZ,SAAKC,GAAL,GAAW,IAAIP,SAAJ,EAAX;AACA,SAAKQ,IAAL,GAAY,IAAIL,SAAJ,EAAZ;AACD,GATY,CAWfgBe;AAghBf;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,QAAjB","sourcesContent":["/*!\n * coinview.js - coin viewpoint object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst {BufferMap} = require('buffer-map');\nconst Coins = require('./coins');\nconst UndoCoins = require('./undocoins');\nconst CoinEntry = require('./coinentry');\n\n/**\n * Coin View\n * Represents a coin viewpoint:\n * a snapshot of {@link Coins} objects.\n * @alias module:coins.CoinView\n * @property {Object} map\n * @property {UndoCoins} undo\n */\n\nclass CoinView {\n  /**\n   * Create a coin view.\n   * @constructor\n   */\n\n  constructor() {\n    this.map = new BufferMap();\n    this.undo = new UndoCoins();\n  }\n\n//   /**\n//    * Get coins.\n//    * @param {Hash} hash\n//    * @returns {Coins} coins\n//    */\n\n//   get(hash) {\n//     return this.map.get(hash);\n//   }\n\n//   /**\n//    * Test whether the view has an entry.\n//    * @param {Hash} hash\n//    * @returns {Boolean}\n//    */\n\n//   has(hash) {\n//     return this.map.has(hash);\n//   }\n\n//   /**\n//    * Add coins to the collection.\n//    * @param {Hash} hash\n//    * @param {Coins} coins\n//    * @returns {Coins}\n//    */\n\n//   add(hash, coins) {\n//     this.map.set(hash, coins);\n//     return coins;\n//   }\n\n//   /**\n//    * Ensure existence of coins object in the collection.\n//    * @param {Hash} hash\n//    * @returns {Coins}\n//    */\n\n//   ensure(hash) {\n//     const coins = this.map.get(hash);\n\n//     if (coins)\n//       return coins;\n\n//     return this.add(hash, new Coins());\n//   }\n\n//   /**\n//    * Remove coins from the collection.\n//    * @param {Coins} coins\n//    * @returns {Coins|null}\n//    */\n\n//   remove(hash) {\n//     const coins = this.map.get(hash);\n\n//     if (!coins)\n//       return null;\n\n//     this.map.delete(hash);\n\n//     return coins;\n//   }\n\n//   /**\n//    * Add a tx to the collection.\n//    * @param {TX} tx\n//    * @param {Number} height\n//    * @returns {Coins}\n//    */\n\n//   addTX(tx, height) {\n//     const hash = tx.hash();\n//     const coins = Coins.fromTX(tx, height);\n//     return this.add(hash, coins);\n//   }\n\n//   /**\n//    * Remove a tx from the collection.\n//    * @param {TX} tx\n//    * @param {Number} height\n//    * @returns {Coins}\n//    */\n\n//   removeTX(tx, height) {\n//     const hash = tx.hash();\n//     const coins = Coins.fromTX(tx, height);\n\n//     for (const coin of coins.outputs.values())\n//       coin.spent = true;\n\n//     return this.add(hash, coins);\n//   }\n\n//   /**\n//    * Add an entry to the collection.\n//    * @param {Outpoint} prevout\n//    * @param {CoinEntry} coin\n//    * @returns {CoinEntry|null}\n//    */\n\n//   addEntry(prevout, coin) {\n//     const {hash, index} = prevout;\n//     const coins = this.ensure(hash);\n//     return coins.add(index, coin);\n//   }\n\n//   /**\n//    * Add a coin to the collection.\n//    * @param {Coin} coin\n//    * @returns {CoinEntry|null}\n//    */\n\n//   addCoin(coin) {\n//     const coins = this.ensure(coin.hash);\n//     return coins.addCoin(coin);\n//   }\n\n//   /**\n//    * Add an output to the collection.\n//    * @param {Outpoint} prevout\n//    * @param {Output} output\n//    * @returns {CoinEntry|null}\n//    */\n\n//   addOutput(prevout, output) {\n//     const {hash, index} = prevout;\n//     const coins = this.ensure(hash);\n//     return coins.addOutput(index, output);\n//   }\n\n//   /**\n//    * Add an output to the collection by output index.\n//    * @param {TX} tx\n//    * @param {Number} index\n//    * @param {Number} height\n//    * @returns {CoinEntry|null}\n//    */\n\n//   addIndex(tx, index, height) {\n//     const hash = tx.hash();\n//     const coins = this.ensure(hash);\n//     return coins.addIndex(tx, index, height);\n//   }\n\n//   /**\n//    * Spend an output.\n//    * @param {Outpoint} prevout\n//    * @returns {CoinEntry|null}\n//    */\n\n//   spendEntry(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return null;\n\n//     const coin = coins.spend(index);\n\n//     if (!coin)\n//       return null;\n\n//     this.undo.push(coin);\n\n//     return coin;\n//   }\n\n//   /**\n//    * Remove an output.\n//    * @param {Outpoint} prevout\n//    * @returns {CoinEntry|null}\n//    */\n\n//   removeEntry(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return null;\n\n//     return coins.remove(index);\n//   }\n\n//   /**\n//    * Test whether the view has an entry by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Boolean}\n//    */\n\n//   hasEntry(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return false;\n\n//     return coins.has(index);\n//   }\n\n//   /**\n//    * Get a single entry by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {CoinEntry|null}\n//    */\n\n//   getEntry(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return null;\n\n//     return coins.get(index);\n//   }\n\n//   /**\n//    * Test whether an entry has been spent by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Boolean}\n//    */\n\n//   isUnspent(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return false;\n\n//     return coins.isUnspent(index);\n//   }\n\n//   /**\n//    * Get a single coin by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Coin|null}\n//    */\n\n//   getCoin(prevout) {\n//     const coins = this.get(prevout.hash);\n\n//     if (!coins)\n//       return null;\n\n//     return coins.getCoin(prevout);\n//   }\n\n//   /**\n//    * Get a single output by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Output|null}\n//    */\n\n//   getOutput(prevout) {\n//     const {hash, index} = prevout;\n//     const coins = this.get(hash);\n\n//     if (!coins)\n//       return null;\n\n//     return coins.getOutput(index);\n//   }\n\n//   /**\n//    * Get coins height by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Number}\n//    */\n\n//   getHeight(prevout) {\n//     const coin = this.getEntry(prevout);\n\n//     if (!coin)\n//       return -1;\n\n//     return coin.height;\n//   }\n\n//   /**\n//    * Get coins coinbase flag by prevout.\n//    * @param {Outpoint} prevout\n//    * @returns {Boolean}\n//    */\n\n//   isCoinbase(prevout) {\n//     const coin = this.getEntry(prevout);\n\n//     if (!coin)\n//       return false;\n\n//     return coin.coinbase;\n//   }\n\n//   /**\n//    * Test whether the view has an entry by input.\n//    * @param {Input} input\n//    * @returns {Boolean}\n//    */\n\n//   hasEntryFor(input) {\n//     return this.hasEntry(input.prevout);\n//   }\n\n//   /**\n//    * Get a single entry by input.\n//    * @param {Input} input\n//    * @returns {CoinEntry|null}\n//    */\n\n//   getEntryFor(input) {\n//     return this.getEntry(input.prevout);\n//   }\n\n//   /**\n//    * Test whether an entry has been spent by input.\n//    * @param {Input} input\n//    * @returns {Boolean}\n//    */\n\n//   isUnspentFor(input) {\n//     return this.isUnspent(input.prevout);\n//   }\n\n//   /**\n//    * Get a single coin by input.\n//    * @param {Input} input\n//    * @returns {Coin|null}\n//    */\n\n//   getCoinFor(input) {\n//     return this.getCoin(input.prevout);\n//   }\n\n//   /**\n//    * Get a single output by input.\n//    * @param {Input} input\n//    * @returns {Output|null}\n//    */\n\n//   getOutputFor(input) {\n//     return this.getOutput(input.prevout);\n//   }\n\n//   /**\n//    * Get coins height by input.\n//    * @param {Input} input\n//    * @returns {Number}\n//    */\n\n//   getHeightFor(input) {\n//     return this.getHeight(input.prevout);\n//   }\n\n//   /**\n//    * Get coins coinbase flag by input.\n//    * @param {Input} input\n//    * @returns {Boolean}\n//    */\n\n//   isCoinbaseFor(input) {\n//     return this.isCoinbase(input.prevout);\n//   }\n\n//   /**\n//    * Retrieve coins from database.\n//    * @method\n//    * @param {ChainDB} db\n//    * @param {Outpoint} prevout\n//    * @returns {Promise} - Returns {@link CoinEntry}.\n//    */\n\n//   async readCoin(db, prevout) {\n//     const cache = this.getEntry(prevout);\n\n//     if (cache)\n//       return cache;\n\n//     const coin = await db.readCoin(prevout);\n\n//     if (!coin)\n//       return null;\n\n//     return this.addEntry(prevout, coin);\n//   }\n\n//   /**\n//    * Read all input coins into unspent map.\n//    * @method\n//    * @param {ChainDB} db\n//    * @param {TX} tx\n//    * @returns {Promise} - Returns {Boolean}.\n//    */\n\n//   async readInputs(db, tx) {\n//     let found = true;\n\n//     for (const {prevout} of tx.inputs) {\n//       if (!await this.readCoin(db, prevout))\n//         found = false;\n//     }\n\n//     return found;\n//   }\n\n//   /**\n//    * Spend coins for transaction.\n//    * @method\n//    * @param {ChainDB} db\n//    * @param {TX} tx\n//    * @returns {Promise} - Returns {Boolean}.\n//    */\n\n//   async spendInputs(db, tx) {\n//     let i = 0;\n\n//     while (i < tx.inputs.length) {\n//       const len = Math.min(i + 4, tx.inputs.length);\n//       const jobs = [];\n\n//       for (; i < len; i++) {\n//         const {prevout} = tx.inputs[i];\n//         jobs.push(this.readCoin(db, prevout));\n//       }\n\n//       const coins = await Promise.all(jobs);\n\n//       for (const coin of coins) {\n//         if (!coin || coin.spent)\n//           return false;\n\n//         coin.spent = true;\n//         this.undo.push(coin);\n//       }\n//     }\n\n//     return true;\n//   }\n\n//   /**\n//    * Calculate serialization size.\n//    * @returns {Number}\n//    */\n\n//   getSize(tx) {\n//     let size = 0;\n\n//     size += tx.inputs.length;\n\n//     for (const {prevout} of tx.inputs) {\n//       const coin = this.getEntry(prevout);\n\n//       if (!coin)\n//         continue;\n\n//       size += coin.getSize();\n//     }\n\n//     return size;\n//   }\n\n//   /**\n//    * Write coin data to buffer writer\n//    * as it pertains to a transaction.\n//    * @param {BufferWriter} bw\n//    * @param {TX} tx\n//    */\n\n//   toWriter(bw, tx) {\n//     for (const {prevout} of tx.inputs) {\n//       const coin = this.getEntry(prevout);\n\n//       if (!coin) {\n//         bw.writeU8(0);\n//         continue;\n//       }\n\n//       bw.writeU8(1);\n//       coin.toWriter(bw);\n//     }\n\n//     return bw;\n//   }\n\n//   /**\n//    * Read serialized view data from a buffer\n//    * reader as it pertains to a transaction.\n//    * @private\n//    * @param {BufferReader} br\n//    * @param {TX} tx\n//    */\n\n//   fromReader(br, tx) {\n//     for (const {prevout} of tx.inputs) {\n//       if (br.readU8() === 0)\n//         continue;\n\n//       const coin = CoinEntry.fromReader(br);\n\n//       this.addEntry(prevout, coin);\n//     }\n\n//     return this;\n//   }\n\n//   /**\n//    * Read serialized view data from a buffer\n//    * reader as it pertains to a transaction.\n//    * @param {BufferReader} br\n//    * @param {TX} tx\n//    * @returns {CoinView}\n//    */\n\n//   static fromReader(br, tx) {\n//     return new this().fromReader(br, tx);\n//   }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = CoinView;\n"]},"metadata":{},"sourceType":"module"}