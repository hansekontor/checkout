{"ast":null,"code":"/*!\n * pkcs1.js - PKCS1 encoding for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on golang/go:\n *   Copyright (c) 2009 The Go Authors. All rights reserved.\n *   https://github.com/golang/go\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/PKCS_1\n *   https://tools.ietf.org/html/rfc3447\n *   https://tools.ietf.org/html/rfc8017#appendix-A.1.1\n *   https://tools.ietf.org/html/rfc8017#appendix-A.1.2\n *   https://github.com/golang/go/blob/master/src/crypto/x509/pkcs1.go\n *   https://github.com/openssl/openssl/blob/master/crypto/rsa/rsa_asn1.c\n */\n'use strict';\n\nconst asn1 = require('./asn1');\n\nconst pem = require('./pem');\n/**\n * RSAPublicKey\n */\n// RSAPublicKey ::= SEQUENCE {\n//     modulus           INTEGER,  -- n\n//     publicExponent    INTEGER   -- e\n// }\n\n\nclass RSAPublicKey extends asn1.Sequence {\n  constructor(n, e) {\n    super();\n    this.n = new asn1.Unsigned(n);\n    this.e = new asn1.Unsigned(e);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.n.getSize();\n    size += this.e.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.n.write(bw);\n    this.e.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.n.read(br);\n    this.e.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.n.clean() && this.e.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'RSA PUBLIC KEY');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'RSA PUBLIC KEY');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      n: this.n,\n      e: this.e\n    };\n  }\n\n}\n/**\n * RSAPrivateKey\n */\n// RSAPrivateKey ::= SEQUENCE {\n//   version           Version,\n//   modulus           INTEGER,  -- n\n//   publicExponent    INTEGER,  -- e\n//   privateExponent   INTEGER,  -- d\n//   prime1            INTEGER,  -- p\n//   prime2            INTEGER,  -- q\n//   exponent1         INTEGER,  -- d mod (p-1)\n//   exponent2         INTEGER,  -- d mod (q-1)\n//   coefficient       INTEGER,  -- (inverse of q) mod p\n//   otherPrimeInfos   OtherPrimeInfos OPTIONAL\n// }\n\n\nclass RSAPrivateKey extends asn1.Sequence {\n  constructor(version, n, e, d, p, q, dp, dq, qi) {\n    super();\n    this.version = new asn1.Unsigned(version);\n    this.n = new asn1.Unsigned(n);\n    this.e = new asn1.Unsigned(e);\n    this.d = new asn1.Unsigned(d);\n    this.p = new asn1.Unsigned(p);\n    this.q = new asn1.Unsigned(q);\n    this.dp = new asn1.Unsigned(dp);\n    this.dq = new asn1.Unsigned(dq);\n    this.qi = new asn1.Unsigned(qi);\n  }\n\n  getBodySize() {\n    let size = 0;\n    size += this.version.getSize();\n    size += this.n.getSize();\n    size += this.e.getSize();\n    size += this.d.getSize();\n    size += this.p.getSize();\n    size += this.q.getSize();\n    size += this.dp.getSize();\n    size += this.dq.getSize();\n    size += this.qi.getSize();\n    return size;\n  }\n\n  writeBody(bw) {\n    this.version.write(bw);\n    this.n.write(bw);\n    this.e.write(bw);\n    this.d.write(bw);\n    this.p.write(bw);\n    this.q.write(bw);\n    this.dp.write(bw);\n    this.dq.write(bw);\n    this.qi.write(bw);\n    return bw;\n  }\n\n  readBody(br) {\n    this.version.read(br);\n    this.n.read(br);\n    this.e.read(br);\n    this.d.read(br);\n    this.p.read(br);\n    this.q.read(br);\n    this.dp.read(br);\n    this.dq.read(br);\n    this.qi.read(br);\n    return this;\n  }\n\n  clean() {\n    return this.n.clean() && this.e.clean() && this.d.clean() && this.p.clean() && this.q.clean() && this.dp.clean() && this.dq.clean() && this.qi.clean();\n  }\n\n  toPEM() {\n    return pem.toPEM(this.encode(), 'RSA PRIVATE KEY');\n  }\n\n  fromPEM(str) {\n    const data = pem.fromPEM(str, 'RSA PRIVATE KEY');\n    return this.decode(data);\n  }\n\n  format() {\n    return {\n      type: this.constructor.name,\n      version: this.version,\n      n: this.n,\n      e: this.e,\n      d: this.d,\n      p: this.p,\n      q: this.q,\n      dp: this.dp,\n      dq: this.dq,\n      qi: this.qi\n    };\n  }\n\n}\n/*\n * Expose\n */\n\n\nexports.RSAPublicKey = RSAPublicKey;\nexports.RSAPrivateKey = RSAPrivateKey;","map":null,"metadata":{},"sourceType":"script"}