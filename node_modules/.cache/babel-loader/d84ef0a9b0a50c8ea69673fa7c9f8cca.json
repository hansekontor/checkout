{"ast":null,"code":"/*!\n * paymentack.js - bip70 paymentack for bcoin\n * Copyright (c) 2016-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst ProtoReader = require('./utils/protoreader');\n\nconst ProtoWriter = require('./utils/protowriter');\n\nconst Payment = require('./payment');\n/**\n * BIP70 Payment ACK\n */\n\n\nclass PaymentACK {\n  /**\n   * Create a payment ack.\n   * @constructor\n   * @param {Object?} options\n   * @property {Payment} payment\n   * @property {String|null} memo\n   */\n  constructor(options) {\n    this.payment = new Payment();\n    this.memo = null;\n    if (options) this.fromOptions(options);\n  }\n  /**\n   * Inject properties from options.\n   * @private\n   * @param {Object} options\n   * @returns {PaymentACK}\n   */\n\n\n  fromOptions(options) {\n    if (options.payment) this.payment.fromOptions(options.payment);\n\n    if (options.memo != null) {\n      assert(typeof options.memo === 'string');\n      this.memo = options.memo;\n    }\n\n    return this;\n  }\n  /**\n   * Instantiate payment ack from options.\n   * @param {Object} options\n   * @returns {PaymentACK}\n   */\n\n\n  static fromOptions(options) {\n    return new PaymentACK().fromOptions(options);\n  }\n  /**\n   * Inject properties from serialized data.\n   * @private\n   * @param {Buffer} data\n   * @returns {PaymentACK}\n   */\n\n\n  fromRaw(data) {\n    const br = new ProtoReader(data);\n    this.payment.fromRaw(br.readFieldBytes(1));\n    this.memo = br.readFieldString(2, true);\n    return this;\n  }\n  /**\n   * Instantiate payment ack from serialized data.\n   * @param {Buffer} data\n   * @returns {PaymentACK}\n   */\n\n\n  static fromRaw(data, enc) {\n    if (typeof data === 'string') data = Buffer.from(data, enc);\n    return new PaymentACK().fromRaw(data);\n  }\n  /**\n   * Serialize the payment ack (protobuf).\n   * @returns {Buffer}\n   */\n\n\n  toRaw() {\n    const bw = new ProtoWriter();\n    bw.writeFieldBytes(1, this.payment.toRaw());\n    if (this.memo != null) bw.writeFieldString(2, this.memo);\n    return bw.render();\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = PaymentACK;","map":null,"metadata":{},"sourceType":"script"}