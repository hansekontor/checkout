{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\n/**\n * Fill `fieldNames` with default field names.\n *\n * @param fieldNames passed props\n * @param skipTitle Skip if no need fill `title`. This is useful since we have 2 name as same title level\n * @returns\n */\n\nexport function fillFieldNames(fieldNames) {\n  var skipTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var filledNames = {\n    value: value || 'value',\n    children: children || 'children'\n  };\n\n  if (!skipTitle || label) {\n    filledNames.label = label || 'label';\n  }\n\n  return filledNames;\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data,\n        value = flattenItem.value;\n    optionMap.set(value, data.node);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref2) {\n  var parent = _ref2.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  var typedOptions = options; // Add missing key\n\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(typedOptions), true, null);\n  var cacheMap = new Map();\n  var flattenDateNodeList = flattenList.map(function (option) {\n    var _option$parent;\n\n    var data = option.data,\n        key = option.key,\n        value = option.value;\n    var flattenNode = {\n      key: key,\n      value: value,\n      data: data,\n      level: getLevel(option),\n      parentKey: (_option$parent = option.parent) === null || _option$parent === void 0 ? void 0 : _option$parent.data.key\n    };\n    cacheMap.set(key, flattenNode);\n    return flattenNode;\n  }); // Fill parent\n\n  flattenDateNodeList.forEach(function (flattenNode) {\n    // eslint-disable-next-line no-param-reassign\n    flattenNode.parent = cacheMap.get(flattenNode.parentKey);\n  });\n  return flattenDateNodeList;\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref3) {\n  var optionFilterProp = _ref3.optionFilterProp,\n      filterOption = _ref3.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true); // Always try to get the value by entity even it's enpty\n\n    var label = getLabelProp(entity, val);\n\n    if (label === undefined) {\n      label = val;\n    }\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}","map":null,"metadata":{},"sourceType":"module"}