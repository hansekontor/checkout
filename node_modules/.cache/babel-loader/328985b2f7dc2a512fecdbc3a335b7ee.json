{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar System_1 = require(\"./System\");\n\nvar Arrays =\n/** @class */\nfunction () {\n  function Arrays() {}\n\n  Arrays.equals = function (first, second) {\n    if (!first) {\n      return false;\n    }\n\n    if (!second) {\n      return false;\n    }\n\n    if (!first.length) {\n      return false;\n    }\n\n    if (!second.length) {\n      return false;\n    }\n\n    if (first.length !== second.length) {\n      return false;\n    }\n\n    for (var i = 0, length_1 = first.length; i < length_1; i++) {\n      if (first[i] !== second[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Arrays.hashCode = function (a) {\n    if (a === null) {\n      return 0;\n    }\n\n    var result = 1;\n\n    for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n      var element = a_1[_i];\n      result = 31 * result + element;\n    }\n\n    return result;\n  };\n\n  Arrays.fillUint8Array = function (a, value) {\n    for (var i = 0; i !== a.length; i++) {\n      a[i] = value;\n    }\n  };\n\n  Arrays.copyOf = function (original, newLength) {\n    var copy = new Int32Array(newLength);\n    System_1.default.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));\n    return copy;\n  };\n  /*\r\n  * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\r\n  * for the new element.\r\n  * Parameters:\r\n  *     ar - A sorted array\r\n  *     el - An element to search for\r\n  *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\r\n  *        a negative number  if a is less than b;\r\n  *        0 if a is equal to b;\r\n  *        a positive number of a is greater than b.\r\n  * The array may contain duplicate elements. If there are more than one equal elements in the array,\r\n  * the returned value can be the index of any one of the equal elements.\r\n  *\r\n  * http://jsfiddle.net/aryzhov/pkfst550/\r\n  */\n\n\n  Arrays.binarySearch = function (ar, el, comparator) {\n    if (undefined === comparator) {\n      comparator = Arrays.numberComparator;\n    }\n\n    var m = 0;\n    var n = ar.length - 1;\n\n    while (m <= n) {\n      var k = n + m >> 1;\n      var cmp = comparator(el, ar[k]);\n\n      if (cmp > 0) {\n        m = k + 1;\n      } else if (cmp < 0) {\n        n = k - 1;\n      } else {\n        return k;\n      }\n    }\n\n    return -m - 1;\n  };\n\n  Arrays.numberComparator = function (a, b) {\n    return a - b;\n  };\n\n  return Arrays;\n}();\n\nexports.default = Arrays;","map":null,"metadata":{},"sourceType":"script"}