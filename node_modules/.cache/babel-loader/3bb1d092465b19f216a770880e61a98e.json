{"ast":null,"code":"/*!\n * batch-rng.js - batch rng for bcrypto\n * Copyright (c) 2019-2020, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on ElementsProject/secp256k1-zkp:\n *   Copyright (c) 2013, Pieter Wuille.\n *   https://github.com/ElementsProject/secp256k1-zkp\n *\n * Resources:\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/modules/schnorrsig/main_impl.h#L166\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_4x64_impl.h#L972\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_8x32_impl.h#L747\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n\nconst BN = require('../bn');\n\nconst ChaCha20 = require('../chacha20');\n\nconst SHA256 = require('../sha256');\n/**\n * BatchRNG\n */\n\n\nclass BatchRNG {\n  constructor(curve) {\n    let encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : key => key;\n    this.curve = curve;\n    this.encode = encode;\n    this.hash = new SHA256();\n    this.chacha = new ChaCha20();\n    this.key = Buffer.alloc(32, 0x00);\n    this.iv = Buffer.alloc(8, 0x00);\n    this.cache = [new BN(1), new BN(1)];\n  }\n\n  init(batch) {\n    assert(Array.isArray(batch));\n    this.hash.init();\n\n    for (const [msg, sig, key] of batch) {\n      this.hash.update(SHA256.digest(msg));\n      this.hash.update(sig);\n      this.hash.update(this.encode(key));\n    }\n\n    this.key = this.hash.final();\n    this.cache[0] = new BN(1);\n    this.cache[1] = new BN(1);\n    return this;\n  }\n\n  encrypt(counter) {\n    const size = this.curve.scalarSize * 2;\n    const data = Buffer.alloc(size, 0x00);\n    const left = data.slice(0, this.curve.scalarSize);\n    const right = data.slice(this.curve.scalarSize);\n    this.chacha.init(this.key, this.iv, counter);\n    this.chacha.encrypt(data);\n    return [this.curve.decodeScalar(left), this.curve.decodeScalar(right)];\n  }\n\n  refresh(counter) {\n    let overflow = 0;\n\n    for (;;) {\n      // First word is always zero.\n      this.iv[4] = overflow;\n      this.iv[5] = overflow >>> 8;\n      this.iv[6] = overflow >>> 16;\n      this.iv[7] = overflow >>> 24;\n      overflow += 1;\n      const [s1, s2] = this.encrypt(counter);\n      if (s1.isZero() || s1.cmp(this.curve.n) >= 0) continue;\n      if (s2.isZero() || s2.cmp(this.curve.n) >= 0) continue;\n      this.cache[0] = s1;\n      this.cache[1] = s2;\n      break;\n    }\n  }\n\n  generate(index) {\n    assert(index >>> 0 === index);\n    if (index & 1) this.refresh(index >>> 1);\n    return this.cache[index & 1];\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = BatchRNG;","map":null,"metadata":{},"sourceType":"script"}