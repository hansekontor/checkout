{"ast":null,"code":"/*!\n * coins.js - coins object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst CoinEntry = require('./coinentry');\n/**\n * Coins\n * Represents the outputs for a single transaction.\n * @alias module:coins.Coins\n * @property {Map[]} outputs - Coins.\n */\n\n\nclass Coins {\n  /**\n   * Create coins.\n   * @constructor\n   */\n  constructor() {\n    this.outputs = new Map();\n  }\n  /**\n   * Add a single entry to the collection.\n   * @param {Number} index\n   * @param {CoinEntry} coin\n   * @returns {CoinEntry}\n   */\n\n\n  add(index, coin) {\n    assert(index >>> 0 === index);\n    assert(coin);\n    this.outputs.set(index, coin);\n    return coin;\n  }\n  /**\n   * Add a single output to the collection.\n   * @param {Number} index\n   * @param {Output} output\n   * @returns {CoinEntry}\n   */\n\n\n  addOutput(index, output) {\n    return this.add(index, CoinEntry.fromOutput(output));\n  }\n  /**\n   * Add an output to the collection by output index.\n   * @param {TX} tx\n   * @param {Number} index\n   * @param {Number} height\n   * @returns {CoinEntry}\n   */\n\n\n  addIndex(tx, index, height) {\n    return this.add(index, CoinEntry.fromTX(tx, index, height));\n  }\n  /**\n   * Add a single coin to the collection.\n   * @param {Coin} coin\n   * @returns {CoinEntry}\n   */\n\n\n  addCoin(coin) {\n    return this.add(coin.index, CoinEntry.fromCoin(coin));\n  }\n  /**\n   * Test whether the collection has a coin.\n   * @param {Number} index\n   * @returns {Boolean}\n   */\n\n\n  has(index) {\n    return this.outputs.has(index);\n  }\n  /**\n   * Test whether the collection has an unspent coin.\n   * @param {Number} index\n   * @returns {Boolean}\n   */\n\n\n  isUnspent(index) {\n    const coin = this.outputs.get(index);\n    if (!coin || coin.spent) return false;\n    return true;\n  }\n  /**\n   * Get a coin entry.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n\n  get(index) {\n    return this.outputs.get(index) || null;\n  }\n  /**\n   * Get an output.\n   * @param {Number} index\n   * @returns {Output|null}\n   */\n\n\n  getOutput(index) {\n    const coin = this.outputs.get(index);\n    if (!coin) return null;\n    return coin.output;\n  }\n  /**\n   * Get a coin.\n   * @param {Outpoint} prevout\n   * @returns {Coin|null}\n   */\n\n\n  getCoin(prevout) {\n    const coin = this.outputs.get(prevout.index);\n    if (!coin) return null;\n    return coin.toCoin(prevout);\n  }\n  /**\n   * Spend a coin entry and return it.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n\n  spend(index) {\n    const coin = this.get(index);\n    if (!coin || coin.spent) return null;\n    coin.spent = true;\n    return coin;\n  }\n  /**\n   * Remove a coin entry and return it.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n\n  remove(index) {\n    const coin = this.get(index);\n    if (!coin) return null;\n    this.outputs.delete(index);\n    return coin;\n  }\n  /**\n   * Test whether the coins are fully spent.\n   * @returns {Boolean}\n   */\n\n\n  isEmpty() {\n    return this.outputs.size === 0;\n  }\n  /**\n   * Inject properties from tx.\n   * @private\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n\n  fromTX(tx, height) {\n    assert(typeof height === 'number');\n\n    for (let i = 0; i < tx.outputs.length; i++) {\n      const output = tx.outputs[i];\n      if (output.script.isUnspendable()) continue;\n      const entry = CoinEntry.fromTX(tx, i, height);\n      this.outputs.set(i, entry);\n    }\n\n    return this;\n  }\n  /**\n   * Instantiate a coins object from a transaction.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n\n  static fromTX(tx, height) {\n    return new this().fromTX(tx, height);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = Coins;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/coins/coins.js"],"names":["assert","require","CoinEntry","Coins","constructor","outputs","Map","add","index","coin","set","addOutput","output","fromOutput","addIndex","tx","height","fromTX","addCoin","fromCoin","has","isUnspent","get","spent","getOutput","getCoin","prevout","toCoin","spend","remove","delete","isEmpty","size","i","length","script","isUnspendable","entry","module","exports"],"mappings":"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","sourcesContent":["/*!\n * coins.js - coins object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst CoinEntry = require('./coinentry');\n\n/**\n * Coins\n * Represents the outputs for a single transaction.\n * @alias module:coins.Coins\n * @property {Map[]} outputs - Coins.\n */\n\nclass Coins {\n  /**\n   * Create coins.\n   * @constructor\n   */\n\n  constructor() {\n    this.outputs = new Map();\n  }\n\n  /**\n   * Add a single entry to the collection.\n   * @param {Number} index\n   * @param {CoinEntry} coin\n   * @returns {CoinEntry}\n   */\n\n  add(index, coin) {\n    assert((index >>> 0) === index);\n    assert(coin);\n    this.outputs.set(index, coin);\n    return coin;\n  }\n\n  /**\n   * Add a single output to the collection.\n   * @param {Number} index\n   * @param {Output} output\n   * @returns {CoinEntry}\n   */\n\n  addOutput(index, output) {\n    return this.add(index, CoinEntry.fromOutput(output));\n  }\n\n  /**\n   * Add an output to the collection by output index.\n   * @param {TX} tx\n   * @param {Number} index\n   * @param {Number} height\n   * @returns {CoinEntry}\n   */\n\n  addIndex(tx, index, height) {\n    return this.add(index, CoinEntry.fromTX(tx, index, height));\n  }\n\n  /**\n   * Add a single coin to the collection.\n   * @param {Coin} coin\n   * @returns {CoinEntry}\n   */\n\n  addCoin(coin) {\n    return this.add(coin.index, CoinEntry.fromCoin(coin));\n  }\n\n  /**\n   * Test whether the collection has a coin.\n   * @param {Number} index\n   * @returns {Boolean}\n   */\n\n  has(index) {\n    return this.outputs.has(index);\n  }\n\n  /**\n   * Test whether the collection has an unspent coin.\n   * @param {Number} index\n   * @returns {Boolean}\n   */\n\n  isUnspent(index) {\n    const coin = this.outputs.get(index);\n\n    if (!coin || coin.spent)\n      return false;\n\n    return true;\n  }\n\n  /**\n   * Get a coin entry.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n  get(index) {\n    return this.outputs.get(index) || null;\n  }\n\n  /**\n   * Get an output.\n   * @param {Number} index\n   * @returns {Output|null}\n   */\n\n  getOutput(index) {\n    const coin = this.outputs.get(index);\n\n    if (!coin)\n      return null;\n\n    return coin.output;\n  }\n\n  /**\n   * Get a coin.\n   * @param {Outpoint} prevout\n   * @returns {Coin|null}\n   */\n\n  getCoin(prevout) {\n    const coin = this.outputs.get(prevout.index);\n\n    if (!coin)\n      return null;\n\n    return coin.toCoin(prevout);\n  }\n\n  /**\n   * Spend a coin entry and return it.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n  spend(index) {\n    const coin = this.get(index);\n\n    if (!coin || coin.spent)\n      return null;\n\n    coin.spent = true;\n\n    return coin;\n  }\n\n  /**\n   * Remove a coin entry and return it.\n   * @param {Number} index\n   * @returns {CoinEntry|null}\n   */\n\n  remove(index) {\n    const coin = this.get(index);\n\n    if (!coin)\n      return null;\n\n    this.outputs.delete(index);\n\n    return coin;\n  }\n\n  /**\n   * Test whether the coins are fully spent.\n   * @returns {Boolean}\n   */\n\n  isEmpty() {\n    return this.outputs.size === 0;\n  }\n\n  /**\n   * Inject properties from tx.\n   * @private\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n  fromTX(tx, height) {\n    assert(typeof height === 'number');\n\n    for (let i = 0; i < tx.outputs.length; i++) {\n      const output = tx.outputs[i];\n\n      if (output.script.isUnspendable())\n        continue;\n\n      const entry = CoinEntry.fromTX(tx, i, height);\n\n      this.outputs.set(i, entry);\n    }\n\n    return this;\n  }\n\n  /**\n   * Instantiate a coins object from a transaction.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n  static fromTX(tx, height) {\n    return new this().fromTX(tx, height);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = Coins;\n"]},"metadata":{},"sourceType":"module"}