{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\nconst useAsyncTimeout = (callback, delay) => {\n  const savedCallback = useRef(callback);\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    let id = null;\n\n    const tick = () => {\n      const promise = savedCallback.current();\n\n      if (promise instanceof Promise) {\n        promise.then(() => {\n          id = setTimeout(tick, delay);\n        });\n      } else {\n        id = setTimeout(tick, delay);\n      }\n    };\n\n    if (id !== null) {\n      id = setTimeout(tick, delay);\n      return () => clearTimeout(id);\n    } else {\n      tick();\n      return;\n    }\n  }, [delay]);\n};\n\nexport default useAsyncTimeout;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/hooks/useAsyncTimeout.js"],"names":["useEffect","useRef","useAsyncTimeout","callback","delay","savedCallback","current","id","tick","promise","Promise","then","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,QAAMC,aAAa,GAAGJ,MAAM,CAACE,QAAD,CAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACH,GAFQ,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,EAAE,GAAG,IAAT;;AACA,UAAMC,IAAI,GAAG,MAAM;AACf,YAAMC,OAAO,GAAGJ,aAAa,CAACC,OAAd,EAAhB;;AAEA,UAAIG,OAAO,YAAYC,OAAvB,EAAgC;AAC5BD,QAAAA,OAAO,CAACE,IAAR,CAAa,MAAM;AACfJ,UAAAA,EAAE,GAAGK,UAAU,CAACJ,IAAD,EAAOJ,KAAP,CAAf;AACH,SAFD;AAGH,OAJD,MAIO;AACHG,QAAAA,EAAE,GAAGK,UAAU,CAACJ,IAAD,EAAOJ,KAAP,CAAf;AACH;AACJ,KAVD;;AAYA,QAAIG,EAAE,KAAK,IAAX,EAAiB;AACbA,MAAAA,EAAE,GAAGK,UAAU,CAACJ,IAAD,EAAOJ,KAAP,CAAf;AACA,aAAO,MAAMS,YAAY,CAACN,EAAD,CAAzB;AACH,KAHD,MAGO;AACHC,MAAAA,IAAI;AACJ;AACH;AACJ,GArBQ,EAqBN,CAACJ,KAAD,CArBM,CAAT;AAsBH,CA7BD;;AA+BA,eAAeF,eAAf","sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst useAsyncTimeout = (callback, delay) => {\n    const savedCallback = useRef(callback);\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n        let id = null;\n        const tick = () => {\n            const promise = savedCallback.current();\n\n            if (promise instanceof Promise) {\n                promise.then(() => {\n                    id = setTimeout(tick, delay);\n                });\n            } else {\n                id = setTimeout(tick, delay);\n            }\n        };\n\n        if (id !== null) {\n            id = setTimeout(tick, delay);\n            return () => clearTimeout(id);\n        } else {\n            tick();\n            return;\n        }\n    }, [delay]);\n};\n\nexport default useAsyncTimeout;\n"]},"metadata":{},"sourceType":"module"}