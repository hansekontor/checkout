{"ast":null,"code":"var _jsxFileName = \"/home/henrik/Documents/dev/checkoutmin/src/utils/GoogleAnalytics.js\";\n// utils/GoogleAnalytics.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactGA from 'react-ga';\nimport { Route } from 'react-router-dom';\n\nclass GoogleAnalytics extends Component {\n  componentDidMount() {\n    this.logPageChange(this.props.location.pathname, this.props.location.search);\n  }\n\n  componentDidUpdate(_ref) {\n    let {\n      location: prevLocation\n    } = _ref;\n    const {\n      location: {\n        pathname,\n        search\n      }\n    } = this.props;\n    const isDifferentPathname = pathname !== prevLocation.pathname;\n    const isDifferentSearch = search !== prevLocation.search;\n\n    if (isDifferentPathname || isDifferentSearch) {\n      this.logPageChange(pathname, search);\n    }\n  }\n\n  logPageChange(pathname) {\n    let search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const page = pathname + search;\n    const {\n      location\n    } = window;\n    ReactGA.set({\n      page,\n      location: `${location.origin}${page}`,\n      ...this.props.options\n    });\n    ReactGA.pageview(page);\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nGoogleAnalytics.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n    search: PropTypes.string\n  }).isRequired,\n  options: PropTypes.object\n};\n\nconst RouteTracker = () => /*#__PURE__*/React.createElement(Route, {\n  component: GoogleAnalytics,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 28\n  }\n});\n\nconst init = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const isGAEnabled = process.env.NODE_ENV === 'production';\n\n  if (isGAEnabled) {\n    ReactGA.initialize('UA-183678810-1');\n  }\n\n  return isGAEnabled;\n};\n\nexport const Event = (category, action, label) => {\n  ReactGA.event({\n    category: category,\n    action: action,\n    label: label\n  });\n};\nconst GoogleAnalyticsDefault = {\n  GoogleAnalytics,\n  RouteTracker,\n  init\n};\nexport default GoogleAnalyticsDefault;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/GoogleAnalytics.js"],"names":["React","Component","PropTypes","ReactGA","Route","GoogleAnalytics","componentDidMount","logPageChange","props","location","pathname","search","componentDidUpdate","prevLocation","isDifferentPathname","isDifferentSearch","page","window","set","origin","options","pageview","render","propTypes","shape","string","isRequired","object","RouteTracker","init","isGAEnabled","process","env","NODE_ENV","initialize","Event","category","action","label","event","GoogleAnalyticsDefault"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACpCK,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,aAAL,CACI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QADxB,EAEI,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,MAFxB;AAIH;;AAEDC,EAAAA,kBAAkB,OAA6B;AAAA,QAA5B;AAAEH,MAAAA,QAAQ,EAAEI;AAAZ,KAA4B;AAC3C,UAAM;AACFJ,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AADR,QAEF,KAAKH,KAFT;AAGA,UAAMM,mBAAmB,GAAGJ,QAAQ,KAAKG,YAAY,CAACH,QAAtD;AACA,UAAMK,iBAAiB,GAAGJ,MAAM,KAAKE,YAAY,CAACF,MAAlD;;AAEA,QAAIG,mBAAmB,IAAIC,iBAA3B,EAA8C;AAC1C,WAAKR,aAAL,CAAmBG,QAAnB,EAA6BC,MAA7B;AACH;AACJ;;AAEDJ,EAAAA,aAAa,CAACG,QAAD,EAAwB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AACjC,UAAMK,IAAI,GAAGN,QAAQ,GAAGC,MAAxB;AACA,UAAM;AAAEF,MAAAA;AAAF,QAAeQ,MAArB;AACAd,IAAAA,OAAO,CAACe,GAAR,CAAY;AACRF,MAAAA,IADQ;AAERP,MAAAA,QAAQ,EAAG,GAAEA,QAAQ,CAACU,MAAO,GAAEH,IAAK,EAF5B;AAGR,SAAG,KAAKR,KAAL,CAAWY;AAHN,KAAZ;AAKAjB,IAAAA,OAAO,CAACkB,QAAR,CAAiBL,IAAjB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,WAAO,IAAP;AACH;;AAjCmC;;AAoCxCjB,eAAe,CAACkB,SAAhB,GAA4B;AACxBd,EAAAA,QAAQ,EAAEP,SAAS,CAACsB,KAAV,CAAgB;AACtBd,IAAAA,QAAQ,EAAER,SAAS,CAACuB,MADE;AAEtBd,IAAAA,MAAM,EAAET,SAAS,CAACuB;AAFI,GAAhB,EAGPC,UAJqB;AAKxBN,EAAAA,OAAO,EAAElB,SAAS,CAACyB;AALK,CAA5B;;AAQA,MAAMC,YAAY,GAAG,mBAAM,oBAAC,KAAD;AAAO,EAAA,SAAS,EAAEvB,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA3B;;AAEA,MAAMwB,IAAI,GAAG,YAAkB;AAAA,MAAjBT,OAAiB,uEAAP,EAAO;AAC3B,QAAMU,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7C;;AAEA,MAAIH,WAAJ,EAAiB;AACb3B,IAAAA,OAAO,CAAC+B,UAAR,CAAmB,gBAAnB;AACH;;AAED,SAAOJ,WAAP;AACH,CARD;;AAUA,OAAO,MAAMK,KAAK,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,KAAnB,KAA6B;AAC9CnC,EAAAA,OAAO,CAACoC,KAAR,CAAc;AACVH,IAAAA,QAAQ,EAAEA,QADA;AAEVC,IAAAA,MAAM,EAAEA,MAFE;AAGVC,IAAAA,KAAK,EAAEA;AAHG,GAAd;AAKH,CANM;AAQP,MAAME,sBAAsB,GAAG;AAC3BnC,EAAAA,eAD2B;AAE3BuB,EAAAA,YAF2B;AAG3BC,EAAAA;AAH2B,CAA/B;AAMA,eAAeW,sBAAf","sourcesContent":["// utils/GoogleAnalytics.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactGA from 'react-ga';\nimport { Route } from 'react-router-dom';\n\nclass GoogleAnalytics extends Component {\n    componentDidMount() {\n        this.logPageChange(\n            this.props.location.pathname,\n            this.props.location.search,\n        );\n    }\n\n    componentDidUpdate({ location: prevLocation }) {\n        const {\n            location: { pathname, search },\n        } = this.props;\n        const isDifferentPathname = pathname !== prevLocation.pathname;\n        const isDifferentSearch = search !== prevLocation.search;\n\n        if (isDifferentPathname || isDifferentSearch) {\n            this.logPageChange(pathname, search);\n        }\n    }\n\n    logPageChange(pathname, search = '') {\n        const page = pathname + search;\n        const { location } = window;\n        ReactGA.set({\n            page,\n            location: `${location.origin}${page}`,\n            ...this.props.options,\n        });\n        ReactGA.pageview(page);\n    }\n\n    render() {\n        return null;\n    }\n}\n\nGoogleAnalytics.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string,\n    }).isRequired,\n    options: PropTypes.object,\n};\n\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\n\nconst init = (options = {}) => {\n    const isGAEnabled = process.env.NODE_ENV === 'production';\n\n    if (isGAEnabled) {\n        ReactGA.initialize('UA-183678810-1');\n    }\n\n    return isGAEnabled;\n};\n\nexport const Event = (category, action, label) => {\n    ReactGA.event({\n        category: category,\n        action: action,\n        label: label,\n    });\n};\n\nconst GoogleAnalyticsDefault = {\n    GoogleAnalytics,\n    RouteTracker,\n    init,\n};\n\nexport default GoogleAnalyticsDefault;\n"]},"metadata":{},"sourceType":"module"}