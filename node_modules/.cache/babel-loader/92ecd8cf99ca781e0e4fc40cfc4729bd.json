{"ast":null,"code":"/*!\n * binary.js - binary search utils for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n/**\n * Perform a binary search on a sorted array.\n * @param {Array} items\n * @param {Object} key\n * @param {Function} compare\n * @param {Boolean?} insert\n * @returns {Number} Index.\n */\n\nexports.search = function search(items, key, compare, insert) {\n  let start = 0;\n  let end = items.length - 1;\n\n  while (start <= end) {\n    const pos = start + end >>> 1;\n    const cmp = compare(items[pos], key);\n    if (cmp === 0) return pos;\n    if (cmp < 0) start = pos + 1;else end = pos - 1;\n  }\n\n  if (!insert) return -1;\n  return start;\n};\n/**\n * Perform a binary insert on a sorted array.\n * @param {Array} items\n * @param {Object} item\n * @param {Function} compare\n * @returns {Number} index\n */\n\n\nexports.insert = function insert(items, item, compare, uniq) {\n  const i = exports.search(items, item, compare, true);\n\n  if (uniq && i < items.length) {\n    if (compare(items[i], item) === 0) return -1;\n  }\n\n  if (i === 0) items.unshift(item);else if (i === items.length) items.push(item);else items.splice(i, 0, item);\n  return i;\n};\n/**\n * Perform a binary removal on a sorted array.\n * @param {Array} items\n * @param {Object} item\n * @param {Function} compare\n * @returns {Boolean}\n */\n\n\nexports.remove = function remove(items, item, compare) {\n  const i = exports.search(items, item, compare, false);\n  if (i === -1) return false;\n  splice(items, i);\n  return true;\n};\n/*\n * Helpers\n */\n\n\nfunction splice(list, i) {\n  if (i === 0) {\n    list.shift();\n    return;\n  }\n\n  let k = i + 1;\n\n  while (k < list.length) list[i++] = list[k++];\n\n  list.pop();\n}","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/utils/binary.js"],"names":["exports","search","items","key","compare","insert","start","end","length","pos","cmp","item","uniq","i","unshift","push","splice","remove","list","shift","k","pop"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAACC,MAAR,GAAiB,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC5D,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGL,KAAK,CAACM,MAAN,GAAe,CAAzB;;AAEA,SAAOF,KAAK,IAAIC,GAAhB,EAAqB;AACnB,UAAME,GAAG,GAAIH,KAAK,GAAGC,GAAT,KAAkB,CAA9B;AACA,UAAMG,GAAG,GAAGN,OAAO,CAACF,KAAK,CAACO,GAAD,CAAN,EAAaN,GAAb,CAAnB;AAEA,QAAIO,GAAG,KAAK,CAAZ,EACE,OAAOD,GAAP;AAEF,QAAIC,GAAG,GAAG,CAAV,EACEJ,KAAK,GAAGG,GAAG,GAAG,CAAd,CADF,KAGEF,GAAG,GAAGE,GAAG,GAAG,CAAZ;AACH;;AAED,MAAI,CAACJ,MAAL,EACE,OAAO,CAAC,CAAR;AAEF,SAAOC,KAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAN,OAAO,CAACK,MAAR,GAAiB,SAASA,MAAT,CAAgBH,KAAhB,EAAuBS,IAAvB,EAA6BP,OAA7B,EAAsCQ,IAAtC,EAA4C;AAC3D,QAAMC,CAAC,GAAGb,OAAO,CAACC,MAAR,CAAeC,KAAf,EAAsBS,IAAtB,EAA4BP,OAA5B,EAAqC,IAArC,CAAV;;AAEA,MAAIQ,IAAI,IAAIC,CAAC,GAAGX,KAAK,CAACM,MAAtB,EAA8B;AAC5B,QAAIJ,OAAO,CAACF,KAAK,CAACW,CAAD,CAAN,EAAWF,IAAX,CAAP,KAA4B,CAAhC,EACE,OAAO,CAAC,CAAR;AACH;;AAED,MAAIE,CAAC,KAAK,CAAV,EACEX,KAAK,CAACY,OAAN,CAAcH,IAAd,EADF,KAEK,IAAIE,CAAC,KAAKX,KAAK,CAACM,MAAhB,EACHN,KAAK,CAACa,IAAN,CAAWJ,IAAX,EADG,KAGHT,KAAK,CAACc,MAAN,CAAaH,CAAb,EAAgB,CAAhB,EAAmBF,IAAnB;AAEF,SAAOE,CAAP;AACD,CAhBD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAb,OAAO,CAACiB,MAAR,GAAiB,SAASA,MAAT,CAAgBf,KAAhB,EAAuBS,IAAvB,EAA6BP,OAA7B,EAAsC;AACrD,QAAMS,CAAC,GAAGb,OAAO,CAACC,MAAR,CAAeC,KAAf,EAAsBS,IAAtB,EAA4BP,OAA5B,EAAqC,KAArC,CAAV;AAEA,MAAIS,CAAC,KAAK,CAAC,CAAX,EACE,OAAO,KAAP;AAEFG,EAAAA,MAAM,CAACd,KAAD,EAAQW,CAAR,CAAN;AAEA,SAAO,IAAP;AACD,CATD;AAWA;AACA;AACA;;;AAEA,SAASG,MAAT,CAAgBE,IAAhB,EAAsBL,CAAtB,EAAyB;AACvB,MAAIA,CAAC,KAAK,CAAV,EAAa;AACXK,IAAAA,IAAI,CAACC,KAAL;AACA;AACD;;AAED,MAAIC,CAAC,GAAGP,CAAC,GAAG,CAAZ;;AAEA,SAAOO,CAAC,GAAGF,IAAI,CAACV,MAAhB,EACEU,IAAI,CAACL,CAAC,EAAF,CAAJ,GAAYK,IAAI,CAACE,CAAC,EAAF,CAAhB;;AAEFF,EAAAA,IAAI,CAACG,GAAL;AACD","sourcesContent":["/*!\n * binary.js - binary search utils for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\n/**\n * Perform a binary search on a sorted array.\n * @param {Array} items\n * @param {Object} key\n * @param {Function} compare\n * @param {Boolean?} insert\n * @returns {Number} Index.\n */\n\nexports.search = function search(items, key, compare, insert) {\n  let start = 0;\n  let end = items.length - 1;\n\n  while (start <= end) {\n    const pos = (start + end) >>> 1;\n    const cmp = compare(items[pos], key);\n\n    if (cmp === 0)\n      return pos;\n\n    if (cmp < 0)\n      start = pos + 1;\n    else\n      end = pos - 1;\n  }\n\n  if (!insert)\n    return -1;\n\n  return start;\n};\n\n/**\n * Perform a binary insert on a sorted array.\n * @param {Array} items\n * @param {Object} item\n * @param {Function} compare\n * @returns {Number} index\n */\n\nexports.insert = function insert(items, item, compare, uniq) {\n  const i = exports.search(items, item, compare, true);\n\n  if (uniq && i < items.length) {\n    if (compare(items[i], item) === 0)\n      return -1;\n  }\n\n  if (i === 0)\n    items.unshift(item);\n  else if (i === items.length)\n    items.push(item);\n  else\n    items.splice(i, 0, item);\n\n  return i;\n};\n\n/**\n * Perform a binary removal on a sorted array.\n * @param {Array} items\n * @param {Object} item\n * @param {Function} compare\n * @returns {Boolean}\n */\n\nexports.remove = function remove(items, item, compare) {\n  const i = exports.search(items, item, compare, false);\n\n  if (i === -1)\n    return false;\n\n  splice(items, i);\n\n  return true;\n};\n\n/*\n * Helpers\n */\n\nfunction splice(list, i) {\n  if (i === 0) {\n    list.shift();\n    return;\n  }\n\n  let k = i + 1;\n\n  while (k < list.length)\n    list[i++] = list[k++];\n\n  list.pop();\n}\n"]},"metadata":{},"sourceType":"module"}