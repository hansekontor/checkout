{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar HTMLCanvasElementLuminanceSource_1 = require(\"./HTMLCanvasElementLuminanceSource\");\n\nvar VideoInputDevice_1 = require(\"./VideoInputDevice\");\n\nvar BinaryBitmap_1 = require(\"../core/BinaryBitmap\");\n\nvar HybridBinarizer_1 = require(\"../core/common/HybridBinarizer\");\n\nvar NotFoundException_1 = require(\"../core/NotFoundException\");\n\nvar ArgumentException_1 = require(\"../core/ArgumentException\");\n\nvar ChecksumException_1 = require(\"../core/ChecksumException\");\n\nvar FormatException_1 = require(\"../core/FormatException\");\n/**\r\n * Base class for browser code reader.\r\n *\r\n * @export\r\n * @class BrowserCodeReader\r\n */\n\n\nvar BrowserCodeReader =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of BrowserCodeReader.\r\n   * @param {Reader} reader The reader instance to decode the barcode\r\n   * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n  function BrowserCodeReader(reader, timeBetweenScansMillis, hints) {\n    if (timeBetweenScansMillis === void 0) {\n      timeBetweenScansMillis = 500;\n    }\n\n    this.reader = reader;\n    this.timeBetweenScansMillis = timeBetweenScansMillis;\n    this.hints = hints;\n  }\n  /**\r\n   * Obtain the list of available devices with type 'videoinput'.\r\n   *\r\n   * @returns {Promise<VideoInputDevice[]>} an array of available video input devices\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n\n\n  BrowserCodeReader.prototype.getVideoInputDevices = function () {\n    return new Promise(function (resolve, reject) {\n      navigator.mediaDevices.enumerateDevices().then(function (devices) {\n        var sources = new Array();\n        var c = 0;\n\n        for (var i = 0, length_1 = devices.length; i !== length_1; i++) {\n          var device = devices[i];\n\n          if (device.kind === 'videoinput') {\n            sources.push(new VideoInputDevice_1.VideoInputDevice(device.deviceId, device.label || \"Video source \" + c));\n            c++;\n          }\n        }\n\n        resolve(sources);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  };\n  /**\r\n   * Decodes the barcode from the device specified by deviceId while showing the video in the specified video element.\r\n   *\r\n   * @param {string} [deviceId] the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\r\n   * @param {(string|HTMLVideoElement)} [videoElement] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\r\n   * @returns {Promise<Result>} The decoding result.\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromInputVideoDevice = function (deviceId, videoElement) {\n    this.reset();\n    this.prepareVideoElement(videoElement);\n    var constraints;\n\n    if (undefined === deviceId) {\n      constraints = {\n        video: {\n          facingMode: 'environment'\n        }\n      };\n    } else {\n      constraints = {\n        video: {\n          deviceId: {\n            exact: deviceId\n          }\n        }\n      };\n    }\n\n    var me = this;\n    return new Promise(function (resolve, reject) {\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        me.stream = stream;\n        me.videoElement.srcObject = stream;\n\n        me.videoPlayingEventListener = function () {\n          me.decodeOnceWithDelay(resolve, reject);\n        };\n\n        me.videoElement.addEventListener('playing', me.videoPlayingEventListener);\n        me.videoElement.play();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n  /**\r\n   * Decodes a barcode form a video url.\r\n   *\r\n   * @param {string} videoUrl The video url to decode from, required.\r\n   * @param {(string|HTMLVideoElement)} [videoElement] The video element where to play the video while decoding. Can be undefined in which case no video is shown.\r\n   * @returns {Promise<Result>} The decoding result.\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromVideoSource = function (videoUrl, videoElement) {\n    this.reset();\n    this.prepareVideoElement(videoElement);\n    var me = this;\n    return new Promise(function (resolve, reject) {\n      me.videoPlayEndedEventListener = function () {\n        me.stop();\n        reject(new NotFoundException_1.default());\n      };\n\n      me.videoElement.addEventListener('ended', me.videoPlayEndedEventListener);\n\n      me.videoPlayingEventListener = function () {\n        me.decodeOnceWithDelay(resolve, reject);\n      };\n\n      me.videoElement.addEventListener('playing', me.videoPlayingEventListener);\n      me.videoElement.setAttribute('autoplay', 'true');\n      me.videoElement.setAttribute('src', videoUrl);\n    });\n  };\n\n  BrowserCodeReader.prototype.prepareVideoElement = function (videoElement) {\n    if (undefined === videoElement) {\n      this.videoElement = document.createElement('video');\n      this.videoElement.width = 640;\n      this.videoElement.height = 480;\n    } else if (typeof videoElement === 'string') {\n      this.videoElement = this.getMediaElement(videoElement, 'video');\n    } else {\n      this.videoElement = videoElement;\n    } // Needed for iOS 11\n\n\n    this.videoElement.setAttribute('autoplay', 'true');\n    this.videoElement.setAttribute('muted', 'true');\n    this.videoElement.setAttribute('playsinline', 'true');\n    this.videoElement.setAttribute('autofocus', 'true');\n  };\n\n  BrowserCodeReader.prototype.getMediaElement = function (mediaElementId, type) {\n    var mediaElement = document.getElementById(mediaElementId);\n\n    if (null === mediaElement) {\n      throw new ArgumentException_1.default(\"element with id '\" + mediaElementId + \"' not found\");\n    }\n\n    if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\n      throw new ArgumentException_1.default(\"element with id '\" + mediaElementId + \"' must be an \" + type + \" element\");\n    }\n\n    return mediaElement;\n  };\n  /**\r\n   * Decodes the barcode from an image.\r\n   *\r\n   * @param {(string|HTMLImageElement)} [imageElement] The image element that can be either an element id or the element itself. Can be undefined in which case the decoding will be done from the imageUrl parameter.\r\n   * @param {string} [imageUrl]\r\n   * @returns {Promise<Result>} The decoding result.\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromImage = function (imageElement, imageUrl) {\n    var _this = this;\n\n    this.reset();\n\n    if (undefined === imageElement && undefined === imageUrl) {\n      throw new ArgumentException_1.default('either imageElement with a src set or an url must be provided');\n    }\n\n    this.prepareImageElement(imageElement);\n    var me = this;\n    return new Promise(function (resolve, reject) {\n      if (undefined !== imageUrl) {\n        me.imageLoadedEventListener = function () {\n          me.decodeOnce(resolve, reject, false, true);\n        };\n\n        me.imageElement.addEventListener('load', me.imageLoadedEventListener);\n        me.imageElement.src = imageUrl;\n      } else if (_this.isImageLoaded(_this.imageElement)) {\n        me.decodeOnce(resolve, reject, false, true);\n      } else {\n        throw new ArgumentException_1.default(\"either src or a loaded img should be provided\");\n      }\n    });\n  };\n\n  BrowserCodeReader.prototype.isImageLoaded = function (img) {\n    // During the onload event, IE correctly identifies any images that\n    // weren’t downloaded as not complete. Others should too. Gecko-based\n    // browsers act like NS4 in that they report this incorrectly.\n    if (!img.complete) {\n      return false;\n    } // However, they do have two very useful properties: naturalWidth and\n    // naturalHeight. These give the true size of the image. If it failed\n    // to load, either of these should be zero.\n\n\n    if (img.naturalWidth === 0) {\n      return false;\n    } // No other way of checking: assume it’s ok.\n\n\n    return true;\n  };\n\n  BrowserCodeReader.prototype.prepareImageElement = function (imageElement) {\n    if (undefined === imageElement) {\n      this.imageElement = document.createElement('img');\n      this.imageElement.width = 200;\n      this.imageElement.height = 200;\n    } else if (typeof imageElement === 'string') {\n      this.imageElement = this.getMediaElement(imageElement, 'img');\n    } else {\n      this.imageElement = imageElement;\n    }\n  };\n\n  BrowserCodeReader.prototype.decodeOnceWithDelay = function (resolve, reject) {\n    this.timeoutHandler = window.setTimeout(this.decodeOnce.bind(this, resolve, reject), this.timeBetweenScansMillis);\n  };\n\n  BrowserCodeReader.prototype.decodeOnce = function (resolve, reject, retryIfNotFound, retryIfChecksumOrFormatError) {\n    if (retryIfNotFound === void 0) {\n      retryIfNotFound = true;\n    }\n\n    if (retryIfChecksumOrFormatError === void 0) {\n      retryIfChecksumOrFormatError = true;\n    }\n\n    if (undefined === this.canvasElementContext) {\n      this.prepareCaptureCanvas();\n    }\n\n    this.drawImageOnCanvas(this.canvasElementContext, this.videoElement || this.imageElement);\n    var luminanceSource = new HTMLCanvasElementLuminanceSource_1.HTMLCanvasElementLuminanceSource(this.canvasElement);\n    var binaryBitmap = new BinaryBitmap_1.default(new HybridBinarizer_1.default(luminanceSource));\n\n    try {\n      var result = this.readerDecode(binaryBitmap);\n      resolve(result);\n    } catch (re) {\n      if (retryIfNotFound && re instanceof NotFoundException_1.default) {\n        // Not found, trying again\n        this.decodeOnceWithDelay(resolve, reject);\n      } else if (retryIfChecksumOrFormatError && (re instanceof ChecksumException_1.default || re instanceof FormatException_1.default)) {\n        // checksum or format error, trying again\n        this.decodeOnceWithDelay(resolve, reject);\n      } else {\n        reject(re);\n      }\n    }\n  };\n  /**\r\n   * This will remain protected, so who extends this class can customize this method.\r\n   */\n\n\n  BrowserCodeReader.prototype.drawImageOnCanvas = function (canvasElementContext, srcElement) {\n    canvasElementContext.drawImage(srcElement, 0, 0);\n  };\n\n  BrowserCodeReader.prototype.readerDecode = function (binaryBitmap) {\n    return this.reader.decode(binaryBitmap, this.hints);\n  };\n\n  BrowserCodeReader.prototype.prepareCaptureCanvas = function () {\n    var canvasElement = document.createElement('canvas');\n    var width, height;\n\n    if (undefined !== this.videoElement) {\n      width = this.videoElement.videoWidth;\n      height = this.videoElement.videoHeight;\n    } else {\n      width = this.imageElement.naturalWidth || this.imageElement.width;\n      height = this.imageElement.naturalHeight || this.imageElement.height;\n    }\n\n    canvasElement.style.width = width + \"px\";\n    canvasElement.style.height = height + \"px\";\n    canvasElement.width = width;\n    canvasElement.height = height;\n    this.canvasElement = canvasElement;\n    this.canvasElementContext = canvasElement.getContext('2d'); // this.videoElement.parentElement.appendChild(this.canvasElement)\n  };\n\n  BrowserCodeReader.prototype.stop = function () {\n    if (undefined !== this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = undefined;\n    }\n\n    if (undefined !== this.stream) {\n      this.stream.getTracks()[0].stop();\n      this.stream = undefined;\n    }\n  };\n  /**\r\n   * Resets the code reader to the initial state. Cancels any ongoing barcode scanning from video or camera.\r\n   *\r\n   * @memberOf BrowserCodeReader\r\n   */\n\n\n  BrowserCodeReader.prototype.reset = function () {\n    this.stop();\n\n    if (undefined !== this.videoPlayEndedEventListener && undefined !== this.videoElement) {\n      this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);\n    }\n\n    if (undefined !== this.videoPlayingEventListener && undefined !== this.videoElement) {\n      this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);\n    }\n\n    if (undefined !== this.videoElement) {\n      this.videoElement.srcObject = undefined;\n      this.videoElement.removeAttribute('src');\n      this.videoElement = undefined;\n    }\n\n    if (undefined !== this.videoPlayEndedEventListener && undefined !== this.imageElement) {\n      this.imageElement.removeEventListener('load', this.imageLoadedEventListener);\n    }\n\n    if (undefined !== this.imageElement) {\n      this.imageElement.src = undefined;\n      this.imageElement.removeAttribute('src');\n      this.imageElement = undefined;\n    }\n\n    this.canvasElementContext = undefined;\n    this.canvasElement = undefined;\n  };\n\n  return BrowserCodeReader;\n}();\n\nexports.BrowserCodeReader = BrowserCodeReader;","map":null,"metadata":{},"sourceType":"script"}