{"ast":null,"code":"/*!\n * protoreader.js - protobufs for bcoin\n * Copyright (c) 2016-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst BufferReader = require('bufio/lib/reader');\n/*\n * Constants\n */\n\n\nconst wireType = {\n  VARINT: 0,\n  FIXED64: 1,\n  DELIMITED: 2,\n  START_GROUP: 3,\n  END_GROUP: 4,\n  FIXED32: 5\n};\n/**\n * ProtoBuf Reader\n * @extends {BufferReader}\n */\n\nclass ProtoReader extends BufferReader {\n  /**\n   * Create a protoreader.\n   * @constructor\n   */\n  constructor(data, zeroCopy) {\n    super(data, zeroCopy);\n  }\n\n  readVarint() {\n    const {\n      size,\n      value\n    } = _readVarint(this.data, this.offset);\n\n    this.offset += size;\n    return value;\n  }\n\n  readFieldValue(tag, opt) {\n    const field = this.readField(tag, opt);\n    if (!field) return -1;\n    assert(field.value != null);\n    return field.value;\n  }\n\n  readFieldU64(tag, opt) {\n    const field = this.readField(tag, opt);\n    if (!field) return -1;\n    assert(field.type === wireType.VARINT || field.type === wireType.FIXED64);\n    return field.value;\n  }\n\n  readFieldU32(tag, opt) {\n    const field = this.readField(tag, opt);\n    if (!field) return -1;\n    assert(field.type === wireType.VARINT || field.type === wireType.FIXED32);\n    return field.value;\n  }\n\n  readFieldBytes(tag, opt) {\n    const field = this.readField(tag, opt);\n    if (!field) return null;\n    assert(field.data);\n    return field.data;\n  }\n\n  readFieldString(tag, opt, enc) {\n    const field = this.readField(tag, opt);\n    if (!field) return null;\n    assert(field.data);\n    return field.data.toString(enc || 'utf8');\n  }\n\n  nextTag() {\n    if (this.left() === 0) return -1;\n    const field = this.readField();\n    this.seek(-field.size);\n    return field.tag;\n  }\n\n  readField(tag, opt) {\n    const offset = this.offset;\n    const header = this.readVarint();\n    const field = new Field(header);\n\n    if (tag != null && field.tag !== tag) {\n      assert(opt, 'Non-optional field not present.');\n      this.offset = offset;\n      return null;\n    }\n\n    switch (field.type) {\n      case wireType.VARINT:\n        field.value = this.readVarint();\n        break;\n\n      case wireType.FIXED64:\n        field.value = this.readU64();\n        break;\n\n      case wireType.DELIMITED:\n        field.data = this.readVarBytes();\n        break;\n\n      case wireType.START_GROUP:\n        field.group = [];\n\n        for (;;) {\n          const inner = this.readField();\n          if (inner.type === wireType.END_GROUP) break;\n          field.group.push(inner);\n        }\n\n        break;\n\n      case wireType.END_GROUP:\n        assert(false, 'Unexpected end group.');\n        break;\n\n      case wireType.FIXED32:\n        field.value = this.readU32();\n        break;\n\n      default:\n        assert(false, 'Bad wire type.');\n        break;\n    }\n\n    field.size = this.offset - offset;\n    return field;\n  }\n\n}\n/*\n * Encoding\n */\n\n\nfunction _readVarint(data, off) {\n  let num = 0;\n  let ch = 0x80;\n  let size = 0;\n\n  while (ch & 0x80) {\n    if (off >= data.length) {\n      num = 0;\n      break;\n    }\n\n    ch = data[off]; // Optimization for javascript insanity.\n\n    switch (size) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n        num += (ch & 0x7f) << 7 * size;\n        break;\n\n      case 4:\n        num += (ch & 0x7f) * (1 << 7 * size);\n        break;\n\n      default:\n        num += (ch & 0x7f) * Math.pow(2, 7 * size);\n        break;\n    }\n\n    off += 1;\n    size += 1;\n    assert(size < 7, 'Number exceeds 2^53-1.');\n  }\n\n  return new Varint(size, num);\n}\n/*\n * Helpers\n */\n\n\nclass Field {\n  constructor(header) {\n    this.tag = header >>> 3;\n    this.type = header & 7;\n    this.size = 0;\n    this.value = 0;\n    this.data = null;\n    this.group = null;\n  }\n\n}\n\nclass Varint {\n  constructor(size, value) {\n    this.size = size;\n    this.value = value;\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = ProtoReader;","map":null,"metadata":{},"sourceType":"script"}