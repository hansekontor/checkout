{"ast":null,"code":"/*!\n * ecies.js - ecies for javascript (crypto_secretbox_xsalsa20poly1305)\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme\n *   https://nacl.cr.yp.to/secretbox.html\n */\n'use strict';\n\nconst assert = require('./internal/assert');\n\nconst box = require('./secretbox');\n\nconst random = require('./random');\n/*\n * ECIES\n */\n\n\nfunction encrypt(curve, kdf, msg, pub) {\n  let priv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  assert(curve && typeof curve.id === 'string');\n  if (priv == null) priv = curve.privateKeyGenerate();\n  const ourPub = curve.publicKeyCreate(priv);\n  const secret = curve.derive(pub, priv);\n  const key = box.derive(secret, kdf);\n  const nonce = random.randomBytes(24);\n  const sealed = box.seal(msg, key, nonce);\n  return Buffer.concat([ourPub, nonce, sealed]);\n}\n\nfunction decrypt(curve, kdf, msg, priv) {\n  assert(curve && typeof curve.id === 'string');\n  assert(Buffer.isBuffer(msg));\n  const klen = curve.type === 'ecdsa' ? 1 + curve.size : curve.size;\n  if (msg.length < klen + 24) throw new Error('Invalid ciphertext.');\n  const theirPub = msg.slice(0, klen);\n  const nonce = msg.slice(klen, klen + 24);\n  const sealed = msg.slice(klen + 24);\n  const secret = curve.derive(theirPub, priv);\n  const key = box.derive(secret, kdf);\n  return box.open(sealed, key, nonce);\n}\n/*\n * Expose\n */\n\n\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}