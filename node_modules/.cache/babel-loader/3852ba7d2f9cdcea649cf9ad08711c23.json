{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar OneDReader_1 = require(\"./OneDReader\");\n\nvar EAN13Reader_1 = require(\"./EAN13Reader\");\n\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\r\n * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\r\n * read all such formats, it is most efficient to use this implementation rather than invoke\r\n * individual readers.</p>\r\n *\r\n * @author Sean Owen\r\n */\n\n\nvar MultiFormatUPCEANReader =\n/** @class */\nfunction (_super) {\n  __extends(MultiFormatUPCEANReader, _super);\n\n  function MultiFormatUPCEANReader(hints) {\n    var _this = _super.call(this) || this;\n\n    var possibleFormats = hints == null ? null : hints.get(2\n    /* POSSIBLE_FORMATS */\n    );\n    var readers = [];\n\n    if (possibleFormats != null) {\n      if (possibleFormats.indexOf(BarcodeFormat_1.default.EAN_13) > -1) {\n        readers.push(new EAN13Reader_1.default());\n      } // todo add UPC_A, EAN_8, UPC_E\n\n    }\n\n    if (readers.length === 0) {\n      readers.push(new EAN13Reader_1.default()); // todo add UPC_A, EAN_8, UPC_E\n    }\n\n    _this.readers = readers;\n    return _this;\n  }\n\n  MultiFormatUPCEANReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    for (var _i = 0, _a = this.readers; _i < _a.length; _i++) {\n      var reader = _a[_i];\n\n      try {\n        return reader.decodeRow(rowNumber, row, hints); // TODO ean13MayBeUPCA\n      } catch (err) {// continue;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  };\n\n  MultiFormatUPCEANReader.prototype.reset = function () {\n    for (var _i = 0, _a = this.readers; _i < _a.length; _i++) {\n      var reader = _a[_i];\n      reader.reset();\n    }\n  };\n\n  return MultiFormatUPCEANReader;\n}(OneDReader_1.default);\n\nexports.default = MultiFormatUPCEANReader;","map":null,"metadata":{},"sourceType":"script"}