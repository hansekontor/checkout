{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2012 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.detector {*/\n\n/**\r\n * General math-related and numeric utility functions.\r\n */\n\nvar MathUtils =\n/** @class */\nfunction () {\n  function MathUtils() {}\n\n  MathUtils.prototype.MathUtils = function () {};\n  /**\r\n   * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\r\n   * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\r\n   * differ slightly from {@link Math#round(float)} in that half rounds down for negative\r\n   * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\r\n   *\r\n   * @param d real value to round\r\n   * @return nearest {@code int}\r\n   */\n\n\n  MathUtils.round = function (d\n  /*float*/\n  ) {\n    if (NaN === d) return 0;\n    if (d <= Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER;\n    if (d >= Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\n    return (\n      /*(int) */\n      d + (d < 0.0 ? -0.5 : 0.5) | 0\n    );\n  }; // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n\n  /**\r\n   * @param aX point A x coordinate\r\n   * @param aY point A y coordinate\r\n   * @param bX point B x coordinate\r\n   * @param bY point B y coordinate\r\n   * @return Euclidean distance between points A and B\r\n   */\n\n\n  MathUtils.distance = function (aX\n  /*float|int*/\n  , aY\n  /*float|int*/\n  , bX\n  /*float|int*/\n  , bY\n  /*float|int*/\n  ) {\n    var xDiff = aX - bX;\n    var yDiff = aY - bY;\n    return (\n      /*(float) */\n      Math.sqrt(xDiff * xDiff + yDiff * yDiff)\n    );\n  };\n  /**\r\n   * @param aX point A x coordinate\r\n   * @param aY point A y coordinate\r\n   * @param bX point B x coordinate\r\n   * @param bY point B y coordinate\r\n   * @return Euclidean distance between points A and B\r\n   */\n  // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n  //   const xDiff = aX - bX\n  //   const yDiff = aY - bY\n  //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  // }\n\n  /**\r\n   * @param array values to sum\r\n   * @return sum of values in array\r\n   */\n\n\n  MathUtils.sum = function (array) {\n    var count = 0;\n\n    for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n      var a = array[i];\n      count += a;\n    }\n\n    return count;\n  };\n\n  return MathUtils;\n}();\n\nexports.default = MathUtils;","map":null,"metadata":{},"sourceType":"script"}