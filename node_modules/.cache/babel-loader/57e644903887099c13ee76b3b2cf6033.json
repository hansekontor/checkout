{"ast":null,"code":"/*!\n * coinview.js - coin viewpoint object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst {\n  BufferMap\n} = require('buffer-map');\n\nconst Coins = require('./coins');\n\nconst UndoCoins = require('./undocoins');\n\nconst CoinEntry = require('./coinentry');\n/**\n * Coin View\n * Represents a coin viewpoint:\n * a snapshot of {@link Coins} objects.\n * @alias module:coins.CoinView\n * @property {Object} map\n * @property {UndoCoins} undo\n */\n\n\nclass CoinView {\n  /**\n   * Create a coin view.\n   * @constructor\n   */\n  constructor() {\n    this.map = new BufferMap();\n    this.undo = new UndoCoins();\n  }\n  /**\n   * Get coins.\n   * @param {Hash} hash\n   * @returns {Coins} coins\n   */\n\n\n  get(hash) {\n    return this.map.get(hash);\n  }\n  /**\n   * Test whether the view has an entry.\n   * @param {Hash} hash\n   * @returns {Boolean}\n   */\n\n\n  has(hash) {\n    return this.map.has(hash);\n  }\n  /**\n   * Add coins to the collection.\n   * @param {Hash} hash\n   * @param {Coins} coins\n   * @returns {Coins}\n   */\n\n\n  add(hash, coins) {\n    this.map.set(hash, coins);\n    return coins;\n  }\n  /**\n   * Ensure existence of coins object in the collection.\n   * @param {Hash} hash\n   * @returns {Coins}\n   */\n\n\n  ensure(hash) {\n    const coins = this.map.get(hash);\n    if (coins) return coins;\n    return this.add(hash, new Coins());\n  }\n  /**\n   * Remove coins from the collection.\n   * @param {Coins} coins\n   * @returns {Coins|null}\n   */\n\n\n  remove(hash) {\n    const coins = this.map.get(hash);\n    if (!coins) return null;\n    this.map.delete(hash);\n    return coins;\n  }\n  /**\n   * Add a tx to the collection.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n\n  addTX(tx, height) {\n    const hash = tx.hash();\n    const coins = Coins.fromTX(tx, height);\n    return this.add(hash, coins);\n  }\n  /**\n   * Remove a tx from the collection.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n\n  removeTX(tx, height) {\n    const hash = tx.hash();\n    const coins = Coins.fromTX(tx, height);\n\n    for (const coin of coins.outputs.values()) coin.spent = true;\n\n    return this.add(hash, coins);\n  }\n  /**\n   * Add an entry to the collection.\n   * @param {Outpoint} prevout\n   * @param {CoinEntry} coin\n   * @returns {CoinEntry|null}\n   */\n\n\n  addEntry(prevout, coin) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.ensure(hash);\n    return coins.add(index, coin);\n  }\n  /**\n   * Add a coin to the collection.\n   * @param {Coin} coin\n   * @returns {CoinEntry|null}\n   */\n\n\n  addCoin(coin) {\n    const coins = this.ensure(coin.hash);\n    return coins.addCoin(coin);\n  }\n  /**\n   * Add an output to the collection.\n   * @param {Outpoint} prevout\n   * @param {Output} output\n   * @returns {CoinEntry|null}\n   */\n\n\n  addOutput(prevout, output) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.ensure(hash);\n    return coins.addOutput(index, output);\n  }\n  /**\n   * Add an output to the collection by output index.\n   * @param {TX} tx\n   * @param {Number} index\n   * @param {Number} height\n   * @returns {CoinEntry|null}\n   */\n\n\n  addIndex(tx, index, height) {\n    const hash = tx.hash();\n    const coins = this.ensure(hash);\n    return coins.addIndex(tx, index, height);\n  }\n  /**\n   * Spend an output.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n\n  spendEntry(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return null;\n    const coin = coins.spend(index);\n    if (!coin) return null;\n    this.undo.push(coin);\n    return coin;\n  }\n  /**\n   * Remove an output.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n\n  removeEntry(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return null;\n    return coins.remove(index);\n  }\n  /**\n   * Test whether the view has an entry by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n\n  hasEntry(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return false;\n    return coins.has(index);\n  }\n  /**\n   * Get a single entry by prevout.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n\n  getEntry(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return null;\n    return coins.get(index);\n  }\n  /**\n   * Test whether an entry has been spent by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n\n  isUnspent(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return false;\n    return coins.isUnspent(index);\n  }\n  /**\n   * Get a single coin by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Coin|null}\n   */\n\n\n  getCoin(prevout) {\n    const coins = this.get(prevout.hash);\n    if (!coins) return null;\n    return coins.getCoin(prevout);\n  }\n  /**\n   * Get a single output by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Output|null}\n   */\n\n\n  getOutput(prevout) {\n    const {\n      hash,\n      index\n    } = prevout;\n    const coins = this.get(hash);\n    if (!coins) return null;\n    return coins.getOutput(index);\n  }\n  /**\n   * Get coins height by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Number}\n   */\n\n\n  getHeight(prevout) {\n    const coin = this.getEntry(prevout);\n    if (!coin) return -1;\n    return coin.height;\n  }\n  /**\n   * Get coins coinbase flag by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n\n  isCoinbase(prevout) {\n    const coin = this.getEntry(prevout);\n    if (!coin) return false;\n    return coin.coinbase;\n  }\n  /**\n   * Test whether the view has an entry by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n\n  hasEntryFor(input) {\n    return this.hasEntry(input.prevout);\n  }\n  /**\n   * Get a single entry by input.\n   * @param {Input} input\n   * @returns {CoinEntry|null}\n   */\n\n\n  getEntryFor(input) {\n    return this.getEntry(input.prevout);\n  }\n  /**\n   * Test whether an entry has been spent by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n\n  isUnspentFor(input) {\n    return this.isUnspent(input.prevout);\n  }\n  /**\n   * Get a single coin by input.\n   * @param {Input} input\n   * @returns {Coin|null}\n   */\n\n\n  getCoinFor(input) {\n    return this.getCoin(input.prevout);\n  }\n  /**\n   * Get a single output by input.\n   * @param {Input} input\n   * @returns {Output|null}\n   */\n\n\n  getOutputFor(input) {\n    return this.getOutput(input.prevout);\n  }\n  /**\n   * Get coins height by input.\n   * @param {Input} input\n   * @returns {Number}\n   */\n\n\n  getHeightFor(input) {\n    return this.getHeight(input.prevout);\n  }\n  /**\n   * Get coins coinbase flag by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n\n  isCoinbaseFor(input) {\n    return this.isCoinbase(input.prevout);\n  }\n  /**\n   * Retrieve coins from database.\n   * @method\n   * @param {ChainDB} db\n   * @param {Outpoint} prevout\n   * @returns {Promise} - Returns {@link CoinEntry}.\n   */\n\n\n  async readCoin(db, prevout) {\n    const cache = this.getEntry(prevout);\n    if (cache) return cache;\n    const coin = await db.readCoin(prevout);\n    if (!coin) return null;\n    return this.addEntry(prevout, coin);\n  }\n  /**\n   * Read all input coins into unspent map.\n   * @method\n   * @param {ChainDB} db\n   * @param {TX} tx\n   * @returns {Promise} - Returns {Boolean}.\n   */\n\n\n  async readInputs(db, tx) {\n    let found = true;\n\n    for (const {\n      prevout\n    } of tx.inputs) {\n      if (!(await this.readCoin(db, prevout))) found = false;\n    }\n\n    return found;\n  }\n  /**\n   * Spend coins for transaction.\n   * @method\n   * @param {ChainDB} db\n   * @param {TX} tx\n   * @returns {Promise} - Returns {Boolean}.\n   */\n\n\n  async spendInputs(db, tx) {\n    let i = 0;\n\n    while (i < tx.inputs.length) {\n      const len = Math.min(i + 4, tx.inputs.length);\n      const jobs = [];\n\n      for (; i < len; i++) {\n        const {\n          prevout\n        } = tx.inputs[i];\n        jobs.push(this.readCoin(db, prevout));\n      }\n\n      const coins = await Promise.all(jobs);\n\n      for (const coin of coins) {\n        if (!coin || coin.spent) return false;\n        coin.spent = true;\n        this.undo.push(coin);\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Calculate serialization size.\n   * @returns {Number}\n   */\n\n\n  getSize(tx) {\n    let size = 0;\n    size += tx.inputs.length;\n\n    for (const {\n      prevout\n    } of tx.inputs) {\n      const coin = this.getEntry(prevout);\n      if (!coin) continue;\n      size += coin.getSize();\n    }\n\n    return size;\n  }\n  /**\n   * Write coin data to buffer writer\n   * as it pertains to a transaction.\n   * @param {BufferWriter} bw\n   * @param {TX} tx\n   */\n\n\n  toWriter(bw, tx) {\n    for (const {\n      prevout\n    } of tx.inputs) {\n      const coin = this.getEntry(prevout);\n\n      if (!coin) {\n        bw.writeU8(0);\n        continue;\n      }\n\n      bw.writeU8(1);\n      coin.toWriter(bw);\n    }\n\n    return bw;\n  }\n  /**\n   * Read serialized view data from a buffer\n   * reader as it pertains to a transaction.\n   * @private\n   * @param {BufferReader} br\n   * @param {TX} tx\n   */\n\n\n  fromReader(br, tx) {\n    for (const {\n      prevout\n    } of tx.inputs) {\n      if (br.readU8() === 0) continue;\n      const coin = CoinEntry.fromReader(br);\n      this.addEntry(prevout, coin);\n    }\n\n    return this;\n  }\n  /**\n   * Read serialized view data from a buffer\n   * reader as it pertains to a transaction.\n   * @param {BufferReader} br\n   * @param {TX} tx\n   * @returns {CoinView}\n   */\n\n\n  static fromReader(br, tx) {\n    return new this().fromReader(br, tx);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = CoinView;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/coins/coinview.js"],"names":["BufferMap","require","Coins","UndoCoins","CoinEntry","CoinView","constructor","map","undo","get","hash","has","add","coins","set","ensure","remove","delete","addTX","tx","height","fromTX","removeTX","coin","outputs","values","spent","addEntry","prevout","index","addCoin","addOutput","output","addIndex","spendEntry","spend","push","removeEntry","hasEntry","getEntry","isUnspent","getCoin","getOutput","getHeight","isCoinbase","coinbase","hasEntryFor","input","getEntryFor","isUnspentFor","getCoinFor","getOutputFor","getHeightFor","isCoinbaseFor","readCoin","db","cache","readInputs","found","inputs","spendInputs","i","length","len","Math","min","jobs","Promise","all","getSize","size","toWriter","bw","writeU8","fromReader","br","readU8","module","exports"],"mappings":"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","sourcesContent":["/*!\n * coinview.js - coin viewpoint object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst {BufferMap} = require('buffer-map');\nconst Coins = require('./coins');\nconst UndoCoins = require('./undocoins');\nconst CoinEntry = require('./coinentry');\n\n/**\n * Coin View\n * Represents a coin viewpoint:\n * a snapshot of {@link Coins} objects.\n * @alias module:coins.CoinView\n * @property {Object} map\n * @property {UndoCoins} undo\n */\n\nclass CoinView {\n  /**\n   * Create a coin view.\n   * @constructor\n   */\n\n  constructor() {\n    this.map = new BufferMap();\n    this.undo = new UndoCoins();\n  }\n\n  /**\n   * Get coins.\n   * @param {Hash} hash\n   * @returns {Coins} coins\n   */\n\n  get(hash) {\n    return this.map.get(hash);\n  }\n\n  /**\n   * Test whether the view has an entry.\n   * @param {Hash} hash\n   * @returns {Boolean}\n   */\n\n  has(hash) {\n    return this.map.has(hash);\n  }\n\n  /**\n   * Add coins to the collection.\n   * @param {Hash} hash\n   * @param {Coins} coins\n   * @returns {Coins}\n   */\n\n  add(hash, coins) {\n    this.map.set(hash, coins);\n    return coins;\n  }\n\n  /**\n   * Ensure existence of coins object in the collection.\n   * @param {Hash} hash\n   * @returns {Coins}\n   */\n\n  ensure(hash) {\n    const coins = this.map.get(hash);\n\n    if (coins)\n      return coins;\n\n    return this.add(hash, new Coins());\n  }\n\n  /**\n   * Remove coins from the collection.\n   * @param {Coins} coins\n   * @returns {Coins|null}\n   */\n\n  remove(hash) {\n    const coins = this.map.get(hash);\n\n    if (!coins)\n      return null;\n\n    this.map.delete(hash);\n\n    return coins;\n  }\n\n  /**\n   * Add a tx to the collection.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n  addTX(tx, height) {\n    const hash = tx.hash();\n    const coins = Coins.fromTX(tx, height);\n    return this.add(hash, coins);\n  }\n\n  /**\n   * Remove a tx from the collection.\n   * @param {TX} tx\n   * @param {Number} height\n   * @returns {Coins}\n   */\n\n  removeTX(tx, height) {\n    const hash = tx.hash();\n    const coins = Coins.fromTX(tx, height);\n\n    for (const coin of coins.outputs.values())\n      coin.spent = true;\n\n    return this.add(hash, coins);\n  }\n\n  /**\n   * Add an entry to the collection.\n   * @param {Outpoint} prevout\n   * @param {CoinEntry} coin\n   * @returns {CoinEntry|null}\n   */\n\n  addEntry(prevout, coin) {\n    const {hash, index} = prevout;\n    const coins = this.ensure(hash);\n    return coins.add(index, coin);\n  }\n\n  /**\n   * Add a coin to the collection.\n   * @param {Coin} coin\n   * @returns {CoinEntry|null}\n   */\n\n  addCoin(coin) {\n    const coins = this.ensure(coin.hash);\n    return coins.addCoin(coin);\n  }\n\n  /**\n   * Add an output to the collection.\n   * @param {Outpoint} prevout\n   * @param {Output} output\n   * @returns {CoinEntry|null}\n   */\n\n  addOutput(prevout, output) {\n    const {hash, index} = prevout;\n    const coins = this.ensure(hash);\n    return coins.addOutput(index, output);\n  }\n\n  /**\n   * Add an output to the collection by output index.\n   * @param {TX} tx\n   * @param {Number} index\n   * @param {Number} height\n   * @returns {CoinEntry|null}\n   */\n\n  addIndex(tx, index, height) {\n    const hash = tx.hash();\n    const coins = this.ensure(hash);\n    return coins.addIndex(tx, index, height);\n  }\n\n  /**\n   * Spend an output.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n  spendEntry(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return null;\n\n    const coin = coins.spend(index);\n\n    if (!coin)\n      return null;\n\n    this.undo.push(coin);\n\n    return coin;\n  }\n\n  /**\n   * Remove an output.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n  removeEntry(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return null;\n\n    return coins.remove(index);\n  }\n\n  /**\n   * Test whether the view has an entry by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n  hasEntry(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return false;\n\n    return coins.has(index);\n  }\n\n  /**\n   * Get a single entry by prevout.\n   * @param {Outpoint} prevout\n   * @returns {CoinEntry|null}\n   */\n\n  getEntry(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return null;\n\n    return coins.get(index);\n  }\n\n  /**\n   * Test whether an entry has been spent by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n  isUnspent(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return false;\n\n    return coins.isUnspent(index);\n  }\n\n  /**\n   * Get a single coin by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Coin|null}\n   */\n\n  getCoin(prevout) {\n    const coins = this.get(prevout.hash);\n\n    if (!coins)\n      return null;\n\n    return coins.getCoin(prevout);\n  }\n\n  /**\n   * Get a single output by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Output|null}\n   */\n\n  getOutput(prevout) {\n    const {hash, index} = prevout;\n    const coins = this.get(hash);\n\n    if (!coins)\n      return null;\n\n    return coins.getOutput(index);\n  }\n\n  /**\n   * Get coins height by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Number}\n   */\n\n  getHeight(prevout) {\n    const coin = this.getEntry(prevout);\n\n    if (!coin)\n      return -1;\n\n    return coin.height;\n  }\n\n  /**\n   * Get coins coinbase flag by prevout.\n   * @param {Outpoint} prevout\n   * @returns {Boolean}\n   */\n\n  isCoinbase(prevout) {\n    const coin = this.getEntry(prevout);\n\n    if (!coin)\n      return false;\n\n    return coin.coinbase;\n  }\n\n  /**\n   * Test whether the view has an entry by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n  hasEntryFor(input) {\n    return this.hasEntry(input.prevout);\n  }\n\n  /**\n   * Get a single entry by input.\n   * @param {Input} input\n   * @returns {CoinEntry|null}\n   */\n\n  getEntryFor(input) {\n    return this.getEntry(input.prevout);\n  }\n\n  /**\n   * Test whether an entry has been spent by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n  isUnspentFor(input) {\n    return this.isUnspent(input.prevout);\n  }\n\n  /**\n   * Get a single coin by input.\n   * @param {Input} input\n   * @returns {Coin|null}\n   */\n\n  getCoinFor(input) {\n    return this.getCoin(input.prevout);\n  }\n\n  /**\n   * Get a single output by input.\n   * @param {Input} input\n   * @returns {Output|null}\n   */\n\n  getOutputFor(input) {\n    return this.getOutput(input.prevout);\n  }\n\n  /**\n   * Get coins height by input.\n   * @param {Input} input\n   * @returns {Number}\n   */\n\n  getHeightFor(input) {\n    return this.getHeight(input.prevout);\n  }\n\n  /**\n   * Get coins coinbase flag by input.\n   * @param {Input} input\n   * @returns {Boolean}\n   */\n\n  isCoinbaseFor(input) {\n    return this.isCoinbase(input.prevout);\n  }\n\n  /**\n   * Retrieve coins from database.\n   * @method\n   * @param {ChainDB} db\n   * @param {Outpoint} prevout\n   * @returns {Promise} - Returns {@link CoinEntry}.\n   */\n\n  async readCoin(db, prevout) {\n    const cache = this.getEntry(prevout);\n\n    if (cache)\n      return cache;\n\n    const coin = await db.readCoin(prevout);\n\n    if (!coin)\n      return null;\n\n    return this.addEntry(prevout, coin);\n  }\n\n  /**\n   * Read all input coins into unspent map.\n   * @method\n   * @param {ChainDB} db\n   * @param {TX} tx\n   * @returns {Promise} - Returns {Boolean}.\n   */\n\n  async readInputs(db, tx) {\n    let found = true;\n\n    for (const {prevout} of tx.inputs) {\n      if (!await this.readCoin(db, prevout))\n        found = false;\n    }\n\n    return found;\n  }\n\n  /**\n   * Spend coins for transaction.\n   * @method\n   * @param {ChainDB} db\n   * @param {TX} tx\n   * @returns {Promise} - Returns {Boolean}.\n   */\n\n  async spendInputs(db, tx) {\n    let i = 0;\n\n    while (i < tx.inputs.length) {\n      const len = Math.min(i + 4, tx.inputs.length);\n      const jobs = [];\n\n      for (; i < len; i++) {\n        const {prevout} = tx.inputs[i];\n        jobs.push(this.readCoin(db, prevout));\n      }\n\n      const coins = await Promise.all(jobs);\n\n      for (const coin of coins) {\n        if (!coin || coin.spent)\n          return false;\n\n        coin.spent = true;\n        this.undo.push(coin);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Calculate serialization size.\n   * @returns {Number}\n   */\n\n  getSize(tx) {\n    let size = 0;\n\n    size += tx.inputs.length;\n\n    for (const {prevout} of tx.inputs) {\n      const coin = this.getEntry(prevout);\n\n      if (!coin)\n        continue;\n\n      size += coin.getSize();\n    }\n\n    return size;\n  }\n\n  /**\n   * Write coin data to buffer writer\n   * as it pertains to a transaction.\n   * @param {BufferWriter} bw\n   * @param {TX} tx\n   */\n\n  toWriter(bw, tx) {\n    for (const {prevout} of tx.inputs) {\n      const coin = this.getEntry(prevout);\n\n      if (!coin) {\n        bw.writeU8(0);\n        continue;\n      }\n\n      bw.writeU8(1);\n      coin.toWriter(bw);\n    }\n\n    return bw;\n  }\n\n  /**\n   * Read serialized view data from a buffer\n   * reader as it pertains to a transaction.\n   * @private\n   * @param {BufferReader} br\n   * @param {TX} tx\n   */\n\n  fromReader(br, tx) {\n    for (const {prevout} of tx.inputs) {\n      if (br.readU8() === 0)\n        continue;\n\n      const coin = CoinEntry.fromReader(br);\n\n      this.addEntry(prevout, coin);\n    }\n\n    return this;\n  }\n\n  /**\n   * Read serialized view data from a buffer\n   * reader as it pertains to a transaction.\n   * @param {BufferReader} br\n   * @param {TX} tx\n   * @returns {CoinView}\n   */\n\n  static fromReader(br, tx) {\n    return new this().fromReader(br, tx);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = CoinView;\n"]},"metadata":{},"sourceType":"module"}