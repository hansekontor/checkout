{"ast":null,"code":"var _jsxFileName = \"/home/henrik/Documents/dev/checkoutmin/src/components/Common/Notifications.js\";\nimport * as React from 'react';\nimport { notification } from 'antd';\nimport { CashReceivedNotificationIcon, TokenReceivedNotificationIcon } from '@components/Common/CustomIcons';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { currency } from '@components/Common/Ticker';\nimport { MessageSignedNotificationIcon } from '@components/Common/CustomIcons'; // Success Notifications:\n\nconst sendXecNotification = link => {\n  notification.success({\n    message: 'Success',\n    description: /*#__PURE__*/React.createElement(\"a\", {\n      href: link,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }\n    }, \"Transaction successful. Click to view in block explorer.\")),\n    duration: currency.notificationDurationShort,\n    icon: /*#__PURE__*/React.createElement(CashReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst createTokenNotification = link => {\n  notification.success({\n    message: 'Success',\n    description: /*#__PURE__*/React.createElement(\"a\", {\n      href: link,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, \"Token created! Click to view in block explorer.\")),\n    icon: /*#__PURE__*/React.createElement(TokenReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst selfMintTokenNotification = () => {\n  notification.success({\n    message: 'Success',\n    description: /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, \"Tokens successfully minted! Please wait while balance is refreshed.\"),\n    icon: /*#__PURE__*/React.createElement(TokenReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst tokenIconSubmitSuccess = () => {\n  notification.success({\n    message: 'Success',\n    description: /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"Your eToken icon was successfully submitted.\"),\n    icon: /*#__PURE__*/React.createElement(TokenReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst sendTokenNotification = link => {\n  notification.success({\n    message: 'Success',\n    description: /*#__PURE__*/React.createElement(\"a\", {\n      href: link,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Transaction successful. Click to view in block explorer.\")),\n    duration: currency.notificationDurationShort,\n    icon: /*#__PURE__*/React.createElement(TokenReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst xecReceivedNotification = (balances, previousBalances, cashtabSettings, fiatPrice) => {\n  notification.success({\n    message: 'Transaction received',\n    description: /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \"+\", ' ', parseFloat(Number(balances.totalBalance - previousBalances.totalBalance).toFixed(currency.cashDecimals)).toLocaleString(), ' ', currency.ticker, ' ', cashtabSettings && cashtabSettings.fiatCurrency && `(${currency.fiatCurrencies[cashtabSettings.fiatCurrency].symbol}${(Number(balances.totalBalance - previousBalances.totalBalance) * fiatPrice).toFixed(currency.cashDecimals)} ${cashtabSettings.fiatCurrency.toUpperCase()})`),\n    duration: currency.notificationDurationShort,\n    icon: /*#__PURE__*/React.createElement(CashReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nconst eTokenReceivedNotification = (currency, receivedSlpTicker, receivedSlpQty, receivedSlpName) => {\n  notification.success({\n    message: `${currency.tokenTicker} transaction received: ${receivedSlpTicker}`,\n    description: /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"You received \", receivedSlpQty.toString(), \" \", receivedSlpName),\n    duration: currency.notificationDurationShort,\n    icon: /*#__PURE__*/React.createElement(TokenReceivedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n}; // Error Notification:\n\n\nconst errorNotification = (error, message, stringDescribingCallEvent) => {\n  console.log(error, message, stringDescribingCallEvent);\n  notification.error({\n    message: 'Error',\n    description: message,\n    duration: currency.notificationDurationLong\n  });\n};\n\nconst messageSignedNotification = msgSignature => {\n  notification.success({\n    message: 'Message Signature Generated',\n    description: /*#__PURE__*/React.createElement(Paragraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 22\n      }\n    }, msgSignature),\n    icon: /*#__PURE__*/React.createElement(MessageSignedNotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }),\n    style: {\n      width: '100%'\n    }\n  });\n};\n\nexport { sendXecNotification, createTokenNotification, tokenIconSubmitSuccess, sendTokenNotification, selfMintTokenNotification, xecReceivedNotification, eTokenReceivedNotification, errorNotification, messageSignedNotification };","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/components/Common/Notifications.js"],"names":["React","notification","CashReceivedNotificationIcon","TokenReceivedNotificationIcon","Paragraph","currency","MessageSignedNotificationIcon","sendXecNotification","link","success","message","description","duration","notificationDurationShort","icon","style","width","createTokenNotification","selfMintTokenNotification","tokenIconSubmitSuccess","sendTokenNotification","xecReceivedNotification","balances","previousBalances","cashtabSettings","fiatPrice","parseFloat","Number","totalBalance","toFixed","cashDecimals","toLocaleString","ticker","fiatCurrency","fiatCurrencies","symbol","toUpperCase","eTokenReceivedNotification","receivedSlpTicker","receivedSlpQty","receivedSlpName","tokenTicker","toString","errorNotification","error","stringDescribingCallEvent","console","log","notificationDurationLong","messageSignedNotification","msgSignature"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { notification } from 'antd';\nimport {\n    CashReceivedNotificationIcon,\n    TokenReceivedNotificationIcon,\n} from '@components/Common/CustomIcons';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { currency } from '@components/Common/Ticker';\nimport { MessageSignedNotificationIcon } from '@components/Common/CustomIcons';\n\n// Success Notifications:\nconst sendXecNotification = link => {\n    notification.success({\n        message: 'Success',\n        description: (\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Paragraph>\n                    Transaction successful. Click to view in block explorer.\n                </Paragraph>\n            </a>\n        ),\n        duration: currency.notificationDurationShort,\n        icon: <CashReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst createTokenNotification = link => {\n    notification.success({\n        message: 'Success',\n        description: (\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Paragraph>\n                    Token created! Click to view in block explorer.\n                </Paragraph>\n            </a>\n        ),\n        icon: <TokenReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst selfMintTokenNotification = () => {\n    notification.success({\n        message: 'Success',\n        description: (\n            <Paragraph>\n                Tokens successfully minted! Please wait while balance is refreshed.\n            </Paragraph>\n        ),\n        icon: <TokenReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst tokenIconSubmitSuccess = () => {\n    notification.success({\n        message: 'Success',\n        description: (\n            <Paragraph>Your eToken icon was successfully submitted.</Paragraph>\n        ),\n        icon: <TokenReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst sendTokenNotification = link => {\n    notification.success({\n        message: 'Success',\n        description: (\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Paragraph>\n                    Transaction successful. Click to view in block explorer.\n                </Paragraph>\n            </a>\n        ),\n        duration: currency.notificationDurationShort,\n        icon: <TokenReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst xecReceivedNotification = (\n    balances,\n    previousBalances,\n    cashtabSettings,\n    fiatPrice,\n) => {\n    notification.success({\n        message: 'Transaction received',\n        description: (\n            <Paragraph>\n                +{' '}\n                {parseFloat(\n                    Number(\n                        balances.totalBalance - previousBalances.totalBalance,\n                    ).toFixed(currency.cashDecimals),\n                ).toLocaleString()}{' '}\n                {currency.ticker}{' '}\n                {cashtabSettings &&\n                    cashtabSettings.fiatCurrency &&\n                    `(${\n                        currency.fiatCurrencies[cashtabSettings.fiatCurrency]\n                            .symbol\n                    }${(\n                        Number(\n                            balances.totalBalance -\n                                previousBalances.totalBalance,\n                        ) * fiatPrice\n                    ).toFixed(\n                        currency.cashDecimals,\n                    )} ${cashtabSettings.fiatCurrency.toUpperCase()})`}\n            </Paragraph>\n        ),\n        duration: currency.notificationDurationShort,\n        icon: <CashReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nconst eTokenReceivedNotification = (\n    currency,\n    receivedSlpTicker,\n    receivedSlpQty,\n    receivedSlpName,\n) => {\n    notification.success({\n        message: `${currency.tokenTicker} transaction received: ${receivedSlpTicker}`,\n        description: (\n            <Paragraph>\n                You received {receivedSlpQty.toString()} {receivedSlpName}\n            </Paragraph>\n        ),\n        duration: currency.notificationDurationShort,\n        icon: <TokenReceivedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\n// Error Notification:\n\nconst errorNotification = (error, message, stringDescribingCallEvent) => {\n    console.log(error, message, stringDescribingCallEvent);\n    notification.error({\n        message: 'Error',\n        description: message,\n        duration: currency.notificationDurationLong,\n    });\n};\n\nconst messageSignedNotification = msgSignature => {\n    notification.success({\n        message: 'Message Signature Generated',\n        description: <Paragraph>{msgSignature}</Paragraph>,\n        icon: <MessageSignedNotificationIcon />,\n        style: { width: '100%' },\n    });\n};\n\nexport {\n    sendXecNotification,\n    createTokenNotification,\n    tokenIconSubmitSuccess,\n    sendTokenNotification,\n    selfMintTokenNotification,\n    xecReceivedNotification,\n    eTokenReceivedNotification,\n    errorNotification,\n    messageSignedNotification,\n};\n"]},"metadata":{},"sourceType":"module"}