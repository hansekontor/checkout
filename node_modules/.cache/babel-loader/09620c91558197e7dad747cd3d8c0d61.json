{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"checkable\", \"changeOnSelect\", \"children\", \"options\", \"onChange\", \"value\", \"defaultValue\", \"popupVisible\", \"open\", \"dropdownClassName\", \"popupClassName\", \"onDropdownVisibleChange\", \"onPopupVisibleChange\", \"popupPlacement\", \"placement\", \"searchValue\", \"onSearch\", \"showSearch\", \"expandTrigger\", \"expandIcon\", \"loadingIcon\", \"displayRender\", \"loadData\", \"dropdownMenuColumnStyle\", \"dropdownPrefixCls\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport generate from \"rc-tree-select/es/generate\";\nimport OptionList from './OptionList';\nimport CascaderContext from './context';\nimport { connectValue, convertOptions, fillFieldNames, restoreCompatibleValue, splitValue } from './util';\nimport useUpdateEffect from './hooks/useUpdateEffect';\nimport useSearchConfig from './hooks/useSearchConfig';\nvar INTERNAL_VALUE_FIELD = '__rc_cascader_value__';\n/**\n * `rc-cascader` is much like `rc-tree-select` but API is very different.\n * It's caused that component developer is not same person\n * and we do not rice the API naming standard at that time.\n *\n * To avoid breaking change, wrap the `rc-tree-select` to compatible with `rc-cascader` API.\n * This should be better to merge to same API like `rc-tree-select` or `rc-select` in next major version.\n *\n * Update:\n * - dropdown class change to `rc-cascader-dropdown`\n * - direction rtl keyboard\n *\n * Deprecated:\n * - popupVisible\n * - hidePopupOnSelect\n *\n * Removed:\n * - builtinPlacements: Handle by select\n */\n\nvar RefCascader = generate({\n  prefixCls: 'rc-cascader',\n  optionList: OptionList\n});\n\nfunction defaultDisplayRender(labels) {\n  return labels.join(' / ');\n}\n\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var checkable = props.checkable,\n      changeOnSelect = props.changeOnSelect,\n      children = props.children,\n      options = props.options,\n      onChange = props.onChange,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      popupVisible = props.popupVisible,\n      open = props.open,\n      dropdownClassName = props.dropdownClassName,\n      popupClassName = props.popupClassName,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onPopupVisibleChange = props.onPopupVisibleChange,\n      popupPlacement = props.popupPlacement,\n      placement = props.placement,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      showSearch = props.showSearch,\n      expandTrigger = props.expandTrigger,\n      _props$expandIcon = props.expandIcon,\n      expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,\n      loadingIcon = props.loadingIcon,\n      _props$displayRender = props.displayRender,\n      displayRender = _props$displayRender === void 0 ? defaultDisplayRender : _props$displayRender,\n      loadData = props.loadData,\n      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var fieldNames = restProps.fieldNames; // ============================ Ref =============================\n\n  var cascaderRef = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        cascaderRef.current.focus();\n      },\n      blur: function blur() {\n        cascaderRef.current.blur();\n      }\n    };\n  });\n\n  var getEntityByValue = function getEntityByValue(val) {\n    return cascaderRef.current.getEntityByValue(val);\n  }; // =========================== Search ===========================\n\n\n  var _useMergedState = useMergedState(undefined, {\n    value: searchValue,\n    onChange: onSearch\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearch = _useMergedState2[0],\n      setMergedSearch = _useMergedState2[1];\n\n  var _useSearchConfig = useSearchConfig(showSearch),\n      _useSearchConfig2 = _slicedToArray(_useSearchConfig, 2),\n      mergedShowSearch = _useSearchConfig2[0],\n      searchConfig = _useSearchConfig2[1]; // ========================== Options ===========================\n\n\n  var outerFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  }, [fieldNames]);\n  var mergedFieldNames = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, outerFieldNames), {}, {\n      value: INTERNAL_VALUE_FIELD\n    });\n  }, [outerFieldNames]);\n  var mergedOptions = React.useMemo(function () {\n    return convertOptions(options, outerFieldNames, INTERNAL_VALUE_FIELD);\n  }, [options, outerFieldNames]); // =========================== Value ============================\n\n  /**\n   * Always pass props value to last value unit:\n   * - single: ['light', 'little'] => ['light__little']\n   * - multiple: [['light', 'little'], ['bamboo']] => ['light__little', 'bamboo']\n   */\n\n  var parseToInternalValue = function parseToInternalValue(propValue) {\n    var propValueList = [];\n\n    if (propValue) {\n      propValueList = checkable ? propValue : [propValue];\n    }\n\n    return propValueList.map(connectValue);\n  };\n\n  var _React$useState = React.useState(function () {\n    return parseToInternalValue(value || defaultValue);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      internalValue = _React$useState2[0],\n      setInternalValue = _React$useState2[1];\n\n  useUpdateEffect(function () {\n    setInternalValue(parseToInternalValue(value));\n  }, [value]); // =========================== Label ============================\n\n  var labelRender = function labelRender(entity, val) {\n    var fieldLabel = mergedFieldNames.label;\n\n    if (!entity) {\n      var valPath = splitValue(val);\n      return displayRender(valPath, []);\n    }\n\n    if (checkable) {\n      return entity.data.node[fieldLabel];\n    }\n\n    var _restoreCompatibleVal = restoreCompatibleValue(entity, mergedFieldNames),\n        selectedOptions = _restoreCompatibleVal.options;\n\n    var rawOptions = selectedOptions.map(function (opt) {\n      return opt.node;\n    });\n    var labelList = rawOptions.map(function (opt) {\n      return opt[fieldLabel];\n    });\n    return displayRender(labelList, rawOptions);\n  }; // =========================== Change ===========================\n\n\n  var onInternalChange = function onInternalChange(newValue\n  /** Not care current type */\n  ) {\n    // TODO: Need improve motion experience\n    setMergedSearch('');\n    var valueList = checkable ? newValue : [newValue];\n    var pathList = [];\n    var optionsList = [];\n    var valueEntities = valueList.map(getEntityByValue).filter(function (entity) {\n      return entity;\n    });\n    valueEntities.forEach(function (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, mergedFieldNames),\n          valueOptions = _restoreCompatibleVal2.options;\n\n      var originOptions = valueOptions.map(function (option) {\n        return option.node;\n      });\n      pathList.push(originOptions.map(function (opt) {\n        return (// Here we should use original FieldNames value mapping\n          opt[outerFieldNames.value]\n        );\n      }));\n      optionsList.push(originOptions);\n    }); // Fill state\n\n    if (value === undefined) {\n      setInternalValue(valueList);\n    }\n\n    if (onChange) {\n      if (checkable) {\n        onChange(pathList, optionsList);\n      } else {\n        // TODO: This should return null as other component.\n        // But its a breaking change and we should keep the logic.\n        onChange(pathList[0] || [], optionsList[0] || []);\n      }\n    }\n  }; // ============================ Open ============================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(!onPopupVisibleChange, '`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.');\n    warning(popupVisible === undefined, '`popupVisible` is deprecated. Please use `open` instead.');\n    warning(popupClassName === undefined, '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');\n    warning(popupPlacement === undefined, '`popupPlacement` is deprecated. Please use `placement` instead.');\n  }\n\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  }; // ========================== Context ===========================\n\n\n  var context = React.useMemo(function () {\n    return {\n      changeOnSelect: changeOnSelect,\n      expandTrigger: expandTrigger,\n      fieldNames: mergedFieldNames,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      loadData: loadData,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle,\n      search: searchConfig,\n      dropdownPrefixCls: dropdownPrefixCls\n    };\n  }, [changeOnSelect, expandTrigger, mergedFieldNames, expandIcon, loadingIcon, loadData, dropdownMenuColumnStyle, searchConfig, dropdownPrefixCls]); // =========================== Render ===========================\n\n  var dropdownStyle = // Search to match width\n  mergedSearch && searchConfig.matchInputWidth || // Empty keep the width\n  !mergedOptions.length ? {} : {\n    minWidth: 'auto'\n  };\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(RefCascader, _extends({\n    ref: cascaderRef\n  }, restProps, {\n    fieldNames: mergedFieldNames,\n    value: checkable ? internalValue : internalValue[0],\n    placement: mergedPlacement,\n    dropdownMatchSelectWidth: false,\n    dropdownStyle: dropdownStyle,\n    dropdownClassName: mergedDropdownClassName,\n    treeData: mergedOptions,\n    treeCheckable: checkable,\n    treeNodeFilterProp: \"label\",\n    onChange: onInternalChange,\n    showCheckedStrategy: RefCascader.SHOW_PARENT,\n    open: mergedOpen,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    searchValue: mergedSearch // Customize filter logic in OptionList\n    ,\n    filterTreeNode: function filterTreeNode() {\n      return true;\n    },\n    showSearch: mergedShowSearch,\n    onSearch: setMergedSearch,\n    labelRender: labelRender,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\nCascader.displayName = 'Cascader';\nexport default Cascader;","map":null,"metadata":{},"sourceType":"module"}