{"ast":null,"code":"// /*!\n//  * util.js - utils for bcoin\n//  * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n//  * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n//  * https://github.com/bcoin-org/bcoin\n//  */\n// 'use strict';\n// const assert = require('bsert');\n// /**\n//  * @exports utils/util\n//  */\n// const util = exports;\n// /**\n//  * Return hrtime (shim for browser).\n//  * @param {Array} time\n//  * @returns {Array} [seconds, nanoseconds]\n//  */\n// util.bench = function bench(time) {\n//   if (!process.hrtime) {\n//     const now = Date.now();\n//     if (time) {\n//       const [hi, lo] = time;\n//       const start = hi * 1000 + lo / 1e6;\n//       return now - start;\n//     }\n//     const ms = now % 1000;\n//     // Seconds\n//     const hi = (now - ms) / 1000;\n//     // Nanoseconds\n//     const lo = ms * 1e6;\n//     return [hi, lo];\n//   }\n//   if (time) {\n//     const [hi, lo] = process.hrtime(time);\n//     return hi * 1000 + lo / 1e6;\n//   }\n//   return process.hrtime();\n// };\n// /**\n//  * Get current time in unix time (seconds).\n//  * @returns {Number}\n//  */\n// util.now = function now() {\n//   return Math.floor(Date.now() / 1000);\n// };\n// /**\n//  * Get current time in unix time (milliseconds).\n//  * @returns {Number}\n//  */\n// util.ms = function ms() {\n//   return Date.now();\n// };\n// /**\n//  * Create a Date ISO string from time in unix time (seconds).\n//  * @param {Number?} time - Seconds in unix time.\n//  * @returns {String}\n//  */\n// util.date = function date(time) {\n//   if (time == null)\n//     time = util.now();\n//   return new Date(time * 1000).toISOString().slice(0, -5) + 'Z';\n// };\n// /**\n//  * Get unix seconds from a Date string.\n//  * @param {String?} date - Date ISO String.\n//  * @returns {Number}\n//  */\n// util.time = function time(date) {\n//   if (date == null)\n//     return util.now();\n//   return new Date(date) / 1000 | 0;\n// };\n// /**\n//  * Reverse a hex-string.\n//  * @param {Buffer}\n//  * @returns {String} Reversed hex string.\n//  */\n// util.revHex = function revHex(buf) {\n//   assert(Buffer.isBuffer(buf));\n//   return Buffer.from(buf).reverse().toString('hex');\n// };\nutil.fromRev = function fromRev(str) {\n  assert(typeof str === 'string');\n  assert((str.length & 1) === 0);\n  return Buffer.from(str, 'hex').reverse();\n};","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/utils/util.js"],"names":["util","fromRev","str","assert","length","Buffer","from","reverse"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEAA,IAAI,CAACC,OAAL,GAAe,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AACnCC,EAAAA,MAAM,CAAC,OAAOD,GAAP,KAAe,QAAhB,CAAN;AACAC,EAAAA,MAAM,CAAC,CAACD,GAAG,CAACE,MAAJ,GAAa,CAAd,MAAqB,CAAtB,CAAN;AAEA,SAAOC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiB,KAAjB,EAAwBK,OAAxB,EAAP;AACD,CALD","sourcesContent":["// /*!\n//  * util.js - utils for bcoin\n//  * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n//  * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n//  * https://github.com/bcoin-org/bcoin\n//  */\n\n// 'use strict';\n\n// const assert = require('bsert');\n\n// /**\n//  * @exports utils/util\n//  */\n\n// const util = exports;\n\n// /**\n//  * Return hrtime (shim for browser).\n//  * @param {Array} time\n//  * @returns {Array} [seconds, nanoseconds]\n//  */\n\n// util.bench = function bench(time) {\n//   if (!process.hrtime) {\n//     const now = Date.now();\n\n//     if (time) {\n//       const [hi, lo] = time;\n//       const start = hi * 1000 + lo / 1e6;\n//       return now - start;\n//     }\n\n//     const ms = now % 1000;\n\n//     // Seconds\n//     const hi = (now - ms) / 1000;\n\n//     // Nanoseconds\n//     const lo = ms * 1e6;\n\n//     return [hi, lo];\n//   }\n\n//   if (time) {\n//     const [hi, lo] = process.hrtime(time);\n//     return hi * 1000 + lo / 1e6;\n//   }\n\n//   return process.hrtime();\n// };\n\n// /**\n//  * Get current time in unix time (seconds).\n//  * @returns {Number}\n//  */\n\n// util.now = function now() {\n//   return Math.floor(Date.now() / 1000);\n// };\n\n// /**\n//  * Get current time in unix time (milliseconds).\n//  * @returns {Number}\n//  */\n\n// util.ms = function ms() {\n//   return Date.now();\n// };\n\n// /**\n//  * Create a Date ISO string from time in unix time (seconds).\n//  * @param {Number?} time - Seconds in unix time.\n//  * @returns {String}\n//  */\n\n// util.date = function date(time) {\n//   if (time == null)\n//     time = util.now();\n\n//   return new Date(time * 1000).toISOString().slice(0, -5) + 'Z';\n// };\n\n// /**\n//  * Get unix seconds from a Date string.\n//  * @param {String?} date - Date ISO String.\n//  * @returns {Number}\n//  */\n\n// util.time = function time(date) {\n//   if (date == null)\n//     return util.now();\n\n//   return new Date(date) / 1000 | 0;\n// };\n\n// /**\n//  * Reverse a hex-string.\n//  * @param {Buffer}\n//  * @returns {String} Reversed hex string.\n//  */\n\n// util.revHex = function revHex(buf) {\n//   assert(Buffer.isBuffer(buf));\n\n//   return Buffer.from(buf).reverse().toString('hex');\n// };\n\nutil.fromRev = function fromRev(str) {\n  assert(typeof str === 'string');\n  assert((str.length & 1) === 0);\n\n  return Buffer.from(str, 'hex').reverse();\n};\n"]},"metadata":{},"sourceType":"module"}