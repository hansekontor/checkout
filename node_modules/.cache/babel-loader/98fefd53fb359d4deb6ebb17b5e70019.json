{"ast":null,"code":"/*!\n * base64.js - base64 for javascript\n * Copyright (c) 2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://tools.ietf.org/html/rfc4648\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/*\n * Base64\n */\n\n\nfunction encode(data) {\n  assert(Buffer.isBuffer(data));\n  return data.toString('base64');\n}\n\nfunction decode(str) {\n  assert(typeof str === 'string');\n  if (/[\\-_]/.test(str)) throw new Error('Invalid base64 string.');\n  const data = Buffer.from(str, 'base64');\n  if (str.length !== size64(data.length)) throw new Error('Invalid base64 string.');\n  return data;\n}\n\nfunction test(str) {\n  assert(typeof str === 'string'); // The only way to get an accurate string\n  // size for base64 is by allocating a buffer.\n  // Note that browserify _does_ allocate a\n  // buffer to calculate base64 decoded size.\n  //\n  // https://github.com/nodejs/node/blob/524dd4/lib/buffer.js#L477\n  // https://github.com/nodejs/node/blob/524dd4/src/node_buffer.cc#L250\n  // https://github.com/nodejs/node/blob/524dd4/src/string_bytes.cc#L457\n  // https://github.com/feross/buffer/blob/b651e3a/index.js#L415\n\n  try {\n    decode(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction encodeURL(data) {\n  const raw = encode(data);\n  const str = raw.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  return str;\n}\n\nfunction decodeURL(str) {\n  assert(typeof str === 'string');\n  if (/[=\\+\\/]/.test(str)) throw new Error('Invalid base64-url string.');\n  const raw = pad64(str).replace(/\\-/g, '+').replace(/_/g, '/');\n  return decode(raw);\n}\n\nfunction testURL(str) {\n  assert(typeof str === 'string');\n\n  try {\n    decodeURL(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/*\n * Helpers\n */\n\n\nfunction pad64(str) {\n  switch (str.length & 3) {\n    case 2:\n      str += '==';\n      break;\n\n    case 3:\n      str += '=';\n      break;\n  }\n\n  return str;\n}\n\nfunction size64(size) {\n  const expect = 4 * size / 3 + 3 & ~3;\n  return expect >>> 0;\n}\n/*\n * Expose\n */\n\n\nexports.encode = encode;\nexports.decode = decode;\nexports.test = test;\nexports.encodeURL = encodeURL;\nexports.decodeURL = decodeURL;\nexports.testURL = testURL;","map":null,"metadata":{},"sourceType":"script"}