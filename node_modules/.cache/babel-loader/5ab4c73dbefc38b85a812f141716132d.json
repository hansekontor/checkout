{"ast":null,"code":"import { useRef, useEffect } from 'react';\nexport const usePrevious = value => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n};\nexport default usePrevious;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/hooks/usePrevious.js"],"names":["useRef","useEffect","usePrevious","value","ref","current"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAChC;AACA;AACA,QAAMC,GAAG,GAAGJ,MAAM,EAAlB,CAHgC,CAKhC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CANgC,CAQnB;AAEb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACH,CAZM;AAcP,eAAeH,WAAf","sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport const usePrevious = value => {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n};\n\nexport default usePrevious;\n"]},"metadata":{},"sourceType":"module"}