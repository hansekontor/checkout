{"ast":null,"code":"/*!\n * amount.js - amount object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst fixed = require('../utils/fixed');\n/**\n * Amount\n * Represents a bitcoin amount (satoshis internally).\n * @alias module:btc.Amount\n * @property {Amount} value\n */\n\n\nclass Amount {\n  /**\n   * Create an amount.\n   * @constructor\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   */\n  constructor(value, unit) {\n    this.value = 0;\n    if (value != null) this.fromOptions(value, unit);\n  }\n  /**\n   * Inject properties from options.\n   * @private\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   * @returns {Amount}\n   */\n\n\n  fromOptions(value, unit) {\n    if (typeof unit === 'string') return this.from(unit, value);\n    if (typeof value === 'number') return this.fromValue(value);\n    return this.fromBTC(value);\n  }\n  /**\n   * Get satoshi value.\n   * @returns {Amount}\n   */\n\n\n  toValue() {\n    return this.value;\n  }\n  /**\n   * Get satoshi string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n\n  toSatoshis(num) {\n    if (num) return this.value;\n    return this.value.toString(10);\n  }\n  /**\n   * Get bits string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n\n  toBits(num) {\n    return Amount.encode(this.value, 2, num);\n  }\n  /**\n   * Get mbtc string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n\n  toMBTC(num) {\n    return Amount.encode(this.value, 5, num);\n  }\n  /**\n   * Get btc string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n\n  toBTC(num) {\n    return Amount.encode(this.value, 8, num);\n  }\n  /**\n   * Get unit string or value.\n   * @param {String} unit - Can be `sat`,\n   * `ubtc`, `bits`, `mbtc`, or `btc`.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n\n  to(unit, num) {\n    switch (unit) {\n      case 'sat':\n        return this.toSatoshis(num);\n\n      case 'ubtc':\n      case 'bits':\n        return this.toBits(num);\n\n      case 'mbtc':\n        return this.toMBTC(num);\n\n      case 'btc':\n        return this.toBTC(num);\n    }\n\n    throw new Error(`Unknown unit \"${unit}\".`);\n  }\n  /**\n   * Convert amount to bitcoin string.\n   * @returns {String}\n   */\n\n\n  toString() {\n    return this.toBTC();\n  }\n  /**\n   * Inject properties from value.\n   * @private\n   * @param {Amount} value\n   * @returns {Amount}\n   */\n\n\n  fromValue(value) {\n    assert(Number.isSafeInteger(value) && value >= 0, 'Value must be an int64.');\n    this.value = value;\n    return this;\n  }\n  /**\n   * Inject properties from satoshis.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  fromSatoshis(value) {\n    this.value = Amount.decode(value, 0);\n    return this;\n  }\n  /**\n   * Inject properties from bits.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  fromBits(value) {\n    this.value = Amount.decode(value, 2);\n    return this;\n  }\n  /**\n   * Inject properties from mbtc.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  fromMBTC(value) {\n    this.value = Amount.decode(value, 5);\n    return this;\n  }\n  /**\n   * Inject properties from btc.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  fromBTC(value) {\n    this.value = Amount.decode(value, 8);\n    return this;\n  }\n  /**\n   * Inject properties from unit.\n   * @private\n   * @param {String} unit\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  from(unit, value) {\n    switch (unit) {\n      case 'sat':\n        return this.fromSatoshis(value);\n\n      case 'ubtc':\n      case 'bits':\n        return this.fromBits(value);\n\n      case 'mbtc':\n        return this.fromMBTC(value);\n\n      case 'btc':\n        return this.fromBTC(value);\n    }\n\n    throw new Error(`Unknown unit \"${unit}\".`);\n  }\n  /**\n   * Instantiate amount from options.\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   * @returns {Amount}\n   */\n\n\n  static fromOptions(value, unit) {\n    return new this().fromOptions(value, unit);\n  }\n  /**\n   * Instantiate amount from value.\n   * @private\n   * @param {Amount} value\n   * @returns {Amount}\n   */\n\n\n  static fromValue(value) {\n    return new this().fromValue(value);\n  }\n  /**\n   * Instantiate amount from satoshis.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  static fromSatoshis(value) {\n    return new this().fromSatoshis(value);\n  }\n  /**\n   * Instantiate amount from bits.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  static fromBits(value) {\n    return new this().fromBits(value);\n  }\n  /**\n   * Instantiate amount from mbtc.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  static fromMBTC(value) {\n    return new this().fromMBTC(value);\n  }\n  /**\n   * Instantiate amount from btc.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  static fromBTC(value) {\n    return new this().fromBTC(value);\n  }\n  /**\n   * Instantiate amount from unit.\n   * @param {String} unit\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n\n  static from(unit, value) {\n    return new this().from(unit, value);\n  }\n  /**\n   * Inspect amount.\n   * @returns {String}\n   */\n\n\n  inspect() {\n    return `<Amount: ${this.toString()}>`;\n  }\n  /**\n   * Safely convert satoshis to a BTC string.\n   * This function explicitly avoids any\n   * floating point arithmetic.\n   * @param {Amount} value - Satoshis.\n   * @returns {String} BTC string.\n   */\n\n\n  static btc(value, num) {\n    if (typeof value === 'string') return value;\n    return Amount.encode(value, 8, num);\n  }\n  /**\n   * Safely convert a BTC string to satoshis.\n   * @param {String} str - BTC\n   * @returns {Amount} Satoshis.\n   * @throws on parse error\n   */\n\n\n  static value(str) {\n    if (typeof str === 'number') return str;\n    return Amount.decode(str, 8);\n  }\n  /**\n   * Safely convert satoshis to a BTC string.\n   * @param {Amount} value\n   * @param {Number} exp - Exponent.\n   * @param {Boolean} num - Return a number.\n   * @returns {String|Number}\n   */\n\n\n  static encode(value, exp, num) {\n    if (num) return fixed.toFloat(value, exp);\n    return fixed.encode(value, exp);\n  }\n  /**\n   * Safely convert a BTC string to satoshis.\n   * @param {String|Number} value - BTC\n   * @param {Number} exp - Exponent.\n   * @returns {Amount} Satoshis.\n   * @throws on parse error\n   */\n\n\n  static decode(value, exp) {\n    if (typeof value === 'number') return fixed.fromFloat(value, exp);\n    return fixed.decode(value, exp);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = Amount;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/btc/amount.js"],"names":["assert","require","fixed","Amount","constructor","value","unit","fromOptions","from","fromValue","fromBTC","toValue","toSatoshis","num","toString","toBits","encode","toMBTC","toBTC","to","Error","Number","isSafeInteger","fromSatoshis","decode","fromBits","fromMBTC","inspect","btc","str","exp","toFloat","fromFloat","module","exports"],"mappings":"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","sourcesContent":["/*!\n * amount.js - amount object for bcoin\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst fixed = require('../utils/fixed');\n\n/**\n * Amount\n * Represents a bitcoin amount (satoshis internally).\n * @alias module:btc.Amount\n * @property {Amount} value\n */\n\nclass Amount {\n  /**\n   * Create an amount.\n   * @constructor\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   */\n\n  constructor(value, unit) {\n    this.value = 0;\n\n    if (value != null)\n      this.fromOptions(value, unit);\n  }\n\n  /**\n   * Inject properties from options.\n   * @private\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   * @returns {Amount}\n   */\n\n  fromOptions(value, unit) {\n    if (typeof unit === 'string')\n      return this.from(unit, value);\n\n    if (typeof value === 'number')\n      return this.fromValue(value);\n\n    return this.fromBTC(value);\n  }\n\n  /**\n   * Get satoshi value.\n   * @returns {Amount}\n   */\n\n  toValue() {\n    return this.value;\n  }\n\n  /**\n   * Get satoshi string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n  toSatoshis(num) {\n    if (num)\n      return this.value;\n\n    return this.value.toString(10);\n  }\n\n  /**\n   * Get bits string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n  toBits(num) {\n    return Amount.encode(this.value, 2, num);\n  }\n\n  /**\n   * Get mbtc string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n  toMBTC(num) {\n    return Amount.encode(this.value, 5, num);\n  }\n\n  /**\n   * Get btc string or value.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n  toBTC(num) {\n    return Amount.encode(this.value, 8, num);\n  }\n\n  /**\n   * Get unit string or value.\n   * @param {String} unit - Can be `sat`,\n   * `ubtc`, `bits`, `mbtc`, or `btc`.\n   * @param {Boolean?} num\n   * @returns {String|Amount}\n   */\n\n  to(unit, num) {\n    switch (unit) {\n      case 'sat':\n        return this.toSatoshis(num);\n      case 'ubtc':\n      case 'bits':\n        return this.toBits(num);\n      case 'mbtc':\n        return this.toMBTC(num);\n      case 'btc':\n        return this.toBTC(num);\n    }\n    throw new Error(`Unknown unit \"${unit}\".`);\n  }\n\n  /**\n   * Convert amount to bitcoin string.\n   * @returns {String}\n   */\n\n  toString() {\n    return this.toBTC();\n  }\n\n  /**\n   * Inject properties from value.\n   * @private\n   * @param {Amount} value\n   * @returns {Amount}\n   */\n\n  fromValue(value) {\n    assert(Number.isSafeInteger(value) && value >= 0,\n      'Value must be an int64.');\n    this.value = value;\n    return this;\n  }\n\n  /**\n   * Inject properties from satoshis.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  fromSatoshis(value) {\n    this.value = Amount.decode(value, 0);\n    return this;\n  }\n\n  /**\n   * Inject properties from bits.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  fromBits(value) {\n    this.value = Amount.decode(value, 2);\n    return this;\n  }\n\n  /**\n   * Inject properties from mbtc.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  fromMBTC(value) {\n    this.value = Amount.decode(value, 5);\n    return this;\n  }\n\n  /**\n   * Inject properties from btc.\n   * @private\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  fromBTC(value) {\n    this.value = Amount.decode(value, 8);\n    return this;\n  }\n\n  /**\n   * Inject properties from unit.\n   * @private\n   * @param {String} unit\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  from(unit, value) {\n    switch (unit) {\n      case 'sat':\n        return this.fromSatoshis(value);\n      case 'ubtc':\n      case 'bits':\n        return this.fromBits(value);\n      case 'mbtc':\n        return this.fromMBTC(value);\n      case 'btc':\n        return this.fromBTC(value);\n    }\n    throw new Error(`Unknown unit \"${unit}\".`);\n  }\n\n  /**\n   * Instantiate amount from options.\n   * @param {(String|Number)?} value\n   * @param {String?} unit\n   * @returns {Amount}\n   */\n\n  static fromOptions(value, unit) {\n    return new this().fromOptions(value, unit);\n  }\n\n  /**\n   * Instantiate amount from value.\n   * @private\n   * @param {Amount} value\n   * @returns {Amount}\n   */\n\n  static fromValue(value) {\n    return new this().fromValue(value);\n  }\n\n  /**\n   * Instantiate amount from satoshis.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  static fromSatoshis(value) {\n    return new this().fromSatoshis(value);\n  }\n\n  /**\n   * Instantiate amount from bits.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  static fromBits(value) {\n    return new this().fromBits(value);\n  }\n\n  /**\n   * Instantiate amount from mbtc.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  static fromMBTC(value) {\n    return new this().fromMBTC(value);\n  }\n\n  /**\n   * Instantiate amount from btc.\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  static fromBTC(value) {\n    return new this().fromBTC(value);\n  }\n\n  /**\n   * Instantiate amount from unit.\n   * @param {String} unit\n   * @param {Number|String} value\n   * @returns {Amount}\n   */\n\n  static from(unit, value) {\n    return new this().from(unit, value);\n  }\n\n  /**\n   * Inspect amount.\n   * @returns {String}\n   */\n\n  inspect() {\n    return `<Amount: ${this.toString()}>`;\n  }\n\n  /**\n   * Safely convert satoshis to a BTC string.\n   * This function explicitly avoids any\n   * floating point arithmetic.\n   * @param {Amount} value - Satoshis.\n   * @returns {String} BTC string.\n   */\n\n  static btc(value, num) {\n    if (typeof value === 'string')\n      return value;\n\n    return Amount.encode(value, 8, num);\n  }\n\n  /**\n   * Safely convert a BTC string to satoshis.\n   * @param {String} str - BTC\n   * @returns {Amount} Satoshis.\n   * @throws on parse error\n   */\n\n  static value(str) {\n    if (typeof str === 'number')\n      return str;\n\n    return Amount.decode(str, 8);\n  }\n\n  /**\n   * Safely convert satoshis to a BTC string.\n   * @param {Amount} value\n   * @param {Number} exp - Exponent.\n   * @param {Boolean} num - Return a number.\n   * @returns {String|Number}\n   */\n\n  static encode(value, exp, num) {\n    if (num)\n      return fixed.toFloat(value, exp);\n    return fixed.encode(value, exp);\n  }\n\n  /**\n   * Safely convert a BTC string to satoshis.\n   * @param {String|Number} value - BTC\n   * @param {Number} exp - Exponent.\n   * @returns {Amount} Satoshis.\n   * @throws on parse error\n   */\n\n  static decode(value, exp) {\n    if (typeof value === 'number')\n      return fixed.fromFloat(value, exp);\n    return fixed.decode(value, exp);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = Amount;\n"]},"metadata":{},"sourceType":"module"}