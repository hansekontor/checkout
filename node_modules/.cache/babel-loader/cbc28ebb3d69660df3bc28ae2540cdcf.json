{"ast":null,"code":"/*!\n * murmur3.js - murmur3 hash for bcrypto\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/MurmurHash\n *   https://github.com/aappleby/smhasher\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/**\n * Murmur3 hash.\n * @param {Buffer} data\n * @param {Number} seed\n * @returns {Number}\n */\n\n\nfunction sum(data, seed) {\n  assert(Buffer.isBuffer(data));\n  assert(typeof seed === 'number');\n  const tail = data.length - data.length % 4;\n  const c1 = 0xcc9e2d51;\n  const c2 = 0x1b873593;\n  let h1 = seed | 0;\n\n  for (let i = 0; i < tail; i += 4) {\n    let k1 = readU32(data, i);\n    k1 = mul32(k1, c1);\n    k1 = rotl32(k1, 15);\n    k1 = mul32(k1, c2);\n    h1 ^= k1;\n    h1 = rotl32(h1, 13);\n    h1 = mul32(h1, 5) + 0xe6546b64 | 0;\n  }\n\n  let k1 = 0;\n\n  switch (data.length & 3) {\n    case 3:\n      k1 ^= data[tail + 2] << 16;\n\n    case 2:\n      k1 ^= data[tail + 1] << 8;\n\n    case 1:\n      k1 ^= data[tail + 0];\n      k1 = mul32(k1, c1);\n      k1 = rotl32(k1, 15);\n      k1 = mul32(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= data.length;\n  h1 ^= h1 >>> 16;\n  h1 = mul32(h1, 0x85ebca6b);\n  h1 ^= h1 >>> 13;\n  h1 = mul32(h1, 0xc2b2ae35);\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n}\n/**\n * Murmur3 hash.\n * @param {Buffer} data\n * @param {Number} n\n * @param {Number} tweak\n * @returns {Number}\n */\n\n\nfunction tweak(data, n, tweak) {\n  assert(typeof n === 'number');\n  assert(typeof tweak === 'number');\n  const seed = mul32(n, 0xfba4c795) + (tweak | 0);\n  return sum(data, seed);\n}\n/*\n * Helpers\n */\n\n\nfunction mul32(a, b) {\n  const alo = a & 0xffff;\n  const blo = b & 0xffff;\n  const ahi = a >>> 16;\n  const bhi = b >>> 16;\n  const lo = alo * blo;\n  const hi = ahi * blo + bhi * alo + (lo >>> 16);\n  return hi << 16 | lo & 0xffff;\n}\n\nfunction rotl32(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nfunction readU32(data, off) {\n  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;\n}\n/**\n * Expose\n */\n\n\nexports.native = 0;\nexports.sum = sum;\nexports.tweak = tweak;","map":null,"metadata":{},"sourceType":"script"}