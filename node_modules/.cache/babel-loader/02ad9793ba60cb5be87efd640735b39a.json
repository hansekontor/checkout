{"ast":null,"code":"/*!\n * stack.js - stack object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n'use strict';\n\nconst assert = require('bsert');\n\nconst common = require('./common');\n\nconst ScriptNum = require('./scriptnum');\n/**\n * Stack\n * Represents the stack of a Script during execution.\n * @alias module:script.Stack\n * @property {Buffer[]} items - Stack items.\n * @property {Number} length - Size of stack.\n */\n\n\nclass Stack {\n  /**\n   * Create a stack.\n   * @constructor\n   * @param {Buffer[]?} items - Stack items.\n   */\n  constructor(items) {\n    this.items = items || [];\n  }\n  /**\n   * Get length.\n   * @returns {Number}\n   */\n\n\n  get length() {\n    return this.items.length;\n  }\n  /**\n   * Set length.\n   * @param {Number} value\n   */\n\n\n  set length(value) {\n    this.items.length = value;\n  }\n  /**\n   * Instantiate a value-only iterator.\n   * @returns {StackIterator}\n   */\n\n\n  [Symbol.iterator]() {\n    return this.items[Symbol.iterator]();\n  }\n  /**\n   * Instantiate a value-only iterator.\n   * @returns {StackIterator}\n   */\n\n\n  values() {\n    return this.items.values();\n  }\n  /**\n   * Instantiate a key and value iterator.\n   * @returns {StackIterator}\n   */\n\n\n  entries() {\n    return this.items.entries();\n  }\n  /**\n   * Inspect the stack.\n   * @returns {String} Human-readable stack.\n   */\n\n\n  inspect() {\n    return `<Stack: ${this.toString()}>`;\n  }\n  /**\n   * Convert the stack to a string.\n   * @returns {String} Human-readable stack.\n   */\n\n\n  toString() {\n    const out = [];\n\n    for (const item of this.items) out.push(item.toString('hex'));\n\n    return out.join(' ');\n  }\n  /**\n   * Format the stack as bitcoind asm.\n   * @param {Boolean?} decode - Attempt to decode hash types.\n   * @returns {String} Human-readable script.\n   */\n\n\n  toASM(decode) {\n    const out = [];\n\n    for (const item of this.items) out.push(common.toASM(item, decode));\n\n    return out.join(' ');\n  }\n  /**\n   * Clone the stack.\n   * @returns {Stack} Cloned stack.\n   */\n\n\n  clone() {\n    return new this.constructor(this.items.slice());\n  }\n  /**\n   * Clear the stack.\n   * @returns {Stack}\n   */\n\n\n  clear() {\n    this.items.length = 0;\n    return this;\n  }\n  /**\n   * Get a stack item by index.\n   * @param {Number} index\n   * @returns {Buffer|null}\n   */\n\n\n  get(index) {\n    if (index < 0) index += this.items.length;\n    if (index < 0 || index >= this.items.length) return null;\n    return this.items[index];\n  }\n  /**\n   * Pop a stack item.\n   * @see Array#pop\n   * @returns {Buffer|null}\n   */\n\n\n  pop() {\n    const item = this.items.pop();\n    return item || null;\n  }\n  /**\n   * Shift a stack item.\n   * @see Array#shift\n   * @returns {Buffer|null}\n   */\n\n\n  shift() {\n    const item = this.items.shift();\n    return item || null;\n  }\n  /**\n   * Remove an item.\n   * @param {Number} index\n   * @returns {Buffer}\n   */\n\n\n  remove(index) {\n    if (index < 0) index += this.items.length;\n    if (index < 0 || index >= this.items.length) return null;\n    const items = this.items.splice(index, 1);\n    if (items.length === 0) return null;\n    return items[0];\n  }\n  /**\n   * Set stack item at index.\n   * @param {Number} index\n   * @param {Buffer} value\n   * @returns {Buffer}\n   */\n\n\n  set(index, item) {\n    if (index < 0) index += this.items.length;\n    assert(Buffer.isBuffer(item));\n    assert(index >= 0 && index <= this.items.length);\n    this.items[index] = item;\n    return this;\n  }\n  /**\n   * Push item onto stack.\n   * @see Array#push\n   * @param {Buffer} item\n   * @returns {Number} Stack size.\n   */\n\n\n  push(item) {\n    assert(Buffer.isBuffer(item));\n    this.items.push(item);\n    return this;\n  }\n  /**\n   * Unshift item from stack.\n   * @see Array#unshift\n   * @param {Buffer} item\n   * @returns {Number}\n   */\n\n\n  unshift(item) {\n    assert(Buffer.isBuffer(item));\n    this.items.unshift(item);\n    return this;\n  }\n  /**\n   * Insert an item.\n   * @param {Number} index\n   * @param {Buffer} item\n   * @returns {Buffer}\n   */\n\n\n  insert(index, item) {\n    if (index < 0) index += this.items.length;\n    assert(Buffer.isBuffer(item));\n    assert(index >= 0 && index <= this.items.length);\n    this.items.splice(index, 0, item);\n    return this;\n  }\n  /**\n   * Erase stack items.\n   * @param {Number} start\n   * @param {Number} end\n   * @returns {Buffer[]}\n   */\n\n\n  erase(start, end) {\n    if (start < 0) start = this.items.length + start;\n    if (end < 0) end = this.items.length + end;\n    this.items.splice(start, end - start);\n  }\n  /**\n   * Swap stack values.\n   * @param {Number} i1 - Index 1.\n   * @param {Number} i2 - Index 2.\n   */\n\n\n  swap(i1, i2) {\n    if (i1 < 0) i1 = this.items.length + i1;\n    if (i2 < 0) i2 = this.items.length + i2;\n    const v1 = this.items[i1];\n    const v2 = this.items[i2];\n    this.items[i1] = v2;\n    this.items[i2] = v1;\n  }\n  /*\n   * Data\n   */\n\n\n  getData(index) {\n    return this.get(index);\n  }\n\n  popData() {\n    return this.pop();\n  }\n\n  shiftData() {\n    return this.shift();\n  }\n\n  removeData(index) {\n    return this.remove(index);\n  }\n\n  setData(index, data) {\n    return this.set(index, data);\n  }\n\n  pushData(data) {\n    return this.push(data);\n  }\n\n  unshiftData(data) {\n    return this.unshift(data);\n  }\n\n  insertData(index, data) {\n    return this.insert(index, data);\n  }\n  /*\n   * Length\n   */\n\n\n  getLength(index) {\n    const item = this.get(index);\n    return item ? item.length : -1;\n  }\n  /*\n   * String\n   */\n\n\n  getString(index, enc) {\n    const item = this.get(index);\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  popString(enc) {\n    const item = this.pop();\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  shiftString(enc) {\n    const item = this.shift();\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  removeString(index, enc) {\n    const item = this.remove(index);\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  setString(index, str, enc) {\n    return this.set(index, Stack.fromString(str, enc));\n  }\n\n  pushString(str, enc) {\n    return this.push(Stack.fromString(str, enc));\n  }\n\n  unshiftString(str, enc) {\n    return this.unshift(Stack.fromString(str, enc));\n  }\n\n  insertString(index, str, enc) {\n    return this.insert(index, Stack.fromString(str, enc));\n  }\n  /*\n   * Num\n   */\n\n\n  getNum(index, minimal, limit) {\n    const item = this.get(index);\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  popNum(minimal, limit) {\n    const item = this.pop();\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  shiftNum(minimal, limit) {\n    const item = this.shift();\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  removeNum(index, minimal, limit) {\n    const item = this.remove(index);\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  setNum(index, num) {\n    return this.set(index, Stack.fromNum(num));\n  }\n\n  pushNum(num) {\n    return this.push(Stack.fromNum(num));\n  }\n\n  unshiftNum(num) {\n    return this.unshift(Stack.fromNum(num));\n  }\n\n  insertNum(index, num) {\n    return this.insert(index, Stack.fromNum(num));\n  }\n  /*\n   * Int\n   */\n\n\n  getInt(index, minimal, limit) {\n    const item = this.get(index);\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  popInt(minimal, limit) {\n    const item = this.pop();\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  shiftInt(minimal, limit) {\n    const item = this.shift();\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  removeInt(index, minimal, limit) {\n    const item = this.remove(index);\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  setInt(index, num) {\n    return this.set(index, Stack.fromInt(num));\n  }\n\n  pushInt(num) {\n    return this.push(Stack.fromInt(num));\n  }\n\n  unshiftInt(num) {\n    return this.unshift(Stack.fromInt(num));\n  }\n\n  insertInt(index, num) {\n    return this.insert(index, Stack.fromInt(num));\n  }\n  /*\n   * Bool\n   */\n\n\n  getBool(index) {\n    const item = this.get(index);\n    return item ? Stack.toBool(item) : false;\n  }\n\n  popBool() {\n    const item = this.pop();\n    return item ? Stack.toBool(item) : false;\n  }\n\n  shiftBool() {\n    const item = this.shift();\n    return item ? Stack.toBool(item) : false;\n  }\n\n  removeBool(index) {\n    const item = this.remove(index);\n    return item ? Stack.toBool(item) : false;\n  }\n\n  setBool(index, value) {\n    return this.set(index, Stack.fromBool(value));\n  }\n\n  pushBool(value) {\n    return this.push(Stack.fromBool(value));\n  }\n\n  unshiftBool(value) {\n    return this.unshift(Stack.fromBool(value));\n  }\n\n  insertBool(index, value) {\n    return this.insert(index, Stack.fromBool(value));\n  }\n  /**\n   * Test an object to see if it is a Stack.\n   * @param {Object} obj\n   * @returns {Boolean}\n   */\n\n\n  static isStack(obj) {\n    return obj instanceof Stack;\n  }\n  /*\n   * Encoding\n   */\n\n\n  static toString(item, enc) {\n    assert(Buffer.isBuffer(item));\n    return item.toString(enc || 'utf8');\n  }\n\n  static fromString(str, enc) {\n    assert(typeof str === 'string');\n    return Buffer.from(str, enc || 'utf8');\n  }\n\n  static toNum(item, minimal, limit) {\n    return ScriptNum.decode(item, minimal, limit);\n  }\n\n  static fromNum(num) {\n    assert(ScriptNum.isScriptNum(num));\n    return num.encode();\n  }\n\n  static toInt(item, minimal, limit) {\n    const num = Stack.toNum(item, minimal, limit);\n    return num.getInt();\n  }\n\n  static fromInt(int) {\n    assert(typeof int === 'number');\n    if (int >= -1 && int <= 16) return common.small[int + 1];\n    const num = ScriptNum.fromNumber(int);\n    return Stack.fromNum(num);\n  }\n\n  static toBool(item) {\n    assert(Buffer.isBuffer(item));\n\n    for (let i = 0; i < item.length; i++) {\n      if (item[i] !== 0) {\n        // Cannot be negative zero\n        if (i === item.length - 1 && item[i] === 0x80) return false;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static fromBool(value) {\n    assert(typeof value === 'boolean');\n    return Stack.fromInt(value ? 1 : 0);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = Stack;","map":{"version":3,"sources":["/home/henrik/Documents/dev/checkoutmin/src/utils/bcash/script/stack.js"],"names":["assert","require","common","ScriptNum","Stack","constructor","items","length","value","Symbol","iterator","values","entries","inspect","toString","out","item","push","join","toASM","decode","clone","slice","clear","get","index","pop","shift","remove","splice","set","Buffer","isBuffer","unshift","insert","erase","start","end","swap","i1","i2","v1","v2","getData","popData","shiftData","removeData","setData","data","pushData","unshiftData","insertData","getLength","getString","enc","popString","shiftString","removeString","setString","str","fromString","pushString","unshiftString","insertString","getNum","minimal","limit","toNum","popNum","shiftNum","removeNum","setNum","num","fromNum","pushNum","unshiftNum","insertNum","getInt","toInt","popInt","shiftInt","removeInt","setInt","fromInt","pushInt","unshiftInt","insertInt","getBool","toBool","popBool","shiftBool","removeBool","setBool","fromBool","pushBool","unshiftBool","insertBool","isStack","obj","from","isScriptNum","encode","int","small","fromNumber","i","module","exports"],"mappings":"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","sourcesContent":["/*!\n * stack.js - stack object for bcoin\n * Copyright (c) 2014-2015, Fedor Indutny (MIT License)\n * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcoin\n */\n\n'use strict';\n\nconst assert = require('bsert');\nconst common = require('./common');\nconst ScriptNum = require('./scriptnum');\n\n/**\n * Stack\n * Represents the stack of a Script during execution.\n * @alias module:script.Stack\n * @property {Buffer[]} items - Stack items.\n * @property {Number} length - Size of stack.\n */\n\nclass Stack {\n  /**\n   * Create a stack.\n   * @constructor\n   * @param {Buffer[]?} items - Stack items.\n   */\n\n  constructor(items) {\n    this.items = items || [];\n  }\n\n  /**\n   * Get length.\n   * @returns {Number}\n   */\n\n  get length() {\n    return this.items.length;\n  }\n\n  /**\n   * Set length.\n   * @param {Number} value\n   */\n\n  set length(value) {\n    this.items.length = value;\n  }\n\n  /**\n   * Instantiate a value-only iterator.\n   * @returns {StackIterator}\n   */\n\n  [Symbol.iterator]() {\n    return this.items[Symbol.iterator]();\n  }\n\n  /**\n   * Instantiate a value-only iterator.\n   * @returns {StackIterator}\n   */\n\n  values() {\n    return this.items.values();\n  }\n\n  /**\n   * Instantiate a key and value iterator.\n   * @returns {StackIterator}\n   */\n\n  entries() {\n    return this.items.entries();\n  }\n\n  /**\n   * Inspect the stack.\n   * @returns {String} Human-readable stack.\n   */\n\n  inspect() {\n    return `<Stack: ${this.toString()}>`;\n  }\n\n  /**\n   * Convert the stack to a string.\n   * @returns {String} Human-readable stack.\n   */\n\n  toString() {\n    const out = [];\n\n    for (const item of this.items)\n      out.push(item.toString('hex'));\n\n    return out.join(' ');\n  }\n\n  /**\n   * Format the stack as bitcoind asm.\n   * @param {Boolean?} decode - Attempt to decode hash types.\n   * @returns {String} Human-readable script.\n   */\n\n  toASM(decode) {\n    const out = [];\n\n    for (const item of this.items)\n      out.push(common.toASM(item, decode));\n\n    return out.join(' ');\n  }\n\n  /**\n   * Clone the stack.\n   * @returns {Stack} Cloned stack.\n   */\n\n  clone() {\n    return new this.constructor(this.items.slice());\n  }\n\n  /**\n   * Clear the stack.\n   * @returns {Stack}\n   */\n\n  clear() {\n    this.items.length = 0;\n    return this;\n  }\n\n  /**\n   * Get a stack item by index.\n   * @param {Number} index\n   * @returns {Buffer|null}\n   */\n\n  get(index) {\n    if (index < 0)\n      index += this.items.length;\n\n    if (index < 0 || index >= this.items.length)\n      return null;\n\n    return this.items[index];\n  }\n\n  /**\n   * Pop a stack item.\n   * @see Array#pop\n   * @returns {Buffer|null}\n   */\n\n  pop() {\n    const item = this.items.pop();\n    return item || null;\n  }\n\n  /**\n   * Shift a stack item.\n   * @see Array#shift\n   * @returns {Buffer|null}\n   */\n\n  shift() {\n    const item = this.items.shift();\n    return item || null;\n  }\n\n  /**\n   * Remove an item.\n   * @param {Number} index\n   * @returns {Buffer}\n   */\n\n  remove(index) {\n    if (index < 0)\n      index += this.items.length;\n\n    if (index < 0 || index >= this.items.length)\n      return null;\n\n    const items = this.items.splice(index, 1);\n\n    if (items.length === 0)\n      return null;\n\n    return items[0];\n  }\n\n  /**\n   * Set stack item at index.\n   * @param {Number} index\n   * @param {Buffer} value\n   * @returns {Buffer}\n   */\n\n  set(index, item) {\n    if (index < 0)\n      index += this.items.length;\n\n    assert(Buffer.isBuffer(item));\n    assert(index >= 0 && index <= this.items.length);\n\n    this.items[index] = item;\n\n    return this;\n  }\n\n  /**\n   * Push item onto stack.\n   * @see Array#push\n   * @param {Buffer} item\n   * @returns {Number} Stack size.\n   */\n\n  push(item) {\n    assert(Buffer.isBuffer(item));\n    this.items.push(item);\n    return this;\n  }\n\n  /**\n   * Unshift item from stack.\n   * @see Array#unshift\n   * @param {Buffer} item\n   * @returns {Number}\n   */\n\n  unshift(item) {\n    assert(Buffer.isBuffer(item));\n    this.items.unshift(item);\n    return this;\n  }\n\n  /**\n   * Insert an item.\n   * @param {Number} index\n   * @param {Buffer} item\n   * @returns {Buffer}\n   */\n\n  insert(index, item) {\n    if (index < 0)\n      index += this.items.length;\n\n    assert(Buffer.isBuffer(item));\n    assert(index >= 0 && index <= this.items.length);\n\n    this.items.splice(index, 0, item);\n\n    return this;\n  }\n\n  /**\n   * Erase stack items.\n   * @param {Number} start\n   * @param {Number} end\n   * @returns {Buffer[]}\n   */\n\n  erase(start, end) {\n    if (start < 0)\n      start = this.items.length + start;\n\n    if (end < 0)\n      end = this.items.length + end;\n\n    this.items.splice(start, end - start);\n  }\n\n  /**\n   * Swap stack values.\n   * @param {Number} i1 - Index 1.\n   * @param {Number} i2 - Index 2.\n   */\n\n  swap(i1, i2) {\n    if (i1 < 0)\n      i1 = this.items.length + i1;\n\n    if (i2 < 0)\n      i2 = this.items.length + i2;\n\n    const v1 = this.items[i1];\n    const v2 = this.items[i2];\n\n    this.items[i1] = v2;\n    this.items[i2] = v1;\n  }\n\n  /*\n   * Data\n   */\n\n  getData(index) {\n    return this.get(index);\n  }\n\n  popData() {\n    return this.pop();\n  }\n\n  shiftData() {\n    return this.shift();\n  }\n\n  removeData(index) {\n    return this.remove(index);\n  }\n\n  setData(index, data) {\n    return this.set(index, data);\n  }\n\n  pushData(data) {\n    return this.push(data);\n  }\n\n  unshiftData(data) {\n    return this.unshift(data);\n  }\n\n  insertData(index, data) {\n    return this.insert(index, data);\n  }\n\n  /*\n   * Length\n   */\n\n  getLength(index) {\n    const item = this.get(index);\n    return item ? item.length : -1;\n  }\n\n  /*\n   * String\n   */\n\n  getString(index, enc) {\n    const item = this.get(index);\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  popString(enc) {\n    const item = this.pop();\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  shiftString(enc) {\n    const item = this.shift();\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  removeString(index, enc) {\n    const item = this.remove(index);\n    return item ? Stack.toString(item, enc) : null;\n  }\n\n  setString(index, str, enc) {\n    return this.set(index, Stack.fromString(str, enc));\n  }\n\n  pushString(str, enc) {\n    return this.push(Stack.fromString(str, enc));\n  }\n\n  unshiftString(str, enc) {\n    return this.unshift(Stack.fromString(str, enc));\n  }\n\n  insertString(index, str, enc) {\n    return this.insert(index, Stack.fromString(str, enc));\n  }\n\n  /*\n   * Num\n   */\n\n  getNum(index, minimal, limit) {\n    const item = this.get(index);\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  popNum(minimal, limit) {\n    const item = this.pop();\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  shiftNum(minimal, limit) {\n    const item = this.shift();\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  removeNum(index, minimal, limit) {\n    const item = this.remove(index);\n    return item ? Stack.toNum(item, minimal, limit) : null;\n  }\n\n  setNum(index, num) {\n    return this.set(index, Stack.fromNum(num));\n  }\n\n  pushNum(num) {\n    return this.push(Stack.fromNum(num));\n  }\n\n  unshiftNum(num) {\n    return this.unshift(Stack.fromNum(num));\n  }\n\n  insertNum(index, num) {\n    return this.insert(index, Stack.fromNum(num));\n  }\n\n  /*\n   * Int\n   */\n\n  getInt(index, minimal, limit) {\n    const item = this.get(index);\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  popInt(minimal, limit) {\n    const item = this.pop();\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  shiftInt(minimal, limit) {\n    const item = this.shift();\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  removeInt(index, minimal, limit) {\n    const item = this.remove(index);\n    return item ? Stack.toInt(item, minimal, limit) : -1;\n  }\n\n  setInt(index, num) {\n    return this.set(index, Stack.fromInt(num));\n  }\n\n  pushInt(num) {\n    return this.push(Stack.fromInt(num));\n  }\n\n  unshiftInt(num) {\n    return this.unshift(Stack.fromInt(num));\n  }\n\n  insertInt(index, num) {\n    return this.insert(index, Stack.fromInt(num));\n  }\n\n  /*\n   * Bool\n   */\n\n  getBool(index) {\n    const item = this.get(index);\n    return item ? Stack.toBool(item) : false;\n  }\n\n  popBool() {\n    const item = this.pop();\n    return item ? Stack.toBool(item) : false;\n  }\n\n  shiftBool() {\n    const item = this.shift();\n    return item ? Stack.toBool(item) : false;\n  }\n\n  removeBool(index) {\n    const item = this.remove(index);\n    return item ? Stack.toBool(item) : false;\n  }\n\n  setBool(index, value) {\n    return this.set(index, Stack.fromBool(value));\n  }\n\n  pushBool(value) {\n    return this.push(Stack.fromBool(value));\n  }\n\n  unshiftBool(value) {\n    return this.unshift(Stack.fromBool(value));\n  }\n\n  insertBool(index, value) {\n    return this.insert(index, Stack.fromBool(value));\n  }\n\n  /**\n   * Test an object to see if it is a Stack.\n   * @param {Object} obj\n   * @returns {Boolean}\n   */\n\n  static isStack(obj) {\n    return obj instanceof Stack;\n  }\n\n  /*\n   * Encoding\n   */\n\n  static toString(item, enc) {\n    assert(Buffer.isBuffer(item));\n    return item.toString(enc || 'utf8');\n  }\n\n  static fromString(str, enc) {\n    assert(typeof str === 'string');\n    return Buffer.from(str, enc || 'utf8');\n  }\n\n  static toNum(item, minimal, limit) {\n    return ScriptNum.decode(item, minimal, limit);\n  }\n\n  static fromNum(num) {\n    assert(ScriptNum.isScriptNum(num));\n    return num.encode();\n  }\n\n  static toInt(item, minimal, limit) {\n    const num = Stack.toNum(item, minimal, limit);\n    return num.getInt();\n  }\n\n  static fromInt(int) {\n    assert(typeof int === 'number');\n\n    if (int >= -1 && int <= 16)\n      return common.small[int + 1];\n\n    const num = ScriptNum.fromNumber(int);\n\n    return Stack.fromNum(num);\n  }\n\n  static toBool(item) {\n    assert(Buffer.isBuffer(item));\n\n    for (let i = 0; i < item.length; i++) {\n      if (item[i] !== 0) {\n        // Cannot be negative zero\n        if (i === item.length - 1 && item[i] === 0x80)\n          return false;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static fromBool(value) {\n    assert(typeof value === 'boolean');\n    return Stack.fromInt(value ? 1 : 0);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = Stack;\n"]},"metadata":{},"sourceType":"module"}