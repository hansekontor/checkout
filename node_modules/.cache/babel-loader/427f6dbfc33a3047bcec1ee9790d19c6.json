{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\nvar FormatException_1 = require(\"../FormatException\");\n/*import java.util.HashMap;*/\n\n/*import java.util.Map;*/\n\n\nvar CharacterSetValueIdentifiers;\n\n(function (CharacterSetValueIdentifiers) {\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp437\"] = 0] = \"Cp437\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_1\"] = 1] = \"ISO8859_1\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_2\"] = 2] = \"ISO8859_2\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_3\"] = 3] = \"ISO8859_3\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_4\"] = 4] = \"ISO8859_4\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_5\"] = 5] = \"ISO8859_5\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_6\"] = 6] = \"ISO8859_6\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_7\"] = 7] = \"ISO8859_7\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_8\"] = 8] = \"ISO8859_8\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_9\"] = 9] = \"ISO8859_9\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_10\"] = 10] = \"ISO8859_10\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_11\"] = 11] = \"ISO8859_11\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_13\"] = 12] = \"ISO8859_13\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_14\"] = 13] = \"ISO8859_14\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_15\"] = 14] = \"ISO8859_15\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ISO8859_16\"] = 15] = \"ISO8859_16\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"SJIS\"] = 16] = \"SJIS\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1250\"] = 17] = \"Cp1250\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1251\"] = 18] = \"Cp1251\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1252\"] = 19] = \"Cp1252\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Cp1256\"] = 20] = \"Cp1256\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"UnicodeBigUnmarked\"] = 21] = \"UnicodeBigUnmarked\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"UTF8\"] = 22] = \"UTF8\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"ASCII\"] = 23] = \"ASCII\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"Big5\"] = 24] = \"Big5\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"GB18030\"] = 25] = \"GB18030\";\n  CharacterSetValueIdentifiers[CharacterSetValueIdentifiers[\"EUC_KR\"] = 26] = \"EUC_KR\";\n})(CharacterSetValueIdentifiers = exports.CharacterSetValueIdentifiers || (exports.CharacterSetValueIdentifiers = {}));\n/**\r\n * Encapsulates a Character Set ECI, according to \"Extended Channel Interpretations\" 5.3.1.1\r\n * of ISO 18004.\r\n *\r\n * @author Sean Owen\r\n */\n\n\nvar CharacterSetECI =\n/** @class */\nfunction () {\n  function CharacterSetECI(valueIdentifier, valuesParam, name) {\n    var otherEncodingNames = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      otherEncodingNames[_i - 3] = arguments[_i];\n    }\n\n    this.valueIdentifier = valueIdentifier;\n    this.name = name;\n\n    if (typeof valuesParam === 'number') {\n      this.values = Int32Array.from([valuesParam]);\n    } else {\n      this.values = valuesParam;\n    }\n\n    this.otherEncodingNames = otherEncodingNames;\n    CharacterSetECI.VALUE_IDENTIFIER_TO_ECI.set(valueIdentifier, this);\n    CharacterSetECI.NAME_TO_ECI.set(name, this);\n    var values = this.values;\n\n    for (var i = 0, length_1 = values.length; i !== length_1; i++) {\n      var v = values[i];\n      CharacterSetECI.VALUES_TO_ECI.set(v, this);\n    }\n\n    for (var _a = 0, otherEncodingNames_1 = otherEncodingNames; _a < otherEncodingNames_1.length; _a++) {\n      var otherName = otherEncodingNames_1[_a];\n      CharacterSetECI.NAME_TO_ECI.set(otherName, this);\n    }\n  } // CharacterSetECI(value: number /*int*/) {\n  //   this(new Int32Array {value})\n  // }\n  // CharacterSetECI(value: number /*int*/, String... otherEncodingNames) {\n  //   this.values = new Int32Array {value}\n  //   this.otherEncodingNames = otherEncodingNames\n  // }\n  // CharacterSetECI(values: Int32Array, String... otherEncodingNames) {\n  //   this.values = values\n  //   this.otherEncodingNames = otherEncodingNames\n  // }\n\n\n  CharacterSetECI.prototype.getValueIdentifier = function () {\n    return this.valueIdentifier;\n  };\n\n  CharacterSetECI.prototype.getName = function () {\n    return this.name;\n  };\n\n  CharacterSetECI.prototype.getValue = function () {\n    return this.values[0];\n  };\n  /**\r\n   * @param value character set ECI value\r\n   * @return {@code CharacterSetECI} representing ECI of given value, or null if it is legal but\r\n   *   unsupported\r\n   * @throws FormatException if ECI value is invalid\r\n   */\n\n\n  CharacterSetECI.getCharacterSetECIByValue = function (value\n  /*int*/\n  ) {\n    if (value < 0 || value >= 900) {\n      throw new FormatException_1.default('incorect value');\n    }\n\n    var characterSet = CharacterSetECI.VALUES_TO_ECI.get(value);\n\n    if (undefined === characterSet) {\n      throw new FormatException_1.default('incorect value');\n    }\n\n    return characterSet;\n  };\n  /**\r\n   * @param name character set ECI encoding name\r\n   * @return CharacterSetECI representing ECI for character encoding, or null if it is legal\r\n   *   but unsupported\r\n   */\n\n\n  CharacterSetECI.getCharacterSetECIByName = function (name) {\n    var characterSet = CharacterSetECI.NAME_TO_ECI.get(name);\n\n    if (undefined === characterSet) {\n      throw new FormatException_1.default('incorect value');\n    }\n\n    return characterSet;\n  };\n\n  CharacterSetECI.prototype.equals = function (o) {\n    if (!(o instanceof CharacterSetECI)) {\n      return false;\n    }\n\n    var other = o;\n    return this.getName() === other.getName();\n  };\n\n  CharacterSetECI.VALUE_IDENTIFIER_TO_ECI = new Map();\n  CharacterSetECI.VALUES_TO_ECI = new Map();\n  CharacterSetECI.NAME_TO_ECI = new Map(); // Enum name is a Java encoding valid for java.lang and java.io\n  // TYPESCRIPTPORT: changed the main label for ISO as the TextEncoder did not recognized them in the form from java\n  // (eg ISO8859_1 must be ISO88591 or ISO8859-1 or ISO-8859-1)\n  // later on: well, except 16 wich does not work with ISO885916 so used ISO-8859-1 form for default\n\n  CharacterSetECI.Cp437 = new CharacterSetECI(0\n  /* Cp437 */\n  , Int32Array.from([0, 2]), 'Cp437');\n  CharacterSetECI.ISO8859_1 = new CharacterSetECI(1\n  /* ISO8859_1 */\n  , Int32Array.from([1, 3]), 'ISO-8859-1', 'ISO88591', 'ISO8859_1');\n  CharacterSetECI.ISO8859_2 = new CharacterSetECI(2\n  /* ISO8859_2 */\n  , 4, 'ISO-8859-2', 'ISO88592', 'ISO8859_2');\n  CharacterSetECI.ISO8859_3 = new CharacterSetECI(3\n  /* ISO8859_3 */\n  , 5, 'ISO-8859-3', 'ISO88593', 'ISO8859_3');\n  CharacterSetECI.ISO8859_4 = new CharacterSetECI(4\n  /* ISO8859_4 */\n  , 6, 'ISO-8859-4', 'ISO88594', 'ISO8859_4');\n  CharacterSetECI.ISO8859_5 = new CharacterSetECI(5\n  /* ISO8859_5 */\n  , 7, 'ISO-8859-5', 'ISO88595', 'ISO8859_5');\n  CharacterSetECI.ISO8859_6 = new CharacterSetECI(6\n  /* ISO8859_6 */\n  , 8, 'ISO-8859-6', 'ISO88596', 'ISO8859_6');\n  CharacterSetECI.ISO8859_7 = new CharacterSetECI(7\n  /* ISO8859_7 */\n  , 9, 'ISO-8859-7', 'ISO88597', 'ISO8859_7');\n  CharacterSetECI.ISO8859_8 = new CharacterSetECI(8\n  /* ISO8859_8 */\n  , 10, 'ISO-8859-8', 'ISO88598', 'ISO8859_8');\n  CharacterSetECI.ISO8859_9 = new CharacterSetECI(9\n  /* ISO8859_9 */\n  , 11, 'ISO-8859-9', 'ISO88599', 'ISO8859_9');\n  CharacterSetECI.ISO8859_10 = new CharacterSetECI(10\n  /* ISO8859_10 */\n  , 12, 'ISO-8859-10', 'ISO885910', 'ISO8859_10');\n  CharacterSetECI.ISO8859_11 = new CharacterSetECI(11\n  /* ISO8859_11 */\n  , 13, 'ISO-8859-11', 'ISO885911', 'ISO8859_11');\n  CharacterSetECI.ISO8859_13 = new CharacterSetECI(12\n  /* ISO8859_13 */\n  , 15, 'ISO-8859-13', 'ISO885913', 'ISO8859_13');\n  CharacterSetECI.ISO8859_14 = new CharacterSetECI(13\n  /* ISO8859_14 */\n  , 16, 'ISO-8859-14', 'ISO885914', 'ISO8859_14');\n  CharacterSetECI.ISO8859_15 = new CharacterSetECI(14\n  /* ISO8859_15 */\n  , 17, 'ISO-8859-15', 'ISO885915', 'ISO8859_15');\n  CharacterSetECI.ISO8859_16 = new CharacterSetECI(15\n  /* ISO8859_16 */\n  , 18, 'ISO-8859-16', 'ISO885916', 'ISO8859_16');\n  CharacterSetECI.SJIS = new CharacterSetECI(16\n  /* SJIS */\n  , 20, 'SJIS', 'Shift_JIS');\n  CharacterSetECI.Cp1250 = new CharacterSetECI(17\n  /* Cp1250 */\n  , 21, 'Cp1250', 'windows-1250');\n  CharacterSetECI.Cp1251 = new CharacterSetECI(18\n  /* Cp1251 */\n  , 22, 'Cp1251', 'windows-1251');\n  CharacterSetECI.Cp1252 = new CharacterSetECI(19\n  /* Cp1252 */\n  , 23, 'Cp1252', 'windows-1252');\n  CharacterSetECI.Cp1256 = new CharacterSetECI(20\n  /* Cp1256 */\n  , 24, 'Cp1256', 'windows-1256');\n  CharacterSetECI.UnicodeBigUnmarked = new CharacterSetECI(21\n  /* UnicodeBigUnmarked */\n  , 25, 'UnicodeBigUnmarked', 'UTF-16BE', 'UnicodeBig');\n  CharacterSetECI.UTF8 = new CharacterSetECI(22\n  /* UTF8 */\n  , 26, 'UTF8', 'UTF-8');\n  CharacterSetECI.ASCII = new CharacterSetECI(23\n  /* ASCII */\n  , Int32Array.from([27, 170]), 'ASCII', 'US-ASCII');\n  CharacterSetECI.Big5 = new CharacterSetECI(24\n  /* Big5 */\n  , 28, 'Big5');\n  CharacterSetECI.GB18030 = new CharacterSetECI(25\n  /* GB18030 */\n  , 29, 'GB18030', 'GB2312', 'EUC_CN', 'GBK');\n  CharacterSetECI.EUC_KR = new CharacterSetECI(26\n  /* EUC_KR */\n  , 30, 'EUC_KR', 'EUC-KR');\n  return CharacterSetECI;\n}();\n\nexports.default = CharacterSetECI;","map":null,"metadata":{},"sourceType":"script"}