Testing the complexity of elligator inversions.

Generated with scripts/elligator.sage.

---

Icart's Method (not invertible):

v = (3 * a - u^4) / (6 * u)
x = (v^2 - b - (u^6 / 27))^(1 / 3) + (u^2 / 3)

u = +-1/2*sqrt(12*x - 4^(2/3)*(-(u^8 + 18*a*u^4 + 108*b*u^2 - 27*a^2)/u^2)^(1/3))

---

Generalized SSWU (8 preimages):

x1 = (-b / a) * (1 + (1 / (z^2 * u^4 + z * u^2)))
x2 = z * u^2 * x1

u1 = +-1/2*sqrt(2)*sqrt(-(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/((a*x + b)*z))
u2 = +-1/2*sqrt(2)*sqrt(-(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(b*z))

u1 = +-1/2*sqrt(2 * -(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/((a*x + b)*z))
u2 = +-1/2*sqrt(2 * -(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(b*z))

u1 = +-sqrt(-1/2*a*x/(a*x*z + b*z) - 1/2*b/(a*x*z + b*z) +- 1/2*sqrt(a^2*x^2 - 2*a*b*x - 3*b^2)/(a*x*z + b*z))
u2 = +-sqrt(-1/2*a*x/(b*z) - 1/2/z +- 1/2*sqrt(a^2*x^2 - 2*a*b*x - 3*b^2)/(b*z))

Generalized SSWU Unsquared (4 preimages):

x1 = (-b / a) * (1 + (1 / (z^2 * u^2 + z * u)))
x2 = z * u * x1

u1 = -1/2*(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/((a*x + b)*z)
u2 = -1/2*(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(b*z)

Simple SSWU (8 preimages):

x1 = (-b / a) * (1 + (1 / (u^4 - u^2)))
x2 = -u^2 * x1

u1 = +-1/2*sqrt(2)*sqrt((a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(a*x + b))
u2 = +-1/2*sqrt(2)*sqrt((a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/b)

u1 = +-1/2*sqrt(2 * (a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(a*x + b))
u2 = +-1/2*sqrt(2 * (a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/b)

u1 = +-sqrt(1/2*a*x/(a*x + b) + 1/2*b/(a*x + b) +- 1/2*sqrt(a^2*x^2 - 2*a*b*x - 3*b^2)/(a*x + b))
u2 = +-sqrt(1/2*a*x/b +- 1/2*sqrt(a^2*x^2 - 2*a*b*x - 3*b^2)/b + 1/2)

Simple SSWU Unsquared (4 preimages):

x1 = (-b / a) * (1 + (1 / (u^2 - u)))
x2 = -u * x1

u1 = 1/2*(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/(a*x + b)
u2 = 1/2*(a*x + b +- sqrt(a^2*x^2 - 2*a*b*x - 3*b^2))/b

---

Super-Generalized SVDW (12 preimages):

c1 = sqrt(-g(z) * (3 * z^2 + 4 * a))
c2 = sqrt(-g(z) / (3 * z^2 + 4 * a))
t1 = u^2 * g(z)
t2 = 1 + t1
t3 = 1 - t1
t4 = 1 / (t2 * t3)
t5 = u * t3 * t4 * c1
t6 = 2 * t2^2 * t4 * c2
x1 = -z / 2 - t5
x2 = -z / 2 + t5
x3 = z + t6^2

u1 = -(c1 +- sqrt(-4*gz*x^2 - 4*gz*x*z - gz*z^2 + c1^2))/(2*gz*x + gz*z)
u2 = (c1 +- sqrt(-4*gz*x^2 - 4*gz*x*z - gz*z^2 + c1^2))/(2*gz*x + gz*z)
u3 = +-sqrt(-(4*c2^2 +- 4*c2*sqrt(x - z) + x - z)/(4*c2^2*gz - gz*x + gz*z))

Generalized SVDW (8 preimages):

t1 = u^2 + g(z)
t2 = 1 / (u^2 * t1)
t3 = u^4 * t2 * c
x1 = ((c - z) / 2) - t3
x2 = t3 - ((c + z) / 2)
x3 = z - (t1^3 * t2 / (3 * z^2))

u1 = +-sqrt((c*g(z) - 2*g(z)*x - g(z)*z)/(c + 2*x + z))
u2 = +-sqrt((c*g(z) + 2*g(z)*x + g(z)*z)/(c - 2*x - z))
u3 = +-sqrt(-3/2*x*z^2 + 3/2*z^3 +- 1/2*sqrt(9*x^2*z^2 - 18*x*z^3 + 9*z^4 + 12*g(z)*x - 12*g(z)*z)*z - g(z))

Generalized SVDW Unsquared (4 preimages):

t1 = u + g(z)
t2 = 1 / (u * t1)
t3 = u^2 * t2 * c
x1 = ((c - z) / 2) - t3
x2 = t3 - ((c + z) / 2)
x3 = z - (t1^3 * t2 / (3 * z^2))

u1 = (c*g(z) - 2*g(z)*x - g(z)*z)/(c + 2*x + z)
u2 = (c*g(z) + 2*g(z)*x + g(z)*z)/(c - 2*x - z)
u3 = -3/2*x*z^2 + 3/2*z^3 +- 1/2*sqrt(9*x^2*z^2 - 18*x*z^3 + 9*z^4 + 12*g(z)*x - 12*g(z)*z)*z - g(z)

Simple SVDW (8 preimages):

x1 = (-1 + c) / 2 - (c * u^2) / (1 + b + u^2)
x2 = (-1 - c) / 2 + (c * u^2) / (1 + b + u^2)
x3 = 1 - (1 + b + u^2)^2 / (3 * u^2)

u1 = +-sqrt(((b + 1)*c - 2*(b + 1)*x - b - 1)/(c + 2*x + 1))
u2 = +-sqrt(((b + 1)*c + 2*(b + 1)*x + b + 1)/(c - 2*x - 1))
u3 = +-sqrt(-b - 3/2*x +- 1/2*sqrt(6*(2*b - 1)*x + 9*x^2 - 12*b - 3) + 1/2)

Simple SVDW Unsquared (4 preimages):

x1 = (-1 + c) / 2 - (c * u) / (1 + b + u)
x2 = (-1 - c) / 2 + (c * u) / (1 + b + u)
x3 = 1 - (1 + b + u)^2 / (3 * u)

u1 = ((b + 1)*c - 2*(b + 1)*x - b - 1)/(c + 2*x + 1)
u2 = ((b + 1)*c + 2*(b + 1)*x + b + 1)/(c - 2*x - 1)
u3 = -b - 3/2*x +- 1/2*sqrt(6*(2*b - 1)*x + 9*x^2 - 12*b - 3) + 1/2

---

Elligator 1

TODO

---

Elligator 2 (4 preimages, though 2 in practice)

x1 = -a / (1 + z * u^2)
x2 = -x1 - a

u1 = +-sqrt(-(a + x)/(x*z))
u2 = +-sqrt(-x/((a + x)*z))

---

Elligator 2 Ristretto (4 preimages)

r = i * r0^2
ns = a * (r + 1) * (a + d) * (d - a)
c = -1
D = (d * r - a) * (a * r - d)
s = sqrt(ns / D)
s' = s * r0
s' = -s' if not negative
s = s' if not square
c = r if not square
nt = c * (r - 1) * (d + a)^2 - D
w0 = 2 * s * D
w1 = nt * sqrt(a * d - 1)
w2 = 1 + a * s^2
w3 = 1 - a * s^2
x = w0 * w3
y = w2 * w1
z = w1 * w3
t = w0 * w2

s = +-sqrt((y - 1)/a)
D = 1/2*x/s
x2 = 2*s*D
r = 1/2*(a^2 + d^2 +- sqrt(a^4 - 2*a^2*d^2 + d^4 + 4*D*a*d))/(a*d)
c = -(D + nt)/(a^2 + 2*a*d + d^2 - (a^2 + 2*a*d + d^2)*r)
r0 = +-sqrt(r/i)
